////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Открывает форму объединения элементов справочников, планов видов характеристик, видов расчетов и счетов.
//
// Параметры:
//     ОбъединяемыеЭлементы - ТаблицаФормы, Массив, СписокЗначений - список элементов к объединению.
//                            Также можно передать произвольную коллекцию элементов с реквизитом "Ссылка".
//
Процедура ОбъединитьВыделенные(Знач ОбъединяемыеЭлементы) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаборСсылок", НаборСсылок(ОбъединяемыеЭлементы));
	ОткрытьФорму("Обработка.ЗаменаСсылок.Форма.ОбъединениеЭлементов", ПараметрыФормы); 
	
КонецПроцедуры

// Открывает форму замены ссылок объединением.
//
// Параметры:
//     ОбъединяемыеЭлементы - ТаблицаФормы, Массив, СписокЗначений - список элементов к замене.
//                            Также можно передать произвольную коллекцию элементов с реквизитом "Ссылка".
//
Процедура ЗаменитьВыделенные(Знач ОбъединяемыеЭлементы) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаборСсылок", НаборСсылок(ОбъединяемыеЭлементы));
	ПараметрыФормы.Вставить("ОткрытаПоСценарию");
	ОткрытьФорму("Обработка.ЗаменаСсылок.Форма.ЗаменаЭлементов", ПараметрыФормы); 
	
КонецПроцедуры

// Открывает отчет о местах использования ссылок.
// В отчет не включаются вспомогательные данные, такие как наборы записей с ведущим измерением и т.п.
//
// Параметры:
//
//     Элементы    - ТаблицаФормы, Массив, СписокЗначений - список элементов для анализа.
//                   Также можно передать произвольную коллекцию элементов с реквизитом "Ссылка".
//
//     ПараметрыОткрытия - Структура - параметры открытия формы. Состоит из необязательных полей
//         Владелец, Уникальность, Окно, НавигационнаяСсылка, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкна,
//         соответствующих параметрам функции ОткрытьФорму
// 
Процедура ПоказатьМестаИспользования(Знач Элементы, Знач ПараметрыОткрытия = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаборСсылок", НаборСсылок(Элементы));
	
	ПараметрыОткрытияФормы = Новый Структура("Владелец, Уникальность, Окно, НавигационнаяСсылка, ОписаниеОповещенияОЗакрытии, РежимОткрытияОкна");
	Если ПараметрыОткрытия <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормы, ПараметрыОткрытия);
	КонецЕсли;
		
	ОткрытьФорму("Отчет.МестаИспользованияСсылок.Форма", ПараметрыФормы,
		ПараметрыОткрытияФормы.Владелец, ПараметрыОткрытияФормы.Уникальность, ПараметрыОткрытияФормы.Окно, 
		ПараметрыОткрытияФормы.НавигационнаяСсылка, ПараметрыОткрытияФормы.ОписаниеОповещенияОЗакрытии, 
		ПараметрыОткрытияФормы.РежимОткрытияОкна
	); 
	
КонецПроцедуры

// Устанавливает заголовок главного окна приложения, используя представление текущего пользователя,
// значение константы ЗаголовокПриложения и заголовок приложения по умолчанию.
//
// Параметры:
//   ПриЗапуске - Булево - Истина, если вызывается при начале работы программы.
//
Процедура УстановитьРасширенныйЗаголовокПриложения(ПриЗапуске = Ложь) Экспорт
	
	ПараметрыКлиента = ?(ПриЗапуске, СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске(),
		СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента());
		
	Если ПараметрыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		ПредставлениеЗаголовка = ПараметрыКлиента.ЗаголовокПриложения;
		ПредставлениеПользователя = ПараметрыКлиента.ПредставлениеПользователя;
		ПредставлениеКонфигурации = ПараметрыКлиента.ПодробнаяИнформация;
		
		Если ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
			Если ПараметрыКлиента.Свойство("ПредставлениеОбластиДанных") Тогда
				ШаблонЗаголовка = "%1 / %2 / %3";
				ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
					ПараметрыКлиента.ПредставлениеОбластиДанных, ПредставлениеКонфигурации, 
					ПредставлениеПользователя);
			Иначе
				ШаблонЗаголовка = "%1 / %2";
				ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
					ПредставлениеКонфигурации, ПредставлениеПользователя);
			КонецЕсли;
		Иначе
			ШаблонЗаголовка = "%1 / %2 / %3";
			ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
				СокрЛП(ПредставлениеЗаголовка), ПредставлениеПользователя, ПредставлениеКонфигурации);
		КонецЕсли;
	Иначе
		ШаблонЗаголовка = "%1 / %2";
		ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
			НСтр("ru = 'Не установлены разделители'"), ПараметрыКлиента.ПодробнаяИнформация);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентПереопределяемый.ПриУстановкеЗаголовкаКлиентскогоПриложения(ЗаголовокПриложения, ПриЗапуске);
	
	УстановитьЗаголовокКлиентскогоПриложения(ЗаголовокПриложения);
	
КонецПроцедуры

// Отключает выдачу предупреждения пользователю при завершении работы программы.
//
Процедура ПропуститьПредупреждениеПередЗавершениемРаботыСистемы() Экспорт
	
	ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина;
	
КонецПроцедуры

// Показать форму вопроса.
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия окна вопроса
//                                                        со следующими параметрами: 
//                                                          РезультатВопроса - Структура - структура со свойствами:
//                                                            Значение - результат выбора пользователя: значение системного перечисления или значение, 
//                                                              связанное с нажатой кнопкой. В случае закрытия диалога по истечении времени - значение Таймаут.
//                                                            БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора пользователя в одноименном флажке.
//                                                          ДополнительныеПараметры - Структура 
//   ТекстВопроса                  - Строка             - текст задаваемого вопроса. 
//   Кнопки                        - РежимДиалогаВопрос, СписокЗначений - может быть задан список значений, в котором
//                                       Значение – содержит значение, связанное с 
//                                                  кнопкой и возвращаемое при выборе кнопки. В качестве значения может использоваться значение 
//                                                  перечисления КодВозвратаДиалога, а также другие значения, поддерживающее XDTO-сериализацию.
//                                       Представление – задает текст кнопки.
//
//   ДополнительныеПараметры       - Структура          - дополнительные параметры, см. описание к ПараметрыВопросаПользователю.
//
// Возвращаемое значение:
//   Результат выбора пользователя будет передан в метод, описанный параметром ОписаниеОповещенияОЗавершении. 
//
Процедура ПоказатьВопросПользователю(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Параметры = ДополнительныеПараметры;
	Иначе	
		Параметры = ПараметрыВопросаПользователю();
	КонецЕсли;
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		КнопкаПоУмолчаниюПараметр = КодВозвратаДиалогаВСтроку(Параметры.КнопкаПоУмолчанию);
	Иначе
		КнопкаПоУмолчаниюПараметр = Параметры.КнопкаПоУмолчанию;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		КнопкаТаймаутаПараметр = КодВозвратаДиалогаВСтроку(Параметры.КнопкаТаймаута);
	Иначе
		КнопкаТаймаутаПараметр = Параметры.КнопкаТаймаута;
	КонецЕсли;
	
	Параметры.Вставить("Кнопки",            КнопкиПараметр);
	Параметры.Вставить("Таймаут",           Параметры.Таймаут);
	Параметры.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчаниюПараметр);
	Параметры.Вставить("Заголовок",         Параметры.Заголовок);
	Параметры.Вставить("КнопкаТаймаута",    КнопкаТаймаутаПараметр);
	Параметры.Вставить("ТекстСообщения",    ТекстВопроса);
	Параметры.Вставить("Картинка",          Параметры.Картинка);
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Параметры.ПредлагатьБольшеНеЗадаватьЭтотВопрос);
	
	ОткрытьФорму("ОбщаяФорма.Вопрос", Параметры,,,,,ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

// Возвращает новую структуру дополнительных параметров для процедуры ПоказатьВопросПользователю.
//
// Возвращаемое значение:
//   Структура   - параметры процедуры ПоказатьВопросПользователю:
//     КнопкаПоУмолчанию             - Произвольный       - определяет кнопку по умолчанию по типу кнопки или по связанному с ней значению. 
//     Таймаут                       - Число              - интервал времени в секундах до автоматического закрытия окна вопроса. 
//     КнопкаТаймаута                - Произвольный       - кнопка (по типу кнопки или по связанному с ней значению), 
//                                                          на которой отображается количество секунд, оставшихся до истечения таймаута. 
//     Заголовок                     - Строка             - заголовок вопроса. 
//     ПредлагатьБольшеНеЗадаватьЭтотВопрос - Булево      - если Истина, то в окне вопроса будет доступен одноименный флажок.
//     БольшеНеЗадаватьЭтотВопрос    - Булево             - принимает значение, выбранное пользователем в соответствующем флажке.
//
Функция ПараметрыВопросаПользователю() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию", Неопределено);
	Параметры.Вставить("Таймаут", 0);
	Параметры.Вставить("КнопкаТаймаута", Неопределено);
	Параметры.Вставить("Заголовок", ПолучитьЗаголовокКлиентскогоПриложения());
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Истина);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос", Ложь);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Ложь);
	Параметры.Вставить("Картинка", Неопределено);
	Возврат Параметры;
	
КонецФункции	

// Выполнить стандартные действия перед началом работы пользователя
// с областью данных, либо в локальном режиме работы.
//
// Предназначена для вызова из обработчика ПередНачаломРаботыСистемы модулей управляемого и обычного приложения.
//
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - не задается при вызове из обработчика ПередНачаломРаботыСистемы 
//                         модулей управляемого и обычного приложения. В других случаях, после запуска будет вызвано оповещение
//                         с параметром типа Структура со свойствами:
//                         - Отказ - Булево - Ложь, если запуск выполнен успешно, или Истина, если вход в программу не выполнен;
//                         - Перезапустить - Булево - если требуется перезапуск программы;
//                         - ДополнительныеПараметрыКоманднойСтроки - Строка - для перезапуска.
//
Процедура ПередНачаломРаботыСистемы(Знач ОповещениеЗавершения = Неопределено) Экспорт
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы", 
			"ОповещениеЗавершения", ОповещениеЗавершения, Тип("ОписаниеОповещения"));
	КонецЕсли;
			
	УстановитьРазделениеСеанса();
	
	Параметры = Новый Структура;
	
	// Внешние параметры описания результата.
	Параметры.Вставить("Отказ", Ложь);
	Параметры.Вставить("Перезапустить", Ложь);
	Параметры.Вставить("ДополнительныеПараметрыКоманднойСтроки", "");
	
	// Внешние параметры управления выполнением.
	Параметры.Вставить("ИнтерактивнаяОбработка", Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("ОбработкаПродолжения",   Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("НепрерывноеВыполнение", Истина);
	Параметры.Вставить("ПолученныеПараметрыКлиента", Новый Структура);
	
	// Внутренние параметры.
	Параметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	Параметры.Вставить("ОбработкаЗавершения", Новый ОписаниеОповещения(
		"ДействияПередНачаломРаботыСистемыОбработкаЗавершения", ЭтотОбъект, Параметры));
	
	ОбновитьПараметрыРаботыКлиента(Параметры, Истина);
	
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПередНачаломРаботыСистемыПослеПроверкиВерсииПлатформы", ЭтотОбъект, Параметры));
	
	Попытка
		ПроверитьВерсиюПлатформыПриЗапуске(Параметры);

	Исключение
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Выполнить стандартные действия при начале работы пользователя
// с областью данных, либо в локальном режиме работы.
//
// Предназначена для вызова из обработчика ПриНачалеРаботыСистемы модулей управляемого и обычного приложения.
//
// Параметры:
//  ОповещениеЗавершения - ОписаниеОповещения - не задается при вызове из обработчика ПриНачалеРаботыСистемы 
//                         модулей управляемого и обычного приложения. В других случаях, после запуска будет вызвано оповещение
//                         с параметром типа Структура со свойствами:
//                         - Отказ - Булево - Ложь, если запуск выполнен успешно, или Истина, если вход в программу не выполнен;
//                         - Перезапустить - Булево - если требуется перезапуск программы;
//                         - ДополнительныеПараметрыКоманднойСтроки - Строка - для перезапуска.
//
//  НепрерывноеВыполнение - Булево - Возвращаемое значение. Только для внутреннего использования.
//                          Для перехода из обработчика ПередНачаломРаботыСистемы
//                          выполненного в режиме интерактивной обработки.
//
Процедура ПриНачалеРаботыСистемы(Знач ОповещениеЗавершения = Неопределено, НепрерывноеВыполнение = Истина) Экспорт
	
	Если ОповещениеЗавершения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы", 
			"ОповещениеЗавершения", ОповещениеЗавершения, Тип("ОписаниеОповещения"));
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы", 
		"НепрерывноеВыполнение", НепрерывноеВыполнение, Тип("Булево"));
	
	Если ВыполняетсяИнтерактивнаяОбработкаПередНачаломРаботыСистемы() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	
	// Внешние параметры описания результата.
	Параметры.Вставить("Отказ", Ложь);
	Параметры.Вставить("Перезапустить", Ложь);
	Параметры.Вставить("ДополнительныеПараметрыКоманднойСтроки", "");
	
	// Внешние параметры управления выполнением.
	Параметры.Вставить("ИнтерактивнаяОбработка", Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("ОбработкаПродолжения",   Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("НепрерывноеВыполнение", НепрерывноеВыполнение);
	
	// Внутренние параметры.
	Параметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	Параметры.Вставить("ОбработкаЗавершения", Новый ОписаниеОповещения(
		"ДействияПриНачалеРаботыСистемыОбработкаЗавершения", ЭтотОбъект, Параметры));
	
	// Подготовка перехода к следующей процедуре.
	Параметры.Вставить("НомерСледующегоОбработчика", 1);
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПриНачалеРаботыСистемыВОбработчикахСлужебногоСобытия", ЭтотОбъект, Параметры));
	
	Попытка
		УстановитьРасширенныйЗаголовокПриложения(Истина); // Для главного окна.
		
		Если НЕ ОбработатьПараметрыЗапуска() Тогда
			Параметры.Отказ = Истина;
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
			Возврат;
		КонецЕсли;
	Исключение
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Выполнить стандартные действия перед завершением работы пользователя
// с областью данных, либо в локальном режиме работы.
//
// Предназначена для вызова из обработчика ПередЗавершениемРаботыСистемы модулей управляемого и обычного приложения.
//
// Параметры:
//  Отказ                - Булево - Возвращаемое значение. Признак отказа от завершения работы 
//                         для обработчика события ПередЗавершениемРаботыСистемы, либо программного отказа,
//                         либо потребовалась интерактивная обработка. В случае успешного взаимодействия
//                         с пользователем, завершение работы будет продолжено.
//
//  ОповещениеЗавершения - ОписаниеОповещения - не задается при вызове из обработчика ПередЗавершениемРаботыСистемы 
//                         модулей управляемого и обычного приложения. В других случаях, при завершении будет вызвано оповещение
//                         с параметром типа Структура со свойством:
//                         - Отказ - Булево - Ложь, если завершение работы выполнено успешно, 
//                                   или Истина, если завершение работы следует отменить;
//
Процедура ПередЗавершениемРаботыСистемы(Отказ = Ложь, Знач ОповещениеЗавершения = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы", 
		"Отказ", Отказ, Тип("Булево"));
	Если ОповещениеЗавершения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы", 
			"ОповещениеЗавершения", ОповещениеЗавершения, Тип("ОписаниеОповещения"));
	КонецЕсли;
	
	Если ОповещениеЗавершения = Неопределено Тогда
		Если ПараметрыПриЗапускеИЗавершенииПрограммы.Свойство("ДействияПередЗавершениемРаботыСистемыВыполнены") Тогда
			ПараметрыПриЗапускеИЗавершенииПрограммы.Удалить("ДействияПередЗавершениемРаботыСистемыВыполнены");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// При очередном выходе из приложения параметры клиента при завершении нужно получать заново.
	Если ПараметрыПриЗапускеИЗавершенииПрограммы.Свойство("ПараметрыРаботыКлиентаПриЗавершении") Тогда
		ПараметрыПриЗапускеИЗавершенииПрограммы.Удалить("ПараметрыРаботыКлиентаПриЗавершении");
	КонецЕсли;
	
	Параметры = Новый Структура;
	
	// Внешние параметры описания результата.
	Параметры.Вставить("Отказ", Ложь);
	
	// Внешние параметры управления выполнением.
	Параметры.Вставить("ИнтерактивнаяОбработка", Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("ОбработкаПродолжения",   Неопределено); // ОписаниеОповещения.
	Параметры.Вставить("НепрерывноеВыполнение", Истина);
	
	// Внутренние параметры.
	Параметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	Параметры.Вставить("ОбработкаЗавершения", Новый ОписаниеОповещения(
		"ДействияПередЗавершениемРаботыСистемыОбработкаЗавершения", ЭтотОбъект, Параметры));
	
	Параметры.Вставить("НомерСледующегоОбработчика", 1);
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПередЗавершениемРаботыСистемыВОбработчикахСлужебногоСобытия", ЭтотОбъект, Параметры));
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
	Если Параметры.Отказ Или НЕ Параметры.НепрерывноеВыполнение Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы
// конфигурации на клиенте при завершении, т.е. в обработчиках событий
// - ПередЗавершениемРаботыСистемы,
// - ПриЗавершенииРаботыСистемы
// 
// Возвращаемое значение:
//   ФиксированнаяСтруктура - структура параметров работы клиента при завершении.
//
Функция ПараметрыРаботыКлиентаПриЗавершении() Экспорт
	
	Если НЕ ПараметрыПриЗапускеИЗавершенииПрограммы.Свойство("ПараметрыРаботыКлиентаПриЗавершении") Тогда
		ПараметрыПриЗапускеИЗавершенииПрограммы.Вставить("ПараметрыРаботыКлиентаПриЗавершении",
			СтандартныеПодсистемыВызовСервера.ПараметрыРаботыКлиентаПриЗавершении());
	КонецЕсли;
	
	Возврат ПараметрыПриЗапускеИЗавершенииПрограммы.ПараметрыРаботыКлиентаПриЗавершении;
	
КонецФункции

// ИспользованиеМодальности

// Устарела. Следует использовать ПоказатьВопросПользователю.
// Вызывает форму вопроса.
// Параметры и возвращаемое значение совместимы с функцией глобального контекста Вопрос со следующими дополнениями:
//
// Параметры:
//   Кнопки - СписокЗначений - в котором:
//            Значение – содержит значение, связанное с 
//              кнопкой и возвращаемое при выборе кнопки. В качестве значения может использоваться значение 
//              перечисления КодВозвратаДиалога, а также другие значения, поддерживающее XDTO сериализацию.
//            Представление – задает текст кнопки.
//
//   БольшеНеЗадаватьЭтотВопрос - Булево - принимает значение, выбранное пользователем в соответствующим 
//                                         флажке диалога.
//
//   ПредлагатьБольшеНеЗадаватьЭтотВопрос - Булево - флаг того, что пользователю надо предлагать вариант.
//
// Возвращаемое значение:
//   КодВозвратаДиалога - ответ пользователя. Либо одно из значений из списка значений Кнопки. 
//
Функция ВопросПользователю(ТекстСообщения, Кнопки, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = "", КнопкаТаймаута = Неопределено,
	БольшеНеЗадаватьЭтотВопрос = Ложь, ПредлагатьБольшеНеЗадаватьЭтотВопрос=Истина) Экспорт
	
	БольшеНеЗадаватьЭтотВопрос = Ложь;
	
	Параметры = Новый Структура;
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;
	
	Если ТипЗнч(КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		КнопкаПоУмолчаниюПараметр = КодВозвратаДиалогаВСтроку(КнопкаПоУмолчанию);
	Иначе
		КнопкаПоУмолчаниюПараметр = КнопкаПоУмолчанию;
	КонецЕсли;
	
	Если ТипЗнч(КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		КнопкаТаймаутаПараметр = КодВозвратаДиалогаВСтроку(КнопкаТаймаута);
	Иначе
		КнопкаТаймаутаПараметр = КнопкаТаймаута;
	КонецЕсли;
	
	Параметры.Вставить("Кнопки",            КнопкиПараметр);
	Параметры.Вставить("Таймаут",           Таймаут);
	Параметры.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчаниюПараметр);
	Параметры.Вставить("Заголовок",         Заголовок);
	Параметры.Вставить("КнопкаТаймаута",    КнопкаТаймаутаПараметр);
	Параметры.Вставить("ТекстСообщения",    ТекстСообщения);
	
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", ПредлагатьБольшеНеЗадаватьЭтотВопрос);
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.Вопрос", Параметры);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		БольшеНеЗадаватьЭтотВопрос = Результат.БольшеНеЗадаватьЭтотВопрос;
		Возврат Результат.Значение;
	Иначе
		Возврат КодВозвратаДиалога.Отмена;
	КонецЕсли;
	
КонецФункции

// Конец ИспользованиеМодальности

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// После предупреждения вызывает процедуру с параметрами Результат, ДополнительныеПараметры.
//
// Параметры:
//  Параметры           - Структура, которая содержит свойство:
//                          ОбработкаПродолжения - ОписаниеОповещения, которое
//                          содержит процедуру с двумя параметрами:
//                            Результат, ДополнительныеПараметры.
//
//  ТекстПредупреждения - Строка - текст предупреждения, который нужно показать.
//
Процедура ПоказатьПредупреждениеИПродолжить(Параметры, ТекстПредупреждения) Экспорт
	
	ОповещениеСРезультатом = Параметры.ОбработкаПродолжения;
	
	Если ТекстПредупреждения = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеСРезультатом);
		Возврат;
	КонецЕсли;
		
	Если Параметры.Отказ Тогда
		
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить("Перезапустить", НСтр("ru = 'Перезапустить'"));
		Кнопки.Добавить("Завершить", НСтр("ru = 'Завершить работу'"));
		
		ПараметрыВопроса = ПараметрыВопросаПользователю();
		ПараметрыВопроса.КнопкаПоУмолчанию = "Перезапустить";
		ПараметрыВопроса.КнопкаТаймаута = "Перезапустить";
		ПараметрыВопроса.Таймаут = 60;
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		ПараметрыВопроса.БлокироватьВесьИнтерфейс = Истина;
		ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
		
	Иначе

		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить("Перезапустить", НСтр("ru = 'Перезапустить'"));
		Кнопки.Добавить("Завершить", НСтр("ru = 'Завершить работу'"));
		
		ПараметрыВопроса = ПараметрыВопросаПользователю();
		ПараметрыВопроса.КнопкаПоУмолчанию = "Продолжить";
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		ПараметрыВопроса.БлокироватьВесьИнтерфейс = Истина;
		ПараметрыВопроса.Картинка = БиблиотекаКартинок.Предупреждение32;
		
	КонецЕсли;
	
	ОповещениеОЗакрытие = Новый ОписаниеОповещения("ПоказатьПредупреждениеИПродолжитьЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВопросПользователю(ОповещениеОЗакрытие, ТекстПредупреждения, Кнопки, ПараметрыВопроса);
	
КонецПроцедуры

// Показывает диалог выбора файлов и помещает выбранные файлы во временное хранилище.
//  Совмещает работу методов глобального метода НачатьПомещениеФайла и ПоместитьФайлы,
//  возвращая идентичный результат вне зависимости от того, подключено расширение работы с файлами, или нет.
//
// Параметры:
//   ОбработчикРезультата  - ОписаниеОповещения - Описание процедуры, принимающей результат выбора.
//   ИдентификаторФормы    - УникальныйИдентификатор - Уникальный идентификатор формы, из которой выполняется размещение файла.
//   НачальноеИмяФайла     - Строка - Полный путь и имя файла, которые будут предложены пользователю в начале выбора.
//   ПараметрыДиалога      - Структура, Неопределено - См. свойства ДиалогВыбораФайла в синтакс-помощнике.
//       Используется в случае, если удалось подключить расширение работы с файлами.
//
// Значение первого параметра, возвращаемого в ОбработчикРезультата:
//   ПомещенныеФайлы - Результат выбора.
//       * - Неопределено - Пользователь отказался от выбора.
//       * - Массив из ОписаниеПереданногоФайла, Структура - Пользователь выбрал файл.
//           ** Имя      - Строка - Полное имя выбранного файла.
//           ** Хранение - Строка - Адрес во временном хранилище, по которому размещен файл.
//
// Ограничения:
//   Используется только для интерактивного выбора в диалоге.
//   Не используется для выбора каталогов - эта опция не поддерживается веб-клиентом.
//   Не поддерживается множественный выбор в веб-клиенте, если не установлено расширение работы с файлами.
//   Не поддерживается передача адреса временного хранилища.
//
Процедура ПоказатьПомещениеФайла(ОбработчикРезультата, ИдентификаторФормы, НачальноеИмяФайла, ПараметрыДиалога) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОбработчикРезультата", ОбработчикРезультата);
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		Если ПараметрыДиалога = Неопределено Тогда
			ПараметрыДиалога = Новый Структура;
		КонецЕсли;
		Если ПараметрыДиалога.Свойство("Режим") Тогда
			Режим = ПараметрыДиалога.Режим;
			Если Режим = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
				ВызватьИсключение НСтр("ru = 'Выбор каталога не поддерживается'");
			КонецЕсли;
		Иначе
			Режим = РежимДиалогаВыбораФайла.Открытие;
		КонецЕсли;
		
		Диалог = Новый ДиалогВыбораФайла(Режим);
		Диалог.ПолноеИмяФайла = НачальноеИмяФайла;
		ЗаполнитьЗначенияСвойств(Диалог, ПараметрыДиалога);
		
		ПомещенныеФайлы = Новый Массив;
		ВыборВыполнен = ПоместитьФайлы(, ПомещенныеФайлы, Диалог, Истина, ИдентификаторФормы);
		ОбработатьРезультатПомещенияФайла(ВыборВыполнен, ПомещенныеФайлы, Неопределено, ДополнительныеПараметры);
		
	Иначе
		
		Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайла", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(Обработчик, , НачальноеИмяФайла, Истина, ИдентификаторФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик результата работы процедуры ПоказатьПомещениеФайла.
//
Процедура ОбработатьРезультатПомещенияФайла(ВыборВыполнен, АдресИлиРезультатВыбора, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	Если ВыборВыполнен = Истина Тогда
		Если ТипЗнч(АдресИлиРезультатВыбора) = Тип("Массив") Тогда
			ПомещенныеФайлы = АдресИлиРезультатВыбора;
		Иначе
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("Хранение", АдресИлиРезультатВыбора);
			ОписаниеФайла.Вставить("Имя",      ВыбранноеИмяФайла);
			ПомещенныеФайлы = Новый Массив;
			ПомещенныеФайлы.Добавить(ОписаниеФайла);
		КонецЕсли;
	Иначе
		ПомещенныеФайлы = Неопределено;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикРезультата, ПомещенныеФайлы);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка результата выполнения

// Выводит результат выполнения какой-либо операции.
//
// Предназначена только для отображения результата работы сервера на клиенте,
// не предназначена для отображения промежуточных стадий - диалогов и т.п..
//
// См. также:
//   СтандартныеПодсистемыКлиентСервер.НовыйРезультатВыполнения()
//   СтандартныеПодсистемыКлиентСервер.ПодготовитьОповещениеДинамическихСписков()
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, для которой требуется вывод.
//   Результат - Структура - Результат выполнения операции, который необходимо вывести.
//       * ВыводОповещения - Структура - Всплывающее оповещение.
//           ** Использование - Булево - Выводить оповещение.
//           ** Заголовок     - Строка - Заголовок оповещения.
//           ** Текст         - Строка - Текст оповещения.
//           ** Ссылка        - Строка - Навигационная гиперссылка текста.
//           ** Картинка      - Картинка - Картинка оповещения.
//       * ВыводСообщения - Структура - Сообщение формы, привязанное к реквизиту.
//           ** Использование       - Булево - Выводить сообщение.
//           ** Текст               - Строка - Текст сообщения.
//           ** ПутьКРеквизитуФормы - Строка - Путь к реквизиту формы, к которому относится сообщение.
//       * ВыводПредупреждения - Структура - Окно предупреждения, блокирующее весь интерфейс.
//           ** Использование       - Булево - Выводить предупреждение.
//           ** Заголовок           - Строка - Заголовок окна.
//           ** Текст               - Строка - Текст предупреждения.
//           ** ТекстОшибок         - Строка - Необязательный. Тексты ошибок, которые при желании может просмотреть пользователь.
//           ** ПутьКРеквизитуФормы - Строка - Необязательный. Путь к реквизиту формы, значение которого вызывало ошибку.
//       * ОповещениеФорм - Структура, Массив из Структура - см. справку к методу глобального контекста Оповестить().
//           ** Использование - Булево - Оповещать открытые формы.
//           ** ИмяСобытия    - Строка - Имя события, которое используется для первичной идентификации сообщений принимающими формами.
//           ** Параметр      - Произвольный - Набор данных, которые используются принимающей формой для обновления состава.
//           ** Источник      - Произвольный - Источник оповещения, например форма-источником.
//       * ОповещениеДинамическихСписков - Структура - см. справку к методу глобального контекста ОповеститьОбИзменении().
//           ** Использование - Булево - Оповещать динамические списки.
//           ** СсылкаИлиТип  - Произвольный - Ссылка, тип, или массив типов, которые необходимо обновить.
//
Процедура ПоказатьРезультатВыполнения(Форма, Результат) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") И ТипЗнч(Результат) <> Тип("ФиксированнаяСтруктура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("ВыводОповещения") И Результат.ВыводОповещения.Использование Тогда
		Оповещение = Результат.ВыводОповещения;
		ПоказатьОповещениеПользователя(Оповещение.Заголовок, Оповещение.Ссылка, Оповещение.Текст, Оповещение.Картинка);
	КонецЕсли;
	
	Если Результат.Свойство("ВыводСообщения") И Результат.ВыводСообщения.Использование Тогда
		Сообщение = Новый СообщениеПользователю;
		Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
			Сообщение.ИдентификаторНазначения = Форма.УникальныйИдентификатор;
		КонецЕсли;
		Сообщение.Текст = Результат.ВыводСообщения.Текст;
		Сообщение.Поле  = Результат.ВыводСообщения.ПутьКРеквизитуФормы;
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Результат.Свойство("ВыводПредупреждения") И Результат.ВыводПредупреждения.Использование Тогда
		ВыводПредупреждения = Результат.ВыводПредупреждения;
		Если ЗначениеЗаполнено(ВыводПредупреждения.ТекстОшибок) Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(1, НСтр("ru = 'Показать ошибки'"));
			Если ТипЗнч(Форма) = Тип("УправляемаяФорма") И ЗначениеЗаполнено(ВыводПредупреждения.ПутьКРеквизитуФормы) Тогда
				Кнопки.Добавить(2, НСтр("ru = 'Перейти к реквизиту'"));
			КонецЕсли;
			Кнопки.Добавить(0, НСтр("ru = 'Продолжить'"));
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ВыводПредупреждения", ВыводПредупреждения);
			ДополнительныеПараметры.Вставить("Форма", Форма);
			Обработчик = Новый ОписаниеОповещения("ПоказатьРезультатВыполненияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ПоказатьВопрос(Обработчик, ВыводПредупреждения.Текст, Кнопки, , 1, ВыводПредупреждения.Заголовок);
		Иначе
			ПоказатьПредупреждение(, ВыводПредупреждения.Текст, , ВыводПредупреждения.Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("ОповещениеФорм") Тогда
		Если ТипЗнч(Результат.ОповещениеФорм) = Тип("Структура") Или ТипЗнч(Результат.ОповещениеФорм) = Тип("ФиксированнаяСтруктура") Тогда
			ОповещениеФорм = Результат.ОповещениеФорм;
			Если ОповещениеФорм.Использование Тогда
				Оповестить(ОповещениеФорм.ИмяСобытия, ОповещениеФорм.Параметр, ОповещениеФорм.Источник);
			КонецЕсли;
		Иначе
			Для Каждого ОповещениеФорм Из Результат.ОповещениеФорм Цикл
				Если ОповещениеФорм.Использование Тогда
					Оповестить(ОповещениеФорм.ИмяСобытия, ОповещениеФорм.Параметр, ОповещениеФорм.Источник);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("ОповещениеДинамическихСписков") И Результат.ОповещениеДинамическихСписков.Использование Тогда
		Если ТипЗнч(Результат.ОповещениеДинамическихСписков.СсылкаИлиТип) = Тип("Массив") Тогда
			Для Каждого СсылкаИлиТип Из Результат.ОповещениеДинамическихСписков.СсылкаИлиТип Цикл
				ОповеститьОбИзменении(СсылкаИлиТип);
			КонецЦикла;
		Иначе
			ОповеститьОбИзменении(Результат.ОповещениеДинамическихСписков.СсылкаИлиТип);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ответа на вопрос при выводе результата выполнения.
//
Процедура ПоказатьРезультатВыполненияЗавершение(Ответ, Результат) Экспорт
	
	Если Ответ = 1 Тогда
		
		ЗаголовокДокумента = Результат.ВыводПредупреждения.Текст;
		ЗаголовокДокумента = СтрЗаменить(ЗаголовокДокумента, Символы.ПС, "; ");
		Если СтрДлина(ЗаголовокДокумента) > 75 Тогда
			ЗаголовокДокумента = Лев(ЗаголовокДокумента, 72) + "...";
		КонецЕсли;
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(Результат.ВыводПредупреждения.ТекстОшибок);
		ТекстовыйДокумент.Показать(ЗаголовокДокумента);
		
	ИначеЕсли Ответ = 2 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ИдентификаторНазначения = Результат.Форма.УникальныйИдентификатор;
		Сообщение.Текст = Результат.ВыводПредупреждения.Текст;
		Сообщение.Поле  = Результат.ВыводПредупреждения.ПутьКРеквизитуФормы;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Открывает форму ввода пароля пользователя сервиса
//
// Параметры:
//  ОбработкаПродолжения      - ОписаниеОповещения, которое нужно обработать после получения пароля.
//  ФормаВладелец             - Неопределено, УправляемаяФорма, которая запрашивает пароль.
//  ПарольПользователяСервиса - Строка - текущий пароль пользователя сервиса.
//
Процедура ПриЗапросеПароляДляАутентификацииВСервисе(ОбработкаПродолжения, ФормаВладелец = Неопределено, ПарольПользователяСервиса = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		
		МодульПользователиСлужебныйВМоделиСервисаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль(
			"ПользователиСлужебныйВМоделиСервисаКлиент");
		
		МодульПользователиСлужебныйВМоделиСервисаКлиент.ЗапроситьПарольДляАутентификацииВСервисе(
			ОбработкаПродолжения, ФормаВладелец, ПарольПользователяСервиса);
	КонецЕсли;
	
КонецПроцедуры

// Переадресует оповещение без результата на оповещение с результатом.
Функция ОповещениеБезРезультата(ОповещениеСРезультатом) Экспорт
	
	Возврат Новый ОписаниеОповещения("ВыполнитьОповещениеСПустымРезультатом", ЭтотОбъект, ОповещениеСРезультатом);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПередНачаломРаботыСистемы

// Только для внутреннего использования. Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыПослеПроверкиВерсииПлатформы(Неопределен, Параметры) Экспорт
	
	Если НЕ ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);
		Попытка
			МодульРаботаВМоделиСервисаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаВМоделиСервисаКлиент");
			МодульРаботаВМоделиСервисаКлиент.ПередНачаломРаботыСистемы(Параметры);
		Исключение
			ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
		КонецПопытки;
		Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПередНачаломРаботыСистемыПослеПроверкиЛегальности", ЭтотОбъект, Параметры));
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует(
		   "СтандартныеПодсистемы.ПроверкаЛегальностиПолученияОбновления") Тогда
		
		Попытка
			МодульПроверкаЛегальностиПолученияОбновленияКлиент =
				ОбщегоНазначенияКлиент.ОбщийМодуль("ПроверкаЛегальностиПолученияОбновленияКлиент");
			
			МодульПроверкаЛегальностиПолученияОбновленияКлиент.ПроверитьЛегальностьПолученияОбновленияПриЗапуске(Параметры);
		Исключение
			ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
		КонецПопытки;
		Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения, Ложь);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыПослеПроверкиЛегальности(Неопределен, Параметры) Экспорт
	
	Если НЕ ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПередНачаломРаботыСистемыПослеПовторенияЗагрузкиСообщенияОбменаДанными", ЭтотОбъект, Параметры));
	
	Попытка
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
			// Запрос у пользователя с или без повтора загрузки сообщения обмена данными.
			МодульОбменДаннымиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменДаннымиКлиент");
			МодульОбменДаннымиКлиент.ПередНачаломРаботыСистемы(Параметры);
		КонецЕсли;
	Исключение
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения, Ложь);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыПослеПовторенияЗагрузкиСообщенияОбменаДанными(Неопределен, Параметры) Экспорт
	
	Если НЕ ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);
	
	Попытка
		ОбновлениеИнформационнойБазыКлиент.ПередНачаломРаботыСистемы(Параметры);
	Исключение
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ПользователиСлужебныйКлиент.ПроверитьАвторизациюПользователя(Параметры, Истина);
	Исключение
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
		
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПередНачаломРаботыСистемыПослеОбновленияПараметровРаботыПрограммы", ЭтотОбъект, Параметры));
		
	Попытка
		ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
		Если ПараметрыКлиента.Свойство("НеобходимоОбновлениеПараметровРаботыПрограммы") Тогда
			// Параметры работы программы должны быть обновлены до продолжения работы.
			ЗагрузитьОбновитьПараметрыРаботыПрограммы(Параметры);
		КонецЕсли;
	Исключение
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыПослеОбновленияПараметровРаботыПрограммы(Неопределен, Параметры) Экспорт
	
	Если НЕ ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);
	
	Попытка
		ПользователиСлужебныйКлиент.ПроверитьАвторизациюПользователя(Параметры);
	Исключение
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
		Если НЕ ПараметрыКлиента.ДоступноИспользованиеРазделенныхДанных
		   И ПараметрыКлиента.Свойство("НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы") Тогда
			
			// Обновление неразделенных данных ИБ в модели сервиса.
			Состояние(НСтр("ru = 'Пожалуйста, подождите, выполняется обновление информационной базы...'"));
			ОбновлениеИнформационнойБазыВызовСервера.ВыполнитьОбновлениеИнформационнойБазы(, Истина);
			Состояние(НСтр("ru = 'Обновление информационной базы выполнено успешно.'"));
		КонецЕсли;
		
		ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
		Если Не ПараметрыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
			Возврат;
		КонецЕсли;
		
		УстановитьРасширенныйЗаголовокПриложения(Истина); // Для вспомогательных окон.
	Исключение
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПередНачаломРаботыСистемыПослеОбработкиВходаСРазблокирующимКодом", ЭтотОбъект, Параметры));
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		
		Попытка
			МодульСоединенияИБКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СоединенияИБКлиент");
			МодульСоединенияИБКлиент.ПередНачаломРаботыСистемы(Параметры);
		Исключение
			ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
		КонецПопытки;
		Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыПослеОбработкиВходаСРазблокирующимКодом(Неопределен, Параметры) Экспорт
	
	Если НЕ ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("НомерСледующегоОбработчика", 1);
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПередНачаломРаботыСистемыВОбработчикахСлужебногоСобытия", ЭтотОбъект, Параметры));
	
	Попытка
		ОбновлениеИнформационнойБазыКлиент.ОбновитьИнформационнуюБазу(Параметры);
	Исключение
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыВОбработчикахСлужебногоСобытия(Неопределен, Параметры) Экспорт
	
	Если НЕ ПродолжитьДействияПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикиСобытия = ОбщегоНазначенияКлиент.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПередНачаломРаботыСистемы");
	
	КоличествоОбработчиков = ОбработчикиСобытия.Количество();
	НачальныйНомер = Параметры.НомерСледующегоОбработчика;
	
	Для Номер = НачальныйНомер По КоличествоОбработчиков Цикл
		Параметры.ИнтерактивнаяОбработка = Неопределено;
		Параметры.НомерСледующегоОбработчика = Номер + 1;
		Обработчик = ОбработчикиСобытия.Получить(Номер - 1);
		
		Попытка
			Обработчик.Модуль.ПередНачаломРаботыСистемы(Параметры);
		Исключение
			ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск");
		КонецПопытки;
		Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);
	Параметры.ИнтерактивнаяОбработка = Неопределено;
		
	Попытка
		ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы(Параметры);
	Исключение
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск");
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Завершение процедуры ПередНачаломРаботыСистемы.
Процедура ДействияПередНачаломРаботыСистемыОбработкаЗавершения(Неопределен, Параметры) Экспорт
	
	ПараметрыПриЗапускеИЗавершенииПрограммы.Удалить("ПолученныеПараметрыКлиента");
	
	Если Параметры.ОповещениеЗавершения <> Неопределено Тогда
		Результат = Новый Структура;
		Результат.Вставить("Отказ", Параметры.Отказ);
		Результат.Вставить("Перезапустить", Параметры.Перезапустить);
		Результат.Вставить("ДополнительныеПараметрыКоманднойСтроки", Параметры.ДополнительныеПараметрыКоманднойСтроки);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершения, Результат);
		Возврат;
	КонецЕсли;
	
	Если Параметры.Отказ Тогда
		Если Параметры.Перезапустить <> Истина Тогда
			ПрекратитьРаботуСистемы();
		ИначеЕсли ЗначениеЗаполнено(Параметры.ДополнительныеПараметрыКоманднойСтроки) Тогда
			ПрекратитьРаботуСистемы(Параметры.Перезапустить, Параметры.ДополнительныеПараметрыКоманднойСтроки);
		Иначе
			ПрекратитьРаботуСистемы(Параметры.Перезапустить);
		КонецЕсли;
		
	ИначеЕсли НЕ Параметры.НепрерывноеВыполнение Тогда
		Если ПараметрыПриЗапускеИЗавершенииПрограммы.Свойство("ПараметрыОбработки") Тогда
			ПараметрыПриЗапускеИЗавершенииПрограммы.Удалить("ПараметрыОбработки");
		КонецЕсли;
		ПриНачалеРаботыСистемы(, Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПриНачалеРаботыСистемы

// Только для внутреннего использования. Продолжение процедуры ПриНачалеРаботыСистемы.
Процедура ДействияПриНачалеРаботыСистемыВОбработчикахСлужебногоСобытия(Неопределен, Параметры) Экспорт

	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
		Возврат;
	КонецЕсли;
	
	ОбработчикиСобытия = ОбщегоНазначенияКлиент.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриНачалеРаботыСистемы");
	
	КоличествоОбработчиков = ОбработчикиСобытия.Количество();
	НачальныйНомер = Параметры.НомерСледующегоОбработчика;
	
	Для Номер = НачальныйНомер По КоличествоОбработчиков Цикл
		Параметры.НомерСледующегоОбработчика = Номер + 1;
		Обработчик = ОбработчикиСобытия.Получить(Номер - 1);
		
		Попытка
			Обработчик.Модуль.ПриНачалеРаботыСистемы(Параметры);
		Исключение
			ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск");
		КонецПопытки;
		Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Подготовка перехода к следующей процедуре.
	Параметры.Вставить("НомерСледующегоОбработчика", 1);
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПослеНачалаРаботыСистемыВОбработчикахСлужебногоСобытия", ЭтотОбъект, Параметры));
	
	Попытка
		ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы(Параметры);
	Исключение
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск");
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПриНачалеРаботыСистемы.
Процедура ДействияПослеНачалаРаботыСистемыВОбработчикахСлужебногоСобытия(Неопределен, Параметры) Экспорт

	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
		Возврат;
	КонецЕсли;
	
	ОбработчикиСобытия = ОбщегоНазначенияКлиент.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПослеНачалаРаботыСистемы");
	
	КоличествоОбработчиков = ОбработчикиСобытия.Количество();
	НачальныйНомер = Параметры.НомерСледующегоОбработчика;
	
	Для Номер = НачальныйНомер По КоличествоОбработчиков Цикл
		Параметры.НомерСледующегоОбработчика = Номер + 1;
		Обработчик = ОбработчикиСобытия.Получить(Номер - 1);
		
		Попытка
			Обработчик.Модуль.ПослеНачалаРаботыСистемы();
		Исключение
			ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск");
		КонецПопытки;
		Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);
	Попытка
		ОбщегоНазначенияКлиентПереопределяемый.ПослеНачалаРаботыСистемы();
	Исключение
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск");
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Завершение процедуры ПриНачалеРаботыСистемы.
Процедура ДействияПриНачалеРаботыСистемыОбработкаЗавершения(Неопределен, Параметры) Экспорт
	
	Если НЕ Параметры.Отказ Тогда
		Если ПараметрыПриЗапускеИЗавершенииПрограммы.Свойство("ПропуститьОчисткуСкрытияРабочегоСтола") Тогда
			ПараметрыПриЗапускеИЗавершенииПрограммы.Удалить("ПропуститьОчисткуСкрытияРабочегоСтола");
		КонецЕсли;
		СкрытьРабочийСтолПриНачалеРаботыСистемы(Ложь);
	КонецЕсли;
	
	Если Параметры.ОповещениеЗавершения <> Неопределено Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("Отказ", Параметры.Отказ);
		Результат.Вставить("Перезапустить", Параметры.Перезапустить);
		Результат.Вставить("ДополнительныеПараметрыКоманднойСтроки", Параметры.ДополнительныеПараметрыКоманднойСтроки);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершения, Результат);
		Возврат;
		
	Иначе
		Если Параметры.Отказ Тогда
			Если Параметры.Перезапустить <> Истина Тогда
				ПрекратитьРаботуСистемы();
				
			ИначеЕсли ЗначениеЗаполнено(Параметры.ДополнительныеПараметрыКоманднойСтроки) Тогда
				ПрекратитьРаботуСистемы(Параметры.Перезапустить, Параметры.ДополнительныеПараметрыКоманднойСтроки);
			Иначе
				ПрекратитьРаботуСистемы(Параметры.Перезапустить);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработать параметры запуска программы.
//
// Возвращаемое значение:
//   Булево   – Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска()

	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска, ";");
	ПервыйПараметр = Врег(ПараметрыЗапуска[0]);
	
	Отказ = Ложь;
	ОбработчикиСобытия = ОбщегоНазначенияКлиент.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриОбработкеПараметровЗапуска");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриОбработкеПараметровЗапуска(ПервыйПараметр, ПараметрыЗапуска, Отказ);
	КонецЦикла;
	
	Отказ = ОбщегоНазначенияКлиентПереопределяемый.ОбработатьПараметрыЗапуска(
		ПервыйПараметр, ПараметрыЗапуска) Или Отказ;
	
	Возврат НЕ Отказ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПередЗавершениемРаботыСистемы

// Только для внутреннего использования. Продолжение процедуры ПередЗавершениемРаботыСистемы.
Процедура ДействияПередЗавершениемРаботыСистемыВОбработчикахСлужебногоСобытия(Неопределен, Параметры) Экспорт

	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
		Возврат;
	КонецЕсли;
	
	ОбработчикиСобытия = ОбщегоНазначенияКлиент.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПередЗавершениемРаботыСистемы");
	
	КоличествоОбработчиков = ОбработчикиСобытия.Количество();
	НачальныйНомер = Параметры.НомерСледующегоОбработчика;
	
	Для Номер = НачальныйНомер По КоличествоОбработчиков Цикл
		Параметры.НомерСледующегоОбработчика = Номер + 1;
		Обработчик = ОбработчикиСобытия.Получить(Номер - 1);
		Попытка
			Обработчик.Модуль.ПередЗавершениемРаботыСистемы(Параметры);
		Исключение
			ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Завершение");
		КонецПопытки;
		Если ИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Параметры.Вставить("ОбработкаПродолжения", Новый ОписаниеОповещения(
		"ДействияПередЗавершениемРаботыСистемыПослеОбработчиковСлужебногоСобытия", ЭтотОбъект, Параметры));
	
	Попытка
		ОбщегоНазначенияКлиентПереопределяемый.ПередЗавершениемРаботыСистемы(Параметры);
	Исключение
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Завершение");
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПередЗавершениемРаботыСистемы.
Процедура ДействияПередЗавершениемРаботыСистемыПослеОбработчиковСлужебногоСобытия(Неопределен, Параметры) Экспорт
	
	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
		Возврат;
	КонецЕсли;
	
	// Если перед завершение работы есть незаписанные сообщения для журнала регистрации,
	// накопленные в переменной, то их необходимо записать
	Если ТипЗнч(СообщенияДляЖурналаРегистрации) = Тип("СписокЗначений") И СообщенияДляЖурналаРегистрации.Количество() <> 0 Тогда
		ЖурналРегистрацииВызовСервера.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	КонецЕсли;
	
	Параметры.Вставить("ОбработкаПродолжения", Параметры.ОбработкаЗавершения);
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ДоступноИспользованиеРазделенныхДанных Тогда
		Попытка
			ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Параметры);
		Исключение
			ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Завершение");
		КонецПопытки;
		Если ИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы(Параметры) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования. Завершение процедуры ПередЗавершениемРаботыСистемы.
Процедура ДействияПередЗавершениемРаботыСистемыОбработкаЗавершения(Неопределен, Параметры) Экспорт
	
	Если Параметры.ОповещениеЗавершения <> Неопределено Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("Отказ", Параметры.Отказ);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеЗавершения, Результат);
		
	ИначеЕсли НЕ Параметры.Отказ И НЕ Параметры.НепрерывноеВыполнение Тогда
		
		ПараметрыПриЗапускеИЗавершенииПрограммы.Вставить("ДействияПередЗавершениемРаботыСистемыВыполнены");
		ЗавершитьРаботуСистемы();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет минимально допустимую версию платформы для запуска.
// Если версия платформы более поздняя, чем РекомендуемаяВерсияПлатформы, то пользователю будет 
// показано оповещение. Работа программы будет прекращена, если ЗавершитьРаботу = Истина.
//
// Возвращаемое значение
//  Булево - если версия актуальна, тогда Истина, иначе - Ложь.
//
Процедура ПроверитьВерсиюПлатформыПриЗапуске(Параметры) Экспорт
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если НЕ ПараметрыКлиента.Свойство("ПоказатьНерекомендуемуюВерсиюПлатформы") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
		"ИнтерактивнаяОбработкаПроверкиВерсииПлатформыПриЗапуске", ЭтотОбъект, Параметры);
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПроверитьВерсиюПлатформыПриЗапуске.
Процедура ИнтерактивнаяОбработкаПроверкиВерсииПлатформыПриЗапуске(Параметры, Неопределен) Экспорт
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если ПараметрыКлиента.РаботаВПрограммеЗапрещена Тогда
		Если ПараметрыКлиента.ЕстьДоступДляОбновленияВерсииПлатформы Тогда
			ТекстСообщения = НСтр("ru = 'Вход в программу невозможен.
				|Необходимо предварительно обновить версию платформы 1С:Предприятие.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Вход в программу невозможен.
				|Необходимо обратиться к администратору для обновления версии платформы 1С:Предприятие.'");
		КонецЕсли;
	Иначе
		Если ПараметрыКлиента.ЕстьДоступДляОбновленияВерсииПлатформы Тогда
			ТекстСообщения = 
				НСтр("ru='Рекомендуется завершить работу программы и обновить версию платформы 1С:Предприятия.
			         |В противном случае некоторые возможности программы будут недоступны или будут работать некорректно.'");
		Иначе
			ТекстСообщения = 
				НСтр("ru='Рекомендуется завершить работу программы и обратиться к администратору для обновления версии платформы 1С:Предприятия.
			         |В противном случае некоторые возможности программы будут недоступны или будут работать некорректно.'");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстСообщения", ТекстСообщения);
	ПараметрыФормы.Вставить("ЗавершитьРаботу", ПараметрыКлиента.РаботаВПрограммеЗапрещена);
	ПараметрыФормы.Вставить("РекомендуемаяВерсияПлатформы", ПараметрыКлиента.МинимальноНеобходимаяВерсияПлатформы);
	ПараметрыФормы.Вставить("ОткрытаПоСценарию", Истина);
	ПараметрыФормы.Вставить("ПропуститьЗавершениеРаботы", Истина);
	
	Форма = ОткрытьФорму("Обработка.НерекомендуемаяВерсияПлатформы.Форма.НерекомендуемаяВерсияПлатформы", ПараметрыФормы,
		, , , , Новый ОписаниеОповещения("ПослеЗакрытияФормыНерекомендуемойВерсииПлатформы", ЭтотОбъект, Параметры));
	
	Если Форма = Неопределено Тогда
		ПослеЗакрытияФормыНерекомендуемойВерсииПлатформы("Продолжить", Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования. Продолжение процедуры ПроверитьВерсиюПлатформыПриЗапуске.
Процедура ПослеЗакрытияФормыНерекомендуемойВерсииПлатформы(Результат, Параметры) Экспорт
	
	Если Результат <> "Продолжить" Тогда
		Параметры.Отказ = Истина;
	Иначе
		Параметры.ПолученныеПараметрыКлиента.Вставить("ПоказатьНерекомендуемуюВерсиюПлатформы");
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции для запуска и завершения работы программы

// Вызывается при необходимости открыть форму списка активных пользователей,
// которые в данный момент времени работают с системой.
//
Процедура ОткрытьСписокАктивныхПользователей(ПараметрыФормы = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		
		ИмяФормы = "";
		МодульСоединенияИБКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СоединенияИБКлиент");
		МодульСоединенияИБКлиент.ПриОпределенииФормыАктивныхПользователей(ИмяФормы);
		ОткрытьФорму(ИмяФормы, ПараметрыФормы);
		
	Иначе
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Для того чтобы открыть список активных пользователей, перейдите в меню
				       |Все функции - Стандартные - Активные пользователи.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает флаг скрытия рабочего стола при начале работы системы,
// который блокирует создание форм на рабочем столе.
// Снимает флаг скрытия и обновляет рабочий стол, когда это станет возможным,
// если скрытие выполнялось.
//
// Параметры:
//  Скрыть - Булево. Если передать Ложь, тогда при условии скрытия рабочего
//           стола он будет вновь показан.
//
//  УжеВыполненоНаСервере - Булево. Если передать Истина, тогда уже был вызван
//           метод в модуле СтандартныеПодсистемыВызовСервера, и его не требуется
//           вызвать, а требуется только установить на клиенте, что рабочий стол
//           был скрыт и позднее его требуется показать.
//
Процедура СкрытьРабочийСтолПриНачалеРаботыСистемы(Скрыть = Истина, УжеВыполненоНаСервере = Ложь) Экспорт
	
	Если Скрыть Тогда
		Если НЕ ПараметрыПриЗапускеИЗавершенииПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
			ПараметрыПриЗапускеИЗавершенииПрограммы.Вставить("СкрытьРабочийСтолПриНачалеРаботыСистемы");
			Если НЕ УжеВыполненоНаСервере Тогда
				СтандартныеПодсистемыВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ПараметрыПриЗапускеИЗавершенииПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
			ПараметрыПриЗапускеИЗавершенииПрограммы.Удалить("СкрытьРабочийСтолПриНачалеРаботыСистемы");
			Если НЕ УжеВыполненоНаСервере Тогда
				СтандартныеПодсистемыВызовСервера.СкрытьРабочийСтолПриНачалеРаботыСистемы(Ложь);
			КонецЕсли;
			ТекущееАктивноеОкно = АктивноеОкно();
			ОбновитьИнтерфейс();
			Если ТекущееАктивноеОкно <> Неопределено Тогда
				ТекущееАктивноеОкно.Активизировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ВыполнитьОповещениеСПустымРезультатом(ОповещениеСРезультатом) Экспорт
	
	ВыполнитьОбработкуОповещения(ОповещениеСРезультатом);
	
КонецПроцедуры

// Только для внутреннего использования см. процедуру ЗагрузитьОбновитьПараметрыРаботыПрограммы.
Процедура ОбработкаОшибкиУстановкиМонопольногоРежимаПриОбновленииПараметровРаботыПрограммы(
		Параметры, Неопределен) Экспорт
	
	ОбработкаЗакрытияФормы = Новый ОписаниеОповещения(
		"ПослеЗакрытияФормыБлокировкиИнформационнойБазы", ЭтотОбъект, Параметры);
	
	Параметры.МодульСоединенияИБКлиент.ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(
		ОбработкаЗакрытияФормы);
	
КонецПроцедуры

// Только для внутреннего использования см. процедуру ЗагрузитьОбновитьПараметрыРаботыПрограммы.
Процедура ПослеЗакрытияФормыБлокировкиИнформационнойБазы(Отказ, Параметры) Экспорт
	
	Если Отказ Тогда
		Параметры.Отказ = Истина;
		ОбновлениеИнформационнойБазыВызовСервера.СнятьБлокировкуФайловойБазы();
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
		Возврат;
	КонецЕсли;
	
	ТекстСостояния = НСтр("ru = 'Выполняется подготовка к запуску программы. Пожалуйста, подождите...'");
	Состояние(ТекстСостояния);
	
	Попытка 
		ОшибкаУстановкиМонопольногоРежима = "";
		СтандартныеПодсистемыВызовСервера.ЗагрузитьОбновитьПараметрыРаботыПрограммы(ОшибкаУстановкиМонопольногоРежима);
		Состояние();
		
		Если ЗначениеЗаполнено(ОшибкаУстановкиМонопольногоРежима) Тогда
			ОбработкаЗакрытияФормы = Новый ОписаниеОповещения(
				"ПослеЗакрытияФормыБлокировкиИнформационнойБазы", ЭтотОбъект, Параметры);
			
			Параметры.МодульСоединенияИБКлиент.ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(
				ОбработкаЗакрытияФормы);
			Возврат;
		КонецЕсли;
		ОбновлениеИнформационнойБазыВызовСервера.СнятьБлокировкуФайловойБазы();
		Параметры.ПолученныеПараметрыКлиента.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы");
	Исключение
		Параметры.ПолученныеПараметрыКлиента.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы");
		Состояние();
		ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке(), "Запуск", Истина);
	КонецПопытки;
	Если ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура НачатьИнтерактивнуюОбработкуПередЗавершениемРаботыСистемы() Экспорт
	
	Если НЕ ПараметрыПриЗапускеИЗавершенииПрограммы.Свойство("ПараметрыОбработкиЗавершения") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПараметрыПриЗапускеИЗавершенииПрограммы.ПараметрыОбработкиЗавершения;
	ПараметрыПриЗапускеИЗавершенииПрограммы.Удалить("ПараметрыОбработкиЗавершения");
	
	ВыполнитьОбработкуОповещения(Параметры.ИнтерактивнаяОбработка, Параметры);
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ПослеЗакрытияФормыПредупрежденийПриЗавершенииРаботы(Результат, ДополнительныеПараметры) Экспорт
	
	Параметры = ДополнительныеПараметры.Параметры;
	
	Если ДополнительныеПараметры.ВариантФормы = "Вопрос" Тогда
		
		Если Результат <> Неопределено И Результат.БольшеНеЗадаватьЭтотВопрос Тогда
			СтандартныеПодсистемыВызовСервера.СохранитьНастройкуПодтвержденияПриЗавершенииПрограммы(
				НЕ Результат.БольшеНеЗадаватьЭтотВопрос);
		КонецЕсли;
		
		Если Результат = Неопределено Или Результат.Значение <> КодВозвратаДиалога.Да Тогда
			Параметры.Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеПараметры.ВариантФормы = "СтандартнаяФорма" Тогда
	
		Если Результат = Истина Или Результат = Неопределено Тогда
			Параметры.Отказ = Истина;
		КонецЕсли;
		
	Иначе // ПрикладнаяФорма
		Если Результат = Истина Или Результат = Неопределено Или Результат = КодВозвратаДиалога.Нет Тогда
			Параметры.Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Приводит разнотипные параметры с набором ссылок к массиву
Функция НаборСсылок(Знач НаборСсылок)
	ТипПараметра = ТипЗнч(НаборСсылок);
	
	Если ТипЗнч(НаборСсылок) = Тип("ТаблицаФормы") Тогда
		Ссылки = Новый Массив;
		Для Каждого Элемент Из НаборСсылок.ВыделенныеСтроки Цикл
			ДанныеСтроки = НаборСсылок.ДанныеСтроки(Элемент);
			Если ДанныеСтроки <> Неопределено Тогда
				Ссылки.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипПараметра = Тип("СписокЗначений") Тогда
		Ссылки = Новый Массив;
		Для Каждого Элемент Из НаборСсылок Цикл
			Ссылки.Добавить(Элемент.Значение);
		КонецЦикла;
		
	Иначе
		Ссылки = НаборСсылок;
		
	КонецЕсли;
	
	Возврат Ссылки;
КонецФункции

// Возвращает строковое представление значения типа КодВозвратаДиалога
Функция КодВозвратаДиалогаВСтроку(Значение)
	
	Результат = "КодВозвратаДиалога." + Строка(Значение);
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Установить разделения сеанса при запуске программы.
Процедура УстановитьРазделениеСеанса()

	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапуска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска, ";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	Если ЗначениеПараметраЗапуска <> ВРег("ВойтиВОбластьДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗапуска.Количество() < 2 Тогда
		ВызватьИсключение
			НСтр("ru = 'При указании параметра запуска ВойтиВОбластьДанных,
			           |дополнительным параметром необходимо указать значение разделителя.'");
	КонецЕсли;
	
	Попытка
		ЗначениеРазделителя = Число(ПараметрыЗапуска[1]);
	Исключение
		ВызватьИсключение
			НСтр("ru = 'Значением разделителя в параметре ВойтиВОбластьДанных должно быть число.'");
	КонецПопытки;
	
	ОбщегоНазначенияВызовСервера.УстановитьРазделениеСеанса(Истина, ЗначениеРазделителя);
	
КонецПроцедуры 

// В случае отказа вызывает обработку завершения,
// если добавлен новый полученный параметр клиента,
// обновляет параметры работы клиента.
//
Функция ПродолжитьДействияПередНачаломРаботыСистемы(Параметры)
	
	Если Параметры.Отказ Тогда
		ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
		Возврат Ложь;
	КонецЕсли;
	
	ОбновитьПараметрыРаботыКлиента(Параметры);
	
	Возврат Истина;
	
КонецФункции

Процедура ОбновитьПараметрыРаботыКлиента(Параметры, ПервыйВызов = Ложь)
	
	Если ПервыйВызов Тогда
		Если ТипЗнч(ПараметрыПриЗапускеИЗавершенииПрограммы) <> Тип("Структура") Тогда
			ПараметрыПриЗапускеИЗавершенииПрограммы = Новый Структура;
		КонецЕсли;
		
	ИначеЕсли Параметры.КоличествоПолученныхПараметровКлиента =
	          Параметры.ПолученныеПараметрыКлиента.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("КоличествоПолученныхПараметровКлиента",
		Параметры.ПолученныеПараметрыКлиента.Количество());
	
	
	Если Параметры.НепрерывноеВыполнение <> Истина Тогда
		ПараметрыПриЗапускеИЗавершенииПрограммы.Вставить(
			"ПропуститьОчисткуСкрытияРабочегоСтола");
	КонецЕсли;
	
	ПараметрыПриЗапускеИЗавершенииПрограммы.Вставить(
		"ПолученныеПараметрыКлиента", Параметры.ПолученныеПараметрыКлиента);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Функция ВыполняетсяИнтерактивнаяОбработкаПередНачаломРаботыСистемы()
	
	Если НЕ ПараметрыПриЗапускеИЗавершенииПрограммы.Свойство("ПараметрыОбработки") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Параметры = ПараметрыПриЗапускеИЗавершенииПрограммы.ПараметрыОбработки;
	
	Если Параметры.ИнтерактивнаяОбработка <> Неопределено Тогда
		Параметры.НепрерывноеВыполнение = Ложь;
		ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка = Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
		ПараметрыПриЗапускеИЗавершенииПрограммы.Удалить("ПараметрыОбработки");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИнтерактивнаяОбработкаПередНачаломРаботыСистемы(Параметры)
	
	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ОбновитьПараметрыРаботыКлиента(Параметры);
	
	Если НЕ Параметры.НепрерывноеВыполнение Тогда
		ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка = Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
		
	ИначеЕсли Параметры.ОповещениеЗавершения = Неопределено Тогда
		// Выполнен вызов из обработчика события ПередНачаломРаботыСистемы для подготовки
		// выполнения интерактивной обработки в обработчике события ПриНачалеРаботыСистемы.
		
		ПараметрыПриЗапускеИЗавершенииПрограммы.Вставить("ПараметрыОбработки", Параметры);
		СкрытьРабочийСтолПриНачалеРаботыСистемы();
	Иначе
		// Выполнен вызов из процедуры ПередНачаломРаботыСистемы для немедленного
		// начала интерактивной обработки, т.к. процедура была вызвана программно, а не из
		// обработчика события ПередНачаломРаботыСистемы.
		Если ПараметрыПриЗапускеИЗавершенииПрограммы.Свойство("ПараметрыОбработки") Тогда
			ПараметрыПриЗапускеИЗавершенииПрограммы.Удалить("ПараметрыОбработки");
		КонецЕсли;
		
		Параметры.НепрерывноеВыполнение = Ложь;
		ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка = Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ИнтерактивнаяОбработкаПриНачалеРаботыСистемы(Параметры)
	
	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;
	
	Параметры.НепрерывноеВыполнение = Ложь;
	Параметры.ИнтерактивнаяОбработка = Неопределено;
	
	ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
	
	Возврат Истина;
	
КонецФункции

Функция ИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы(Параметры)
	
	Если Параметры.ИнтерактивнаяОбработка = Неопределено Тогда
		Если Параметры.Отказ Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаЗавершения);
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Параметры.НепрерывноеВыполнение Тогда
		ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка = Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
		
	ИначеЕсли Параметры.ОповещениеЗавершения = Неопределено Тогда
		// Выполнен вызов из обработчика события ПередЗавершениемРаботыСистемы для подготовки
		// выполнения интерактивной обработки через обработчик ожидания.
		
		ПараметрыПриЗапускеИЗавершенииПрограммы.Вставить("ПараметрыОбработкиЗавершения", Параметры);
		Параметры.НепрерывноеВыполнение = Ложь;
		ПодключитьОбработчикОжидания(
			"ОбработчикОжиданияИнтерактивнаяОбработкаПередЗавершениемРаботыСистемы", 0.1, Истина);
	Иначе
		// Выполнен вызов из процедуры ПередЗавершениемРаботыСистемы для немедленного
		// начала интерактивной обработки, т.к. процедура была вызвана программно, а не из
		// обработчика события ПередЗавершениемРаботыСистемы.
		
		Параметры.НепрерывноеВыполнение = Ложь;
		ИнтерактивнаяОбработка = Параметры.ИнтерактивнаяОбработка;
		Параметры.ИнтерактивнаяОбработка = Неопределено;
		ВыполнитьОбработкуОповещения(ИнтерактивнаяОбработка, Параметры);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗагрузитьОбновитьПараметрыРаботыПрограммы(Параметры)
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	МодульСоединенияИБКлиент = Неопределено;
	
	Если ПараметрыКлиента.ИнформационнаяБазаФайловая
	   И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		
		МодульСоединенияИБКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СоединенияИБКлиент");
	КонецЕсли;
	
	ТекстСостояния = НСтр("ru = 'Выполняется подготовка к запуску программы. Пожалуйста, подождите...'");
	Состояние(ТекстСостояния);
	
	ОшибкаУстановкиМонопольногоРежима = "";
	Попытка
		СтандартныеПодсистемыВызовСервера.ЗагрузитьОбновитьПараметрыРаботыПрограммы(
			ОшибкаУстановкиМонопольногоРежима);
		
		Состояние();
	Исключение
		Состояние();
		ВызватьИсключение;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ОшибкаУстановкиМонопольногоРежима) Тогда
		Параметры.ПолученныеПараметрыКлиента.Вставить(
			"НеобходимоОбновлениеПараметровРаботыПрограммы");
		Возврат;
	КонецЕсли;
	
	Если МодульСоединенияИБКлиент = Неопределено Тогда
		Параметры.Отказ = Истина;
		
		ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"ПоказатьПредупреждениеИПродолжить",
			ЭтотОбъект,
			ОшибкаУстановкиМонопольногоРежима);
		
		Параметры.ИнтерактивнаяОбработка = ИнтерактивнаяОбработка;
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("МодульСоединенияИБКлиент", МодульСоединенияИБКлиент);
	Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
		"ОбработкаОшибкиУстановкиМонопольногоРежимаПриОбновленииПараметровРаботыПрограммы", ЭтотОбъект);
	
КонецПроцедуры

// Выводит форму сообщений пользователю при закрытии программы, либо выводит сообщение.
Процедура ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Параметры)
	
	// В веб-клиенте не выводится список предупреждений.
#Если ВебКлиент Тогда
	Возврат;
#КонецЕсли
	
	Если ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	Предупреждения = Новый Массив;
	
	ОбработчикиСобытия = ОбщегоНазначенияКлиент.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииСпискаПредупрежденийЗавершенияРаботы");
	
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриПолученииСпискаПредупрежденийЗавершенияРаботы(Предупреждения);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Параметры", Параметры);
	ДополнительныеПараметры.Вставить("ВариантФормы", "Вопрос");
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ПослеЗакрытияФормыПредупрежденийПриЗавершенииРаботы",
		ЭтотОбъект, ДополнительныеПараметры);
	
	Если Предупреждения.Количество() = 0 Тогда
		
		БольшеНеЗадаватьЭтотВопрос =
			Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента(
				).ЗапрашиватьПодтверждениеПриЗавершенииПрограммы;
		
		Если БольшеНеЗадаватьЭтотВопрос Тогда
			Возврат;
		КонецЕсли;
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"ВопросПользователюПередЗавершениемРаботыСистемы", ЭтотОбъект, ОбработкаОтвета);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Предупреждения", Предупреждения);
		
		ИмяФормы = "ОбщаяФорма.ПредупрежденияПриЗавершенииРаботы";
		
		Если Предупреждения.Количество() = 1 Тогда
			ТекстФлажка = "";
			Если Предупреждения[0].Свойство("ТекстФлажка", ТекстФлажка) Тогда
				Если Не ПустаяСтрока(ТекстФлажка) Тогда 
					ДополнительныеПараметры.Вставить("ВариантФормы", "СтандартнаяФорма");
					ПараметрыОткрытияФормы = Новый Структура;
					ПараметрыОткрытияФормы.Вставить("ИмяФормы", ИмяФормы);
					ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", ПараметрыФормы);
					ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета", ОбработкаОтвета);
					Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
						"ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
				КонецЕсли;
			Иначе
				ДополнительныеПараметры.Вставить("ВариантФормы", "ПрикладнаяФорма");
				ОткрытьПрикладнуюФормуПредупреждения(Параметры, ОбработкаОтвета, Предупреждения[0], ИмяФормы, ПараметрыФормы);
			КонецЕсли;
		Иначе
			ДополнительныеПараметры.Вставить("ВариантФормы", "СтандартнаяФорма");
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("ИмяФормы", ИмяФормы);
			ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", ПараметрыФормы);
			ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета", ОбработкаОтвета);
			Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
				"ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОткрытьФормуПредупрежденийПриЗавершенииРаботы.
Процедура ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы(Параметры, ПараметрыОткрытияФормы) Экспорт
	
	ОткрытьФорму(
		ПараметрыОткрытияФормы.ИмяФормы,
		ПараметрыОткрытияФормы.ПараметрыФормы, , , , ,
		ПараметрыОткрытияФормы.ОбработкаОтвета);
	
КонецПроцедуры

// Продолжение процедуры ПоказатьПредупреждениеИПродолжить.
Процедура ПоказатьПредупреждениеИПродолжитьЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Значение = "Завершить" Тогда
			Параметры.Отказ = Истина;
		ИначеЕсли Результат.Значение = "Перезапустить" Тогда
			Параметры.Отказ = Истина;
			Параметры.Перезапустить = Истина;
		КонецЕсли;
	КонецЕсли;
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
		
КонецПроцедуры

// Показывает пользователю диалог подтверждения выхода из программы.
Процедура ВопросПользователюПередЗавершениемРаботыСистемы(Параметры, ОбработкаОтвета) Экспорт
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("КодВозвратаДиалога.Да",  НСтр("ru = 'Завершить'"));
	Кнопки.Добавить("КодВозвратаДиалога.Нет", НСтр("ru = 'Отмена'"));
	
	ПараметрыВопроса = ПараметрыВопросаПользователю();
	ПараметрыВопроса.БлокироватьВесьИнтерфейс = Истина;
	ПараметрыВопроса.КнопкаПоУмолчанию = "КодВозвратаДиалога.Да";
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Завершение работы'");
	ПараметрыВопроса.БольшеНеЗадаватьЭтотВопрос = Ложь;
	
	ПоказатьВопросПользователю(ОбработкаОтвета, НСтр("ru = 'Завершить работу с программой?'"), Кнопки, ПараметрыВопроса);
	
КонецПроцедуры

// Формирует отображение одного вопроса.
//
//	Если в ПредупреждениеПользователю есть свойство "ТекстГиперссылки", то открывается "ФормаИндивидуальногоОткрытия" из Структуры вопроса.
//	Если в ПредупреждениеПользователю есть свойство "ТекстФлажка", то открывается форма "ОбщаяФорма.ВопросПередЗавершениемРаботыСистемы".
//
// Параметры:
//  Параметры - сквозные параметры цепочки вызовов процедуры ПередЗавершениемРаботыСистемы.
//  ОбработкаОтвета - ОписаниеОповещения для продолжения после получения ответа пользователя.
//  ПредупреждениеПользователю - Структура - структура передаваемого предупреждения.
//  ИмяФормы - Строка - имя общей формы с вопросами.
//  ПараметрыФормы - Структура - параметры для формы с вопросами.
//
Процедура ОткрытьПрикладнуюФормуПредупреждения(Параметры, ОбработкаОтвета, ПредупреждениеПользователю, ИмяФормы, ПараметрыФормы)
	
	ТекстГиперссылки = "";
	Если НЕ ПредупреждениеПользователю.Свойство("ТекстГиперссылки", ТекстГиперссылки) Тогда
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ТекстГиперссылки) Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеПриНажатииГиперссылки = Неопределено;
	Если НЕ ПредупреждениеПользователю.Свойство("ДействиеПриНажатииГиперссылки", ДействиеПриНажатииГиперссылки) Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеГиперссылка = ПредупреждениеПользователю.ДействиеПриНажатииГиперссылки;
	Форма = Неопределено;
	
	Если ДействиеГиперссылка.Свойство("ПрикладнаяФормаПредупреждения", Форма) Тогда
		ПараметрыФормы = Неопределено;
		Если ДействиеГиперссылка.Свойство("ПараметрыПрикладнойФормыПредупреждения", ПараметрыФормы) Тогда
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда 
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			ИначеЕсли ПараметрыФормы = Неопределено Тогда 
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			КонецЕсли;
			
			ПараметрыФормы.Вставить("ЗаголовокКнопкиДа",  НСтр("ru = 'Завершить'"));
			ПараметрыФормы.Вставить("ЗаголовокКнопкиНет", НСтр("ru = 'Отмена'"));
			
		КонецЕсли;
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИмяФормы", Форма);
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", ПараметрыФормы);
		ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета", ОбработкаОтвета);
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
		
	ИначеЕсли ДействиеГиперссылка.Свойство("Форма", Форма) Тогда 
		ПараметрыФормы = Неопределено;
		Если ДействиеГиперссылка.Свойство("ПараметрыФормы", ПараметрыФормы) Тогда
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда 
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			ИначеЕсли ПараметрыФормы = Неопределено Тогда 
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
			КонецЕсли;
		КонецЕсли;
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("ИмяФормы", Форма);
		ПараметрыОткрытияФормы.Вставить("ПараметрыФормы", ПараметрыФормы);
		ПараметрыОткрытияФормы.Вставить("ОбработкаОтвета", ОбработкаОтвета);
		Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
			"ИнтерактивнаяОбработкаПредупрежденийПриЗавершенииРаботы", ЭтотОбъект, ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибкуПриЗапускеИлиЗавершении(Параметры, ИнформацияОбОшибке, Событие, ПрекратитьРаботу = Ложь)
	
	Если Событие = "Запуск" Тогда
//[-> leo вызов ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() приводит в процедуры проверки версии ИБ при этом возможны другие исключения и информация о текущей ошибке пропадает. Слава разарботчикам 1СЫ и их тупым потугам.
//[-		ИмяСобытия = НСтр("ru = 'Запуск программы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
//[<- leo вызов ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() приводит в процедуры проверки версии ИБ при этом возможны другие исключения и информация о текущей ошибке пропадает. Слава разарботчикам 1СЫ и их тупым потугам.
//[+> leo вызов ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() приводит в процедуры проверки версии ИБ при этом возможны другие исключения и информация о текущей ошибке пропадает. Слава разарботчикам 1СЫ и их тупым потугам.
		ИмяСобытия = НСтр("ru = 'Запуск программы'");
//[<+ leo вызов ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() приводит в процедуры проверки версии ИБ при этом возможны другие исключения и информация о текущей ошибке пропадает. Слава разарботчикам 1СЫ и их тупым потугам.
		
		Если ПрекратитьРаботу Тогда
			Параметры.Отказ = Истина;
			Параметры.ОбработкаПродолжения = Параметры.ОбработкаЗавершения;
			
			НачалоОписанияОшибки =
				НСтр("ru = 'Возникла исключительная ситуация при запуске программы. Запуск программы аварийно завершен.'");
		Иначе
			НачалоОписанияОшибки =
				НСтр("ru = 'Возникла исключительная ситуация при запуске программы.'");
		КонецЕсли;
	Иначе
//[-> leo вызов ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() приводит в процедуры проверки версии ИБ при этом возможны другие исключения и информация о текущей ошибке пропадает. Слава разарботчикам 1СЫ и их тупым потугам.
//[-		ИмяСобытия = НСтр("ru = 'Завершение программы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
//[<- leo вызов ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() приводит в процедуры проверки версии ИБ при этом возможны другие исключения и информация о текущей ошибке пропадает. Слава разарботчикам 1СЫ и их тупым потугам.
//[+> leo вызов ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() приводит в процедуры проверки версии ИБ при этом возможны другие исключения и информация о текущей ошибке пропадает. Слава разарботчикам 1СЫ и их тупым потугам.
		ИмяСобытия = НСтр("ru = 'Запуск программы'");
//[<+ leo вызов ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка() приводит в процедуры проверки версии ИБ при этом возможны другие исключения и информация о текущей ошибке пропадает. Слава разарботчикам 1СЫ и их тупым потугам.
		НачалоОписанияОшибки =
			НСтр("ru = 'Возникла исключительная ситуация при завершении программы.'");
	КонецЕсли;
	
	ТекстОшибки = НачалоОписанияОшибки
		+ Символы.ПС + Символы.ПС
		+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ТекстПредупреждения = НачалоОписанияОшибки + Символы.ПС
		+ НСтр("ru = 'Техническая информация об ошибке записана в журнал регистрации.'")
		+ Символы.ПС + Символы.ПС
		+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		ИмяСобытия, "Ошибка", ТекстОшибки, , Истина);
	
	ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
		"ПоказатьПредупреждениеИПродолжить",
		СтандартныеПодсистемыКлиент.ЭтотОбъект,
		ТекстПредупреждения);
	
	Параметры.ИнтерактивнаяОбработка = ИнтерактивнаяОбработка;
	
КонецПроцедуры

