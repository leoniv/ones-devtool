#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Переформируем заголовок по набору ссылок
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	НаборСсылок = Настройки.ПараметрыДанных.НайтиЗначениеПараметра( Новый ПараметрКомпоновкиДанных("НаборСсылок") );
	Если НаборСсылок <> Неопределено Тогда
		НаборСсылок = НаборСсылок.Значение;
	КонецЕсли;
	Заголовок = ЗаголовокПоНаборуСсылок(НаборСсылок);
	КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыВывода.УстановитьЗначениеПараметра("Заголовок", Заголовок);
	
	ПроцессорКомпоновки = ПроцессорКомпоновки(ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПроцессорКомпоновки(ДанныеРасшифровки = Неопределено, ТипГенератора = "ГенераторМакетаКомпоновкиДанных")
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	// Список ссылок из параметров
	ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра( Новый ПараметрКомпоновкиДанных("НаборСсылок") ).Значение;
	ТипЗначения = ТипЗнч(ЗначениеПараметра);
	Если ТипЗначения = Тип("СписокЗначений") Тогда
		МассивСсылок = ЗначениеПараметра.ВыгрузитьЗначения();
	ИначеЕсли ТипЗначения = Тип("Массив") Тогда
		МассивСсылок = ЗначениеПараметра;
	Иначе
		МассивСсылок = Новый Массив;
		Если ЗначениеПараметра <>Неопределено Тогда
			МассивСсылок.Добавить(ЗначениеПараметра);
		КонецЕсли;
	КонецЕсли;
	
	// Параметры вывода из фиксированных параметров
	Для Каждого ПараметрВывода Из КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыВывода.Элементы Цикл
		Если ПараметрВывода.Использование Тогда
			Элемент = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(ПараметрВывода.Параметр);
			Если Элемент <> Неопределено Тогда
				Элемент.Использование = Истина;
				Элемент.Значение      = ПараметрВывода.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Таблицы источников данных
	МестаИспользования = ОбщегоНазначения.МестаИспользования(МассивСсылок);
	
	// Проверяем чтобы у нас были все ссылки
	Для Каждого Ссылка Из МассивСсылок Цикл
		Если МестаИспользования.Найти(Ссылка, "Ссылка") = Неопределено Тогда
			Дополнительно = МестаИспользования.Добавить();
			Дополнительно.Ссылка = Ссылка;
			Дополнительно.ВспомогательныеДанные = Истина;
		КонецЕсли;
	КонецЦикла;
		
	ВнешниеДанные = Новый Структура;
	ВнешниеДанные.Вставить("МестаИспользования", МестаИспользования);
	
	// Выполнение
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки, , Тип(ТипГенератора));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеДанные, ДанныеРасшифровки);
	
	Возврат ПроцессорКомпоновки;
КонецФункции

Функция ЗаголовокПоНаборуСсылок(Знач НаборСсылок)
	Результат = Неопределено;
	
	Если ТипЗнч(НаборСсылок) = Тип("СписокЗначений") Тогда
		ВсегоСсылок = НаборСсылок.Количество() - 1;
		Если ВсегоСсылок >= 0 Тогда
		
			ОдинаковыйТип = Истина;
			ТипПервойСсылки = ТипЗнч(НаборСсылок[0].Значение);
			Для Позиция = 0 По ВсегоСсылок Цикл
				Если ТипЗнч(НаборСсылок[Позиция].Значение) <> ТипПервойСсылки Тогда
					ОдинаковыйТип = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ОдинаковыйТип Тогда
				Результат = СтрЗаменить(НСтр("ru = 'Места использования %1'"), "%1", 
					НаборСсылок[0].Значение.Метаданные().Представление() );
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = НСтр("ru = 'Места использования элементов'");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецЕсли