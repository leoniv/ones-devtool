// Форма параметризуется
//
// Параметры:
//     СписокСсылок - Массив, СписокЗначений, Коллекция элементов, обладающих полем "Ссылка" - набор 
//

// Флаг подтверждения, используется при не модальном закрытии
&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Перекладываем параметры в таблицу МестаИспользования.
	// Инициализируем реквизиты ОсновнойЭлемент, ОбщийВладелецЗаменяемыхСсылок, ТекстОшибкиПараметров
	ИнициализироватьОбъединяемыеСсылки( МассивСсылокИзНабора(Параметры.НаборСсылок) );
	Если Не ПустаяСтрока(ТекстОшибкиПараметров) Тогда
		// Будет выдано предупреждение при открытии;
		Возврат;
	КонецЕсли;
	
	МетаСсылка = ОсновнойЭлемент.Ссылка.Метаданные();
	
	ЕстьПравоБезвозвратногоУдаления = ПравоДоступа("АдминистрированиеДанных", Метаданные) Или ПравоДоступа("ИнтерактивноеУдаление", МетаСсылка);
	СобытиеОповещенияОЗамене        = Обработки.ЗаменаСсылок.СобытиеОповещенияОЗамене();
	
	ТекущийВариантУдаления = "Пометка";
	
	ИнициализироватьМастера(Элементы.ШагиМастера, Элементы.Далее, Элементы.Назад, Элементы.Отмена);
	
	// Добавляем шаги, зависящие от логики формы
	ИнициализироватьСценарийМастера();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Необходимость сообщения об ошибке
	Если Не ПустаяСтрока(ТекстОшибкиПараметров) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, ТекстОшибкиПараметров);
		Возврат;
	КонецЕсли;
	
	// Указываем стартовую страницу
	УстановитьНачальнуюСтраницуМастера(Элементы.ШагПоискМестИспользования);
	ЗапуститьРаботуМастера();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	// Проверяем клиентскую переменную
	Если ПодтверждениеЗакрытияФормы<>Истина Тогда
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение", ЭтотОбъект);
		Отказ = Истина;
		
		Текст = НСтр("ru = 'Закрыть объединение элементов?'");
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПодсказкаВыбораОсновногоЭлементаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "ПереключениеРежимаУдаления" Тогда
		Если ТекущийВариантУдаления = "Непосредственно" Тогда
			ТекущийВариантУдаления = "Пометка" 
		Иначе
			ТекущийВариантУдаления = "Непосредственно" 
		КонецЕсли;
		СформироватьПодсказкуОбъединения();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ МестаИспользования

&НаКлиенте
Процедура МестаИспользованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Ссылка = МестаИспользования.НайтиПоИдентификатору(ВыбраннаяСтрока).Ссылка;
	
	Если Поле <> Элементы.МестаИспользованияМестИспользования Тогда
		ПоказатьЗначение(, Ссылка);
		Возврат;
	КонецЕсли;
	
	НаборСсылок = Новый Массив;
	НаборСсылок.Добавить(Ссылка);
	
	СтандартныеПодсистемыКлиент.ПоказатьМестаИспользования(НаборСсылок);
КонецПроцедуры

&НаКлиенте
Процедура МестаИспользованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	// Добавляем всегда того же типа, что и основной
	ИмяФормыВыбора = ИмяФормыВыбораПоСсылке(ОсновнойЭлемент);
	Если Не ПустаяСтрока(ИмяФормыВыбора) Тогда
		ПараметрыФормы = Новый Структура("МножественныйВыбор", Истина);
		Если ОбщийВладелецЗаменяемыхСсылок <> Неопределено Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", ОбщийВладелецЗаменяемыхСсылок));
		КонецЕсли;
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МестаИспользованияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Или МестаИспользования.Количество()<3 Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ТекущиеДанные.Ссылка;
	Код    = Строка(ТекущиеДанные.Код);
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Удалить из списка элементов для объединения ""%1""?'"),
		Строка(Ссылка) + ?(ПустаяСтрока(Код), "", " (" + Код + ")" )
	);
	
	Оповещение = Новый ОписаниеОповещения("МестаИспользованияПередУдалениемЗавершение", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("ТекущаяСтрока", Элемент.ТекущаяСтрока);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура МестаИспользованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Добавляемые = ВыбранноеЗначение;
	Иначе
		Добавляемые = Новый Массив;
		Добавляемые.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	ДобавитьСтрокиМестИспользования(Добавляемые);
	СформироватьПодсказкуОбъединения();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НеудачныеЗамены

&НаКлиенте
Процедура НеудачныеЗаменыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		РасшифровкаПричиныНеудачи = "";
	Иначе
		РасшифровкаПричиныНеудачи = ТекущиеДанные.ПодробнаяПричина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НеудачныеЗаменыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Ссылка = НеудачныеЗамены.НайтиПоИдентификатору(ВыбраннаяСтрока).Ссылка;
	Если Ссылка<>Неопределено Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ШагМастераНазад(Команда)
	ШагМастера("Назад");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераДалее(Команда)
	ШагМастера("Далее");
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераОтмена(Команда)
	ШагМастера("Отмена");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлементМестаИспользования(Команда)
	ТекущиеДанные = Элементы.МестаИспользования.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВсеМестаИспользования(Команда)
	
	Если МестаИспользования.Количество() > 0 Тогда 
		СтандартныеПодсистемыКлиент.ПоказатьМестаИспользования(МестаИспользования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОсновным(Команда)
	ТекущиеДанные = Элементы.МестаИспользования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойЭлемент = ТекущиеДанные.Ссылка;
	СформироватьПодсказкуОбъединения();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлементНеудачнойЗамены(Команда)
	ТекущиеДанные = Элементы.НеудачныеЗамены.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеНеудачныеЗамены(Команда)
	ДеревоФормы = Элементы.НеудачныеЗамены;
	Для Каждого Элемент Из НеудачныеЗамены.ПолучитьЭлементы() Цикл
		ДеревоФормы.Развернуть(Элемент.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсеНеудачныеЗамены(Команда)
	ДеревоФормы = Элементы.НеудачныеЗамены;
	Для Каждого Элемент Из НеудачныеЗамены.ПолучитьЭлементы() Цикл
		ДеревоФормы.Свернуть(Элемент.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ИнициализироватьОбъединяемыеСсылки(Знач МассивСсылок)
	
	РезультатПроверки = ПроверитьОбъединяемыеСсылки(МассивСсылок);
	ТекстОшибкиПараметров = РезультатПроверки.Ошибка;
	Если Не ПустаяСтрока(ТекстОшибкиПараметров) ТОгда
		Возврат;
	КонецЕсли;
	
	ОсновнойЭлемент = МассивСсылок[0];
	ОбщийВладелецЗаменяемыхСсылок = РезультатПроверки.ОбщийВладелец;
	
	МестаИспользования.Очистить();
	Для Каждого Элемент Из МассивСсылок Цикл
		МестаИспользования.Добавить().Ссылка = Элемент;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПроверитьОбъединяемыеСсылки(Знач НаборСсылок)
	
	Результат = Новый Структура("Ошибка, ОбщийВладелец");
	
	КоличествоСсылок = НаборСсылок.Количество();
	Если КоличествоСсылок < 2 Тогда
		Результат.Ошибка = НСтр("ru = 'Для объединения необходимо указать несколько элементов.'");
		Возврат Результат;
	КонецЕсли;
	
	ПервыйЭлемент = НаборСсылок[0];
	
	ОсновныеМетаданные = ПервыйЭлемент.Метаданные();
	Характеристики= Новый Структура("Владельцы, Иерархический, ВидИерархии", Новый Массив, Ложь);
	ЗаполнитьЗначенияСвойств(Характеристики, ОсновныеМетаданные);
	
	ЕстьВладельцы = Характеристики.Владельцы.Количество() > 0;
	ЕстьГруппы    = Характеристики.Иерархический И Характеристики.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
	
	ДополнительныеПоля = "";
	Если ЕстьВладельцы Тогда
		ДополнительныеПоля = ДополнительныеПоля + ", Владелец КАК Владелец";
	Иначе
		ДополнительныеПоля = ДополнительныеПоля + ", НЕОПРЕДЕЛЕНО КАК Владелец";
	КонецЕсли;
	
	Если ЕстьГруппы Тогда
		ДополнительныеПоля = ДополнительныеПоля + ", ЭтоГруппа КАК ЭтоГруппа";
	Иначе
		ДополнительныеПоля = ДополнительныеПоля + ", ЛОЖЬ КАК ЭтоГруппа";
	КонецЕсли;
	
	ИмяТаблицы = ОсновныеМетаданные.ПолноеИмя();
	Запрос = Новый Запрос("
		|ВЫБРАТЬ Ссылка КАК Ссылка" + ДополнительныеПоля + " ПОМЕСТИТЬ ЗаменяемыеСсылки
		|ИЗ " + ИмяТаблицы + " ГДЕ Ссылка В (&НаборСсылок)
		|ИНДЕКСИРОВАТЬ ПО Владелец, ЭтоГруппа
		|;
		|ВЫБРАТЬ 
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Владелец) КАК КоличествоВладельцев,
		|	МИНИМУМ(Владелец)              КАК ОбщийВладелец,
		|	МАКСИМУМ(ЭтоГруппа)            КАК ЕстьГруппы,
		|	КОЛИЧЕСТВО(Ссылка)             КАК КоличествоСсылок
		|ИЗ
		|	ЗаменяемыеСсылки
		|");
	Запрос.УстановитьПараметр("НаборСсылок", НаборСсылок);
	
	Контроль = Запрос.Выполнить().Выгрузить()[0];
	Если Контроль.ЕстьГруппы Тогда
		Результат.Ошибка = НСтр("ru = 'Один из элементов для объединения является группой.
		                              |Группы не могут быть объединены.'");
	ИначеЕсли Контроль.КоличествоВладельцев > 1 Тогда 
		Результат.Ошибка = НСтр("ru = 'У элементов для объединения различные владельцы.
		                              |Такие элементы не могут быть объединены.'");
	ИначеЕсли Контроль.КоличествоСсылок <> КоличествоСсылок Тогда
		Результат.Ошибка = НСтр("ru = 'Все элементы для объединения  должны быть одного типа.'");
	Иначе 
		// Все нормально
		Результат.ОбщийВладелец = ?(ЕстьВладельцы, Контроль.ОбщийВладелец, Неопределено);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Общий обработчик подтверждения закрытия
&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗавершитьРаботуФормы();
	Иначе 
		ПодтверждениеЗакрытияФормы = Неопределено;
	КонецЕсли;
КонецПроцедуры

// Обработчик подтверждения удаления строки обрабатываемых ссылок
&НаКлиенте
Процедура МестаИспользованияПередУдалениемЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Фактическое удаление из таблицы
	Строка = МестаИспользования.НайтиПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексУдаленнойСтроки = МестаИспользования.Индекс(Строка);
	ВычислятьОсновной     = Строка.Ссылка = ОсновнойЭлемент;
	
	МестаИспользования.Удалить(Строка);
	Если ВычислятьОсновной Тогда
		ИндексПоследнейСтроки = МестаИспользования.Количество() - 1;
		Если ИндексУдаленнойСтроки <= ИндексПоследнейСтроки Тогда 
			ИндексОсновнойСтроки = ИндексУдаленнойСтроки;
		Иначе
			ИндексОсновнойСтроки = ИндексПоследнейСтроки;
		КонецЕсли;
			
		ОсновнойЭлемент = МестаИспользования[ИндексОсновнойСтроки].Ссылка;
	КонецЕсли;
	
	СформироватьПодсказкуОбъединения();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуФормы(Знач ТекстВсплывающегоСообщения = Неопределено)
	
	ОтменитьДлительнуюОперациюМастера();
	
	Если ТекстВсплывающегоСообщения <> Неопределено Тогда
		ПоказатьОповещениеПользователя( , , ТекстВсплывающегоСообщения, БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	// Закрываем без дополнительных вопросов
	ПодтверждениеЗакрытияФормы = Истина;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодсказкуОбъединения()
	
	Если ЕстьПравоБезвозвратногоУдаления Тогда
		Если ТекущийВариантУдаления = "Пометка" Тогда
			ТекстСсылки = НСтр("ru = 'помечены на удаление'");
		Иначе
			ТекстСсылки = НСтр("ru = 'удалены безвозвратно'");
		КонецЕсли;
		
		Гиперссылка = ГиперссылкаФорматированнойСтроки(ТекстСсылки, 
			"ПереключениеРежимаУдаления");
	Иначе
		Гиперссылка = НСтр("ru = 'помечены на удаление'");
	КонецЕсли;

	Элементы.ПодсказкаВыбораОсновногоЭлемента.Заголовок = ФорматированнаяСтрока(
		НСтр("ru = 'Объединить элементы (%1) в ""%2"".
		           |Все остальные элементы из списка будут %3 и заменены во всех местах
		           |использования на ""%2""'"),
		МестаИспользования.Количество(),
		ОсновнойЭлемент,
		Гиперссылка
	);
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьНадписьЗавершения()
	
	ТекстРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Элементы (%1) объединены в ""%2""'"),
		МестаИспользования.Количество(),
		ОсновнойЭлемент
	);
	
	Элементы.РезультатОбъединения.Заголовок = ТекстРезультата;
	
	Возврат ТекстРезультата;
КонецФункции

&НаКлиенте
Процедура СформироватьНадписьНеудачныеЗамены()
	
	Элементы.РезультатНеудачныеЗамены.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось объединить элементы (%1 из %2). В некоторых местах использования не может быть произведена
		           |автоматическая замена на ""%3""'"),
		НеудачныеЗамены.ПолучитьЭлементы().Количество(),
		МестаИспользования.Количество(),
		ОсновнойЭлемент
	);
	
КонецПроцедуры

// Параметры:
//     СписокДанных - Массив - содержит измененные данные, о типе которых будет оповещено
//
&НаКлиенте
Процедура ОповеститьОбУспешнойЗамене(Знач СписокДанных)
	// Изменения объектов, в которых происходили замены
	СписокТипов = Новый Соответствие;
	Для Каждого Элемент Из СписокДанных Цикл
		Тип = ТипЗнч(Элемент);
		Если СписокТипов[Тип] = Неопределено Тогда
			ОповеститьОбИзменении(Тип);
			СписокТипов.Вставить(Тип, Истина);
		КонецЕсли;
	КонецЦикла;
	
	// Общее оповещение
	Если СписокТипов.Количество()>0 Тогда
		Оповестить(СобытиеОповещенияОЗамене, , ЭтотОбъект);
	КонецЕСли;
КонецПроцедуры

// ---------------------------------------------------------------------------------------------------------------------
&НаСервере
Процедура ЗапуститьЗаполнениеМестИспользования()
	
	ПолноеИмяМетода = "ОбщегоНазначения.ФоновыйРасчетКоличестваВхождений";
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить( МассивСсылокИзНабора(МестаИспользования) );
	
	ЗапуститьДлительнуюОперациюМастера(ПолноеИмяМетода, ПараметрыМетода, Истина);
КонецПроцедуры

&НаСервере
Функция ПроверитьСостояниеИОбработатьЗаполнениеМестИспользования();
	СостояниеОперации = СостояниеДлительнойОперацииМастера();
	
	Если СостояниеОперации.Завершено И СостояниеОперации.ИнформацияОбОшибке = Неопределено Тогда
		ЗаполнитьМестаИспользования(СостояниеОперации.Результат);
	КонецЕсли;
	
	// Результат всегда обработан, клиенту можно не возвращать
	СостояниеОперации.Результат = Неопределено;
	
	Возврат СостояниеОперации;
КонецФункции

&НаСервере
Процедура ЗаполнитьМестаИспользования(Знач ТаблицаИспользования)
	
	НовыеМестаИспользования = МестаИспользования.Выгрузить();
	НовыеМестаИспользования.Индексы.Добавить("Ссылка");
	
	ЭтоОбновление = НовыеМестаИспользования.Найти(ОсновнойЭлемент, "Ссылка") <> Неопределено;
	
	Если Не ЭтоОбновление Тогда
		НовыеМестаИспользования = МестаИспользования.Выгрузить(Новый Массив);
		НовыеМестаИспользования.Индексы.Добавить("Ссылка");
	КонецЕсли;
	
	КэшМетаданных = Новый Соответствие;
	
	МаксСсылка = Неопределено;
	МаксМест   = -1;
	Для Каждого Строка Из ТаблицаИспользования Цикл
		Ссылка = Строка.Ссылка;
		
		СтрокаИспользования = НовыеМестаИспользования.Найти(Ссылка, "Ссылка");
		Если СтрокаИспользования = Неопределено Тогда
			СтрокаИспользования = НовыеМестаИспользования.Добавить();
			СтрокаИспользования.Ссылка = Ссылка;
		КонецЕсли;
		
		Мест = Строка.Вхождения;
		Если Мест>МаксМест Тогда
			МаксСсылка = Ссылка;
			МаксМест   = Мест;
		КонецЕсли;
		
		СтрокаИспользования.МестИспользования = Мест;
		СтрокаИспользования.Код      = ВозможныйКодСсылки(Ссылка, КэшМетаданных);
		СтрокаИспользования.Владелец = ВозможныйВладелецСсылки(Ссылка, КэшМетаданных);
		
		СтрокаИспользования.НеИспользуется = ?(Мест = 0, НСтр("ru = 'Не используется'"), "");
	КонецЦикла;
	
	МестаИспользования.Загрузить(НовыеМестаИспользования);
	
	Если ЭтоОбновление Тогда
		Если НовыеМестаИспользования.Найти(ОсновнойЭлемент, "Ссылка") = Неопределено Тогда
			ОсновнойЭлемент = МаксСсылка;
		КонецЕсли;
	Иначе
		ОсновнойЭлемент = МаксСсылка;
	КонецЕсли;
	
	// Обновляем заголовки
	Представление = ?(ОсновнойЭлемент=Неопределено, "", ОсновнойЭлемент.Метаданные().Представление());
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Объединение элементов %1 в один'"),
		Представление
	);
КонецПроцедуры

// ---------------------------------------------------------------------------------------------------------------------
&НаСервере
Процедура ЗапуститьЗаменуСсылок()
	
	ПолноеИмяМетода = "ОбщегоНазначения.ЗаменитьСсылки";
	ПараметрыМетода = Новый Массив;
	
	ПарыЗамен = Новый Соответствие;
	Для Каждого Строка Из МестаИспользования Цикл
		ПарыЗамен.Вставить(Строка.Ссылка, ОсновнойЭлемент);
	КонецЦикла;
	ПараметрыМетода.Добавить(ПарыЗамен);
	
	ПараметрыЗамены = Новый Структура;
	ПараметрыЗамены.Вставить("СпособУдаления", ТекущийВариантУдаления);
	ПараметрыЗамены.Вставить("ВключатьБизнесЛогику", Истина);
	
	ПараметрыМетода.Добавить(ПараметрыЗамены);
	
	ЗапуститьДлительнуюОперациюМастера(ПолноеИмяМетода, ПараметрыМетода, Истина);
КонецПроцедуры

&НаСервере
Функция ПроверитьСостояниеИОбработатьЗаменуСсылок()
	СостояниеОперации = СостояниеДлительнойОперацииМастера();
	
	Если Не СостояниеОперации.Завершено Тогда
		// Клиенту пока можно ничего не говорить
		СостояниеОперации.Результат = Неопределено;
		
	ИначеЕсли СостояниеОперации.ИнформацияОбОшибке <> Неопределено Тогда
		// Завершено c ошибками
		СостояниеОперации.Результат = Неопределено;
		
	ИначеЕсли СостояниеОперации.Завершено И СостояниеОперации.Результат <> Неопределено Тогда
		// Перекладываем все ошибки в НеудачныеЗамены, получаем флаг их наличия
		СостояниеОперации.Результат = Не ЗаполнитьНеудачныеЗамены(СостояниеОперации.Результат);
		
	КонецЕсли;
	
	Возврат СостояниеОперации;
КонецФункции

&НаСервере
Функция ЗаполнитьНеудачныеЗамены(Знач РезультатыЗамены)
	// РезультатыЗамены - таблица с колонками Ссылка, ОбъектОшибки, ТипОшибки, ТекстОшибки
	КорневыеСтроки = НеудачныеЗамены.ПолучитьЭлементы();
	КорневыеСтроки.Очистить();
	
	СоответствиеСтрок = Новый Соответствие;
	КэшМетаданных     = Новый Соответствие;
	
	Для Каждого СтрокаРезультата Из РезультатыЗамены Цикл
		Ссылка = СтрокаРезультата.Ссылка;
		
		ОшибкиПоСсылке = СоответствиеСтрок[Ссылка];
		Если ОшибкиПоСсылке = Неопределено Тогда
			СтрокаДерева = КорневыеСтроки.Добавить();
			СтрокаДерева.Ссылка = Ссылка;
			СтрокаДерева.Данные = Строка(Ссылка);
			СтрокаДерева.Код    = Строка( ВозможныйКодСсылки(Ссылка, КэшМетаданных) );
			СтрокаДерева.Пиктограмма = -1;
			
			ОшибкиПоСсылке = СтрокаДерева.ПолучитьЭлементы();
			СоответствиеСтрок.Вставить(Ссылка, ОшибкиПоСсылке);
		КонецЕсли;
		
		СтрокаОшибки = ОшибкиПоСсылке.Добавить();
		СтрокаОшибки.Ссылка = СтрокаРезультата.ОбъектОшибки;
		СтрокаОшибки.Данные = СтрокаРезультата.ПредставлениеОбъектаОшибки;
		
		ТипОшибки = СтрокаРезультата.ТипОшибки;
		Если ТипОшибки = "НеизвестныеДанные" Тогда
			СтрокаОшибки.Причина = НСтр("ru = 'Обнаружена данные, обработка которых не планировалась.'");
			
		ИначеЕсли ТипОшибки = "ОшибкаБлокировки" Тогда
			СтрокаОшибки.Причина = НСтр("ru = 'Данные заблокированы другим пользователем.'");
			
		ИначеЕсли ТипОшибки = "ДанныеИзменены" Тогда
			СтрокаОшибки.Причина = НСтр("ru = 'Данные изменены другим пользователем.'");
			
		ИначеЕсли ТипОшибки = "ОшибкаЗаписи" Тогда
			СтрокаОшибки.Причина = СтрокаРезультата.ТекстОшибки;
			
		Иначе
			СтрокаОшибки.Причина = НСтр("ru = 'Неизвестная ошибка.'");
			
		КонецЕсли;
		
		СтрокаОшибки.ПодробнаяПричина = СтрокаРезультата.ТекстОшибки;
	КонецЦикла; // результаты замены
	
	Возврат КорневыеСтроки.Количество() > 0;
КонецФункции

// ---------------------------------------------------------------------------------------------------------------------

&НаСервереБезКонтекста
Функция ИмяФормыВыбораПоСсылке(Знач Ссылка)
	Мета = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	Возврат ?(Мета = Неопределено, Неопределено, Мета.ПолноеИмя() + ".ФормаВыбора");
КонецФункции

// Преобразует массив, список значений или коллекцию в массив
&НаСервереБезКонтекста
Функция МассивСсылокИзНабора(Знач Ссылки)
	
	ТипПараметра = ТипЗнч(Ссылки);
	Если Ссылки = Неопределено Тогда
		МассивСсылок = Новый Массив;
		
	ИначеЕсли ТипПараметра  = Тип("СписокЗначений") Тогда
		МассивСсылок = Ссылки.ВыгрузитьЗначения();
		
	ИначеЕсли ТипПараметра = Тип("Массив") Тогда
		МассивСсылок = Ссылки;
		
	Иначе
		МассивСсылок = Новый Массив;
		Для Каждого Элемент Из Ссылки Цикл
			МассивСсылок.Добавить(Элемент.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивСсылок;
КонецФункции

// Добавляет массив ссылок
&НаСервере
Процедура ДобавитьСтрокиМестИспользования(Знач МассивСсылок)
	ИндексПоследнего = Неопределено;
	КэшМетаданных    = Новый Соответствие;
	
	Фильтр = Новый Структура("Ссылка");
	Для Каждого Ссылка Из МассивСсылок Цикл
		Фильтр.Ссылка = Ссылка;
		СуществующиеСтроки = МестаИспользования.НайтиСтроки(Фильтр);
		Если СуществующиеСтроки.Количество() = 0 Тогда
			Строка = МестаИспользования.Добавить();
			Строка.Ссылка = Ссылка;
			
			Строка.Код      = ВозможныйКодСсылки(Ссылка, КэшМетаданных);
			Строка.Владелец = ВозможныйВладелецСсылки(Ссылка, КэшМетаданных);
			
			Строка.МестИспользования = -1;
			Строка.НеИспользуется    = НСтр("ru = 'Не рассчитано'");
		Иначе
			Строка = СуществующиеСтроки[0];
		КонецЕсли;
		
		ИндексПоследнего = Строка.ПолучитьИдентификатор();
	КонецЦикла;
	
	Если ИндексПоследнего <> Неопределено Тогда
		Элементы.МестаИспользования.ТекущаяСтрока = ИндексПоследнего;
	КонецЕсли;
КонецПроцедуры

// Возвращает код справочника и т.п. если он есть по метаданным, Неопределено, если кода нет
&НаСервереБезКонтекста
Функция ВозможныйКодСсылки(Знач Ссылка, КэшМетаданных)
	Данные = ОписаниеМетаПоСсылке(Ссылка, КэшМетаданных);
	Возврат ?(Данные.ЕстьКод, Ссылка.Код, Неопределено);
КонецФункции

// Возвращает владельца справочника и т.п. если он есть по метаданным, Неопределено, если владельца нет
&НаСервереБезКонтекста
Функция ВозможныйВладелецСсылки(Знач Ссылка, КэшМетаданных)
	Данные = ОписаниеМетаПоСсылке(Ссылка, КэшМетаданных);
	Возврат ?(Данные.ЕстьВладелец, Ссылка.Владелец, Неопределено);
КонецФункции

// Возвращает описание справочника и т.п. по метаданным
&НаСервереБезКонтекста
Функция ОписаниеМетаПоСсылке(Знач Ссылка, КэшМетаданных)
	
	Мета = Ссылка.Метаданные();
	Данные = КэшМетаданных[Мета];
	
	Если Данные = Неопределено Тогда
		Тест = Новый Структура("ДлинаКода, Владельцы", 0, Новый Массив);
		ЗаполнитьЗначенияСвойств(Тест, Мета);
		
		Данные = Новый Структура;
		Данные.Вставить("ЕстьКод", Тест.ДлинаКода > 0);
		Данные.Вставить("ЕстьВладелец", Тест.Владельцы.Количество() > 0);
		
		КэшМетаданных[Мета] = Данные;
	КонецЕсли;
	
	Возврат Данные;
КонецФункции

// Возвращает список успешно замененных ссылок, тех которых нет в НеудачныеЗамены
&НаКлиенте
Функция УдалитьИзМестИспользованияОбработанные()
	Результат = Новый Массив;
	
	Неудачные = Новый Соответствие;
	Для Каждого Строка Из НеудачныеЗамены.ПолучитьЭлементы() Цикл
		Неудачные.Вставить(Строка.Ссылка, Истина);
	КонецЦикла;
	
	Индекс = МестаИспользования.Количество() - 1;
	Пока Индекс > 0 Цикл
		Ссылка = МестаИспользования[Индекс].Ссылка;
		Если Ссылка<>ОсновнойЭлемент И Неудачные[Ссылка] = Неопределено Тогда
			МестаИспользования.Удалить(Индекс);
			Результат.Добавить(Ссылка);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Проверяем возможность замены с прикладной точки зрения
&НаСервере
Функция ТекстОшибкиВозможностиЗаменыСсылок()
	
	НаборСсылок = Новый Массив;
	ПарыЗамен   = Новый Соответствие;
	Для Каждого Строка Из МестаИспользования Цикл
		НаборСсылок.Добавить(Строка.Ссылка);
		ПарыЗамен.Вставить(Строка.Ссылка, ОсновнойЭлемент);
	КонецЦикла;
	
	// Проверим еще раз возможно измененный набор.
	Контроль = ПроверитьОбъединяемыеСсылки(НаборСсылок);
	Если Не ПустаяСтрока(Контроль.Ошибка) Тогда
		Возврат Контроль.Ошибка;
	КонецЕсли;
	
	// Прикладная проверка, если она определена
	
	// Вычисляем из ссылки менеджер объекта
	МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОсновнойЭлемент);
	
	// Проверяем присутствие метода в менеджере
	ТестовыйОбъект = ОсновнойЭлемент.ПолучитьОбъект();
	Попытка
		// Тестовым обработчиком должно быть событие, у которого на один параметр меньше, чем у тестируемого метода
		// (первым параметром передается сам объект). Например ПриЗаписи имеет один параметр, тогда у обработчик должно быть два
		ДобавитьОбработчик ТестовыйОбъект.ПриЗаписи, МодульМенеджера.ВозможностьЗаменыЭлементов;
		ЕстьМетод = Истина;
	Исключение
		ЕстьМетод = Ложь;
	КонецПопытки;
	
	Результат = "";
	
	Если ЕстьМетод Тогда
		ПараметрыЗамены = Новый Структура("СпособУдаления", ТекущийВариантУдаления);
		Ошибки = МодульМенеджера.ВозможностьЗаменыЭлементов(ПарыЗамен, ПараметрыЗамены);
		Для Каждого КлючЗначение Из Ошибки Цикл
			Результат = Результат + Символы.ПС + КлючЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

// ---------------------------------------------------------------------------------------------------------------------
// Общий обработчик немодального продолжения отмены с закрытием
&НаКлиенте
Процедура ЗавершениеОтменыИЗакрытиеФормы(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		// Подтверждаем продолжение процесса
		ЗавершитьШагМастера(ДополнительныеПараметры.ПараметрыШага);
		Возврат;
	КонецЕсли;
	
	ЗавершитьРаботуФормы();
КонецПроцедуры

// Аналог ПодставитьПараметрыВСтроку для работы с форматированной строкой
Функция ФорматированнаяСтрока(Знач Шаблон, 
	Знач П1 = Неопределено, Знач П2 = Неопределено, Знач П3 = Неопределено, Знач П4 = Неопределено, Знач П5 = Неопределено,
	Знач П6 = Неопределено, Знач П7 = Неопределено, Знач П8 = Неопределено, Знач П9 = Неопределено
)

	ЧастиСтроки = Новый Массив;
	ДопустимыеТипы = Новый ОписаниеТипов("Строка, ФорматированнаяСтрока, Картинка");
	
	Начало = 1;
	Пока Истина Цикл
		Фрагмент = Сред(Шаблон, Начало);
		
		Позиция = Найти(Фрагмент, "%");
		Если Позиция = 0 Тогда
			ЧастиСтроки.Добавить(Фрагмент);
			Прервать;
		КонецЕсли;
		
		Следующий = Сред(Фрагмент, Позиция + 1, 1);
		
		Если Следующий = "1" Тогда
			Значение = П1;
			
		ИначеЕсли Следующий = "2" Тогда
			Значение = П2;
			
		ИначеЕсли Следующий = "3" Тогда
			Значение = П3;
			
		ИначеЕсли Следующий = "4" Тогда
			Значение = П4;
			
		ИначеЕсли Следующий = "5" Тогда
			Значение = П5;
			
		ИначеЕсли Следующий = "6" Тогда
			Значение = П6;
			
		ИначеЕсли Следующий = "7" Тогда
			Значение = П7;
			
		ИначеЕсли Следующий = "8" Тогда
			Значение = П8;
			
		ИначеЕсли Следующий = "9" Тогда
			Значение = П9;
			
		ИначеЕсли Следующий = "%" Тогда
			Значение = "%";
			
		Иначе
			Значение = Неопределено;
			Позиция  = Позиция - 1;
			
		КонецЕсли;
		
		ЧастиСтроки.Добавить(Лев(Фрагмент, Позиция - 1));
		
		Если Значение <> Неопределено Тогда
			Значение = ДопустимыеТипы.ПривестиЗначение(Значение);
			Если Значение <> Неопределено Тогда
				ЧастиСтроки.Добавить( Значение );
			КонецЕсли;
		КонецЕсли;
		
		Начало = Начало + Позиция + 1;
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСтроки);
КонецФункции

Функция ГиперссылкаФорматированнойСтроки(Знач Текст, Знач Идентификатор = Неопределено)
	
	Возврат Новый ФорматированнаяСтрока(Текст, , , , Идентификатор);
	
КонецФункции

// ---------------------------------------------------------------------------------------------------------------------
// Работа с мастером

&НаСервере
Процедура ИнициализироватьСценарийМастера()
	
	// 0. Поиск мест использования по параметрам
	ДобавитьШагМастера(Элементы.ШагПоискМестИспользования, 
			ДействиеШагаМастера("ПриАктивации",         "ШагПоискМестИспользованияПриАктивации",
			ДействиеШагаМастера("ПередДействиемОтмена", "ШагПоискМестИспользованияПередДействиемОтмена",
			ДействиеШагаМастера("ПриОбработкеОжидания", "ШагПоискМестИспользованияПриОбработкеОжидания",
		))), 
			КнопкаШагаМастера("Далее", "", "", Ложь, Ложь, Ложь, 
			КнопкаШагаМастера("Назад", "", "", Ложь, Ложь, Ложь, 
			КнопкаШагаМастера("Отмена", НСтр("ru = 'Прервать'"), НСтр("ru = 'Отказаться от объединения элементов'"),
		)))
	);
	
	// 1. Выбор основного элемента
	ДобавитьШагМастера(Элементы.ШагВыборОсновногоЭлемента, 
			ДействиеШагаМастера("ПриАктивации",         "ШагВыборОсновногоЭлементаПриАктивации",
			ДействиеШагаМастера("ПередДействиемДалее",  "ШагВыборОсновногоЭлементаПередДействиемДалее",
			ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыборОсновногоЭлементаПередДействиемОтмена",
		))), 
			КнопкаШагаМастера("Далее", НСтр("ru = 'Объединить'") + " >", НСтр("ru = 'Начать объединение элементов'"), Истина, Истина, Истина,
			КнопкаШагаМастера("Назад", "", "", Ложь, Ложь, Ложь, 
			КнопкаШагаМастера("Отмена", НСтр("ru = 'Отмена'"),  НСтр("ru = 'Отказаться от объединения элементов'"),
		)))
	);
	
	// 2. Ожидание процесса
	ДобавитьШагМастера(Элементы.ШагОбъединение, 
			ДействиеШагаМастера("ПриАктивации",         "ШагОбъединениеПриАктивации",
			ДействиеШагаМастера("ПередДействиемОтмена", "ШагОбъединениеПередДействиемОтмена",
			ДействиеШагаМастера("ПриОбработкеОжидания", "ШагОбъединениеПриОбработкеОжидания",
		))), 
			КнопкаШагаМастера("Далее", "", "", Ложь, Ложь, Ложь,
			КнопкаШагаМастера("Назад", "", "", Ложь, Ложь, Ложь,
			КнопкаШагаМастера("Отмена", НСтр("ru = 'Прервать'"), НСтр("ru = 'Прервать объединение элементов'"),
		)))
	);
	
	// 3. Успешное объединение
	ДобавитьШагМастера(Элементы.ШагУспешногоЗавершения, 
			ДействиеШагаМастера("ПриАктивации",         "ШагУспешногоЗавершенияПриАктивации",
			ДействиеШагаМастера("ПередДействиемОтмена", "ШагУспешногоЗавершенияПередДействиемОтмена",
		)), 
			КнопкаШагаМастера("Далее", "", "", Ложь, Ложь, Ложь, 
			КнопкаШагаМастера("Назад", "", "", Ложь, Ложь, Ложь, 
			КнопкаШагаМастера("Отмена", НСтр("ru = 'Закрыть'"), НСтр("ru = 'Закрыть результаты объединения'"), Истина,  Истина,  Истина,
		)))
	);
	
	// 4. Ошибки замены ссылок
	ДобавитьШагМастера(Элементы.ШагПовторОбъединения,
			ДействиеШагаМастера("ПриАктивации",         "ШагПовторОбъединенияПриАктивации",
			ДействиеШагаМастера("ПередДействиемДалее",  "ШагПовторОбъединенияПередДействиемДалее",
			ДействиеШагаМастера("ПередДействиемНазад",  "ШагПовторОбъединенияПередДействиемНазад",
			ДействиеШагаМастера("ПередДействиемОтмена", "ШагПовторОбъединенияПередДействиемОтмена",
		)))), 
			КнопкаШагаМастера("Далее", НСтр("ru = 'Повторить объединение'") + " >", НСтр("ru = 'Повторить объединение'"),  Истина, Истина, Истина, 
			КнопкаШагаМастера("Назад", "< " + НСтр("ru = 'Назад'"), НСтр("ru = 'Вернутся к выбору основного элемента'"), Истина, Истина, Ложь,
			КнопкаШагаМастера("Отмена", НСтр("ru = 'Закрыть'"), НСтр("ru = 'Закрыть результаты объединения'"),
		)))
	);
	
	// Вариант завершения работы - или демонстрацией страницы или всплывающим сообщением и закрытием
	УстановитьПараметрПользователяМастера(ЭтотОбъект, "СообщатьОбУспехеВсплывающимОкном", Истина);
КонецПроцедуры

// ---------------------------------------------------------------------------------------------------------------------
&НаКлиенте
Процедура ШагПоискМестИспользованияПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	// Стартуем длительную обработку
	ЗапуститьЗаполнениеМестИспользования();
КонецПроцедуры

&НаКлиенте
Процедура ШагПоискМестИспользованияПриОбработкеОжидания(Прекратить, Знач ДополнительныеПараметры) Экспорт
	// Ожидаем завершения поиска ссылок
	СостояниеОперации = ПроверитьСостояниеИОбработатьЗаполнениеМестИспользования();
	
	Если СостояниеОперации.Завершено Тогда
		Если СостояниеОперации.ИнформацияОбОшибке = Неопределено Тогда
			// Успешно выполнено, идем дальше
			ШагМастера("Далее");
		Иначе
			Прекратить = Истина;
			ПоказатьПредупреждение(, СостояниеОперации.ИнформацияОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагПоискМестИспользованияПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Запрос подтверждения на отмену
	ТекстВопроса = НСтр("ru = 'Прервать поиск мест использования и закрыть?'");
	Описание = Новый ОписаниеОповещения("ЗавершениеОтменыИЗакрытиеФормы", ЭтотОбъект, Новый Структура);
	Описание.ДополнительныеПараметры.Вставить("ПараметрыШага", ПараметрыШага);
	
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

// ---------------------------------------------------------------------------------------------------------------------
&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	
	СформироватьПодсказкуОбъединения();
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Проверка на допустимость объединения с прикладной точки зрения
	ТекстОшибки = ТекстОшибкиВозможностиЗаменыСсылок();
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		// Все замены допустимы
		ЗавершитьШагМастера(ПараметрыШага);
		Возврат;
	КонецЕсли;
	
	ПараметрыПредупреждения = Новый Структура;
	ПараметрыПредупреждения.Вставить("Заголовок", НСтр("ru = 'Невозможно объединить элементы'"));
	ПараметрыПредупреждения.Вставить("ТекстСообщения", ТекстОшибки);
	ОткрытьФорму("Обработка.ЗаменаСсылок.Форма.МногострочноеПредупреждение", ПараметрыПредупреждения, ЭтотОбъект);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагВыборОсновногоЭлементаПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Запрос подтверждения на отмену
	ТекстВопроса = НСтр("ru = 'Отменить объединение элементов и закрыть?'");
	Описание = Новый ОписаниеОповещения("ЗавершениеОтменыИЗакрытиеФормы", ЭтотОбъект, Новый Структура);
	Описание.ДополнительныеПараметры.Вставить("ПараметрыШага", ПараметрыШага);
	
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

// ---------------------------------------------------------------------------------------------------------------------
&НаКлиенте
Процедура ШагОбъединениеПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	// Стартуем длительную обработку по замене 
	ЗапуститьЗаменуСсылок();
КонецПроцедуры

&НаКлиенте
Процедура ШагОбъединениеПриОбработкеОжидания(Прекратить, Знач ДополнительныеПараметры) Экспорт
	// Ожидаем завершения замены ссылок
	СостояниеОперации = ПроверитьСостояниеИОбработатьЗаменуСсылок();
	
	Если Не СостояниеОперации.Завершено Тогда
		Возврат;
	КонецЕсли;
	
	Если СостояниеОперации.ИнформацияОбОшибке = Неопределено Тогда
		// Выполнено успешно
		Если СостояниеОперации.Результат = Истина Тогда
			// Успешно заменили все элементы
			Если Истина = ПрочитатьПараметрПользователяМастера(ЭтотОбъект, "СообщатьОбУспехеВсплывающимОкном") Тогда
				ЗавершитьРаботуФормы( СформироватьНадписьЗавершения() );
			Иначе
				// Переходим на страницу завершения
				ШагМастера("Далее");
			КонецЕсли;
			
		Иначе
			// Остались необработанные, переходим на попытку повтора
			ПерейтиНаШагМастера(Элементы.ШагПовторОбъединения, Истина);
		КонецЕсли
	Иначе
		// Фоновое задание завершилось с ошибкой
		Прекратить = Истина;
		ПоказатьПредупреждение(, СостояниеОперации.ИнформацияОбОшибке);
		ПерейтиНаШагМастера(Элементы.ШагВыборОсновногоЭлемента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШагОбъединениеПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Запрос подтверждения на отмену
	ТекстВопроса = НСтр("ru = 'Прервать процесс объединения и закрыть?'");
	Описание = Новый ОписаниеОповещения("ЗавершениеОтменыИЗакрытиеФормы", ЭтотОбъект, Новый Структура);
	Описание.ДополнительныеПараметры.Вставить("ПараметрыШага", ПараметрыШага);
	
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

// ---------------------------------------------------------------------------------------------------------------------
&НаКлиенте
Процедура ШагУспешногоЗавершенияПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	// Обновляем надпись 
	СформироватьНадписьЗавершения();
	
	// Оповещаем о успешной замене
	СписокОбновленного = Новый Массив;
	Для Каждого Строка Из МестаИспользования Цикл
		СписокОбновленного.Добавить(Строка.Ссылка);
	КонецЦикла;
	ОповеститьОбУспешнойЗамене(СписокОбновленного);
КонецПроцедуры

&НаКлиенте
Процедура ШагУспешногоЗавершенияПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	
	// Это выход. Закрываем форму принудительно
	ЗавершитьРаботуФормы();
	
КонецПроцедуры

// ---------------------------------------------------------------------------------------------------------------------
&НаКлиенте
Процедура ШагПовторОбъединенияПриАктивации(Знач Страница, Знач ДополнительныеПараметры) Экспорт
	// Обновляем количества неудач
	СформироватьНадписьНеудачныеЗамены();
	
	// Оповещаем об успешной частичной замене
	СписокОбновленного = УдалитьИзМестИспользованияОбработанные();	// Заодно и удаляем из списка вариантов
	ОповеститьОбУспешнойЗамене(СписокОбновленного);
КонецПроцедуры

&НаКлиенте
Процедура ШагПовторОбъединенияПередДействиемДалее(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Повтор замены
	ПерейтиНаШагМастера(Элементы.ШагОбъединение, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ШагПовторОбъединенияПередДействиемНазад(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Перезаполняем список обрабатываемых
	ПерейтиНаШагМастера(Элементы.ШагПоискМестИспользования, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ШагПовторОбъединенияПередДействиемОтмена(Знач ПараметрыШага, Знач ДополнительныеПараметры) Экспорт
	// Это выход. Закрываем форму принудительно
	ЗавершитьРаботуФормы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОШАГОВОГО ПОМОЩНИКА

// Для встраивания функционала мастера необходимо:
//
//     1) Нарисовать на форме группу, содержащую страницы помощника
//     2) Определить на форме три команды для действий "Далее", "Назад", "Отмена". Определить им обработчики как:
//
//         &НаКлиенте
//         Процедура ШагМастераНазад(Команда)
//             ШагМастера("Назад");
//         КонецПроцедуры
//
//         &НаКлиенте
//         Процедура ШагМастераДалее(Команда)
//             ШагМастера("Далее");
//         КонецПроцедуры
//
//         &НаКлиенте
//         Процедура ШагМастераОтмена(Команда)
//             ШагМастера("Отмена");
//         КонецПроцедуры
//
//     3) Добавить блок методов пошагового помощника
//
//     4) В коде на сервере:
//          - Инициализировать структуры помощника вызовом "ИнициализироватьМастера", передав туда соответствующие
//            элементы формы
//
//          - Создать сценарий работы последовательным вызовами "ДобавитьШагМастера". Рекомендуется использовать 
//            вспомогательные функции "ДействиеШагаМастера" и "КнопкаШагаМастера". Например:
//
//              ДобавитьШагМастера(Элементы.ШагВыборЦелевогоЭлемента, 
//                      ДействиеШагаМастера("ПриАктивации",         "ШагВыборЦелевогоЭлементаПриАктивации",
//                      ДействиеШагаМастера("ПередДействиемДалее",  "ШагВыборЦелевогоЭлементаПередДействиемДалее",
//                      ДействиеШагаМастера("ПередДействиемОтмена", "ШагВыборЦелевогоЭлементаПередДействиемОтмена",
//                  ))), 
//                      КнопкаШагаМастера("Далее", НСтр("ru = 'Заменить'") + " >", Истина, Истина, Истина,
//                      КнопкаШагаМастера("Назад", "", Ложь, Ложь, Ложь, 
//                      КнопкаШагаМастера("Отмена", НСтр("ru = 'Отмена'")
//                  )))
//              );
//
//     5) В коде на клиенте (обычно при открытии):
//          - Указать начальную страницу мастера при помощи вызова "УстановитьНачальнуюСтраницуМастера"
//          - Запустить начальную страницу вызовом "ЗапуститьРаботуМастера"
//

// Инициализирует структуры мастера.
//
// Параметры:
//     ГруппаСтраниц - ГруппаФормы - Элемент формы, группа типа "страницы", содержащая в себе страницы-шаги мастера
//     КнопкаДалее   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Далее"
//     КнопкаНазад   - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Назад"
//     КнопкаОтмена  - КнопкаФормы, КнопкаКоманднойПанели - Элемент формы, используемый для кнопки "Отмена"
//
&НаСервере
Процедура ИнициализироватьМастера(Знач ГруппаСтраниц, Знач КнопкаДалее, Знач КнопкаНазад, Знач КнопкаОтмена)
	НастройкиМастера = Новый Структура;

	НастройкиМастера.Вставить("Шаги", Новый Массив);
	НастройкиМастера.Вставить("НомерТекущегоШага", 0);
	НастройкиМастера.Вставить("СтраницаСтарта", Неопределено);
	
	// Идентификаторы частей интерфейса
	НастройкиМастера.Вставить("ГруппаСтраниц", ГруппаСтраниц.Имя);
	НастройкиМастера.Вставить("КнопкаДалее",   КнопкаДалее.Имя);
	НастройкиМастера.Вставить("КнопкаНазад",   КнопкаНазад.Имя);
	НастройкиМастера.Вставить("КнопкаОтмена",  КнопкаОтмена.Имя);
	
	// Таймаут вызова обработчика
	НастройкиМастера.Вставить("ТаймаутОжиданияДлительнойОперации", 
		?( ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 5, 3) );
		
	// Для обработки длительных операций
	НастройкиМастера.Вставить("ИдентификаторФоновогоЗадания");
	НастройкиМастера.Вставить("АдресРезультатаФоновогоЗадания");
	
	// Для хранения пользовательских параметров
	НастройкиМастера.Вставить("ПользовательскиеПараметры", Новый Соответствие);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить( Новый РеквизитФормы("НастройкиПошаговогоМастера", Новый ОписаниеТипов) );
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ЭтотОбъект.НастройкиПошаговогоМастера = НастройкиМастера;
КонецПроцедуры

// Добавляет шаг мастера. Переходы между страницами будут происходить согласно порядку добавления.
//
// Параметры:
//
//     Страница - ГруппаФормы - Группа-страница, содержащая элементы текущего шага страницы
// 
//     Действия - Структура - Описание действий, возможных на текущем шаге. Поля структуры:
//
//          ПриАктивации      - Строка - Необязательное имя процедуры, которая будет выполнена перед активацией страницы
//                                       с двумя параметрами:
//                                         <Страница> - ГруппаФормы - группа-страница, которая активизируется
//                                         <ДополнительныеПараметры> - Неопределено
//
//          ПередДействиемДалее  - Строка - Необязательное имя процедуры, которая будет выполнена при нажатии кнопки "Далее",
//                                          перед переходом на следующую страницу. Процедура будет вызвана с двумя параметрами:
//                                            <ПараметрыШага> - служебный реквизит. При успешном завершении цепочки немодальных 
//                                                              вызовов последняя процедура-обработчик должна произвести вызов
//                                                              ЗавершитьШагМастера(ПараметрыШага), подтверждая действие.
//                                           <ДополнительныеПараметры> - Неопределено
//
//          ПередДействиемНазад  - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки "Назад"
//
//          ПередДействиемОтмена - Строка - Аналогично ПередДействиемДалее, описывает поведение при нажатии кнопки "Отмена"
//
//          ПриОбработкеОжидания - Строка - Необязательное имя процедуры, которая будет периодически вызываться с двумя 
//                                          параметрами:
//                                            <Прекратить> - Если при выходе из процедуры установить в значение Истина, то
//                                                           периодические вызовы будут прекращены.
//                                            <ДополнительныеПараметры> - Неопределено
//
//      Кнопки - Структура - описание кнопок на текущем шаге. Поля структуры:
//
//          Далее  - Структура - Описание кнопки "Далее". поля: Заголовок, Подсказка, Доступность, Видимость, КнопкаПоУмолчанию.
//                               Пустая подсказка заменяется на заголовок. По умолчанию будут использованы значения:
//                               Заголовок = "Далее >", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Истина;
//
//          Назад  - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                               Заголовок = "< Назад", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
//          Отмена - Структура - Аналогично кнопке "Далее", значения по умолчанию:
//                               Заголовок = "Отмена", Доступность = Истина, Видимость = Истина, КнопкаПоУмолчанию = Ложь;
//
// Для составления параметров рекомендуется использовать вспомогательные методы "ДобавитьШагМастера", "ДействиеШагаМастера", "КнопкаШагаМастера"
//
&НаСервере
Процедура ДобавитьШагМастера(Знач Страница, Знач Действия, Знач Кнопки)
	
	// Умолчания
	ОписаниеШага = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена, ПриОбработкеОжидания");
	
	ПоляКнопки = "Доступность, Видимость, КнопкаПоУмолчанию, Подсказка";
	
	ОписаниеШага.Вставить("КнопкаДалее", Новый Структура(ПоляКнопки, Истина, Истина, Истина));
	ОписаниеШага.КнопкаДалее.Вставить("Заголовок", НСтр("ru='Далее'") + " >" );
	
	ОписаниеШага.Вставить("КнопкаНазад", Новый Структура(ПоляКнопки, Истина, Истина, Ложь));
	ОписаниеШага.КнопкаНазад.Вставить("Заголовок", "< " + НСтр("ru='Назад'"));
	
	ОписаниеШага.Вставить("КнопкаОтмена",Новый Структура(ПоляКнопки, Истина, Истина, Ложь));
	ОписаниеШага.КнопкаОтмена.Вставить("Заголовок", НСтр("ru='Отмена'"));
	
	ОписаниеШага.Вставить("Страница", Страница.Имя);
	
	// Устанавливаем действия
	ЗаполнитьЗначенияСвойств(ОписаниеШага, Действия);
	
	Если Кнопки.Свойство("Далее") Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеШага.КнопкаДалее, Кнопки.Далее);
	КонецЕсли;
	Если Кнопки.Свойство("Назад") Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеШага.КнопкаНазад, Кнопки.Назад);
	КонецЕсли;
	Если Кнопки.Свойство("Отмена") Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеШага.КнопкаОтмена, Кнопки.Отмена);
	КонецЕсли;

	ЭтотОбъект.НастройкиПошаговогоМастера.Шаги.Добавить(ОписаниеШага);
КонецПроцедуры

// Вспомогательное формирование структуры, описывающей действие
//
// Параметры:
//     Идентификатор    - Строка - Идентификатор действия, см описание метода "ДобавитьШагМастера"
//     ИмяОбработчика   - Строка - Имя процедуры, см описание метода "ДобавитьШагМастера"
//     СлужебныеДанные  - Структура - Накапливает значения.
//
// Возвращаемое значение - Структура - СлужебныеДанные с добавленными полями
&НаСервере
Функция ДействиеШагаМастера(Знач Идентификатор, Знач ИмяОбработчика, СлужебныеДанные = Неопределено)
	Если СлужебныеДанные = Неопределено Тогда
		СлужебныеДанные = Новый Структура;
	КонецЕсли;
	СлужебныеДанные.Вставить(Идентификатор, ИмяОбработчика);;
	Возврат СлужебныеДанные;
КонецФункции

// Вспомогательное формирование структуры, описывающей кнопку
//
// Параметры:
//     Идентификатор     - Строка - Идентификатор кнопки, может быть "Далее", "Назад" или "Отмена", 
//                                  см описание метода "ДобавитьШагМастера"
//     Заголовок         - Строка - Заголовок кнопки
//     Подсказка         - Строка - Подсказка для кнопки
//     Видимость         - Булево - параметр отображения кнопки
//     Доступность       - Булево - параметр отображения кнопки
//     КнопкаПоУмолчанию - Булево - параметр отображения кнопки
//     СлужебныеДанные   - Структура - Накапливает значения
//
// Возвращаемое значение - Структура - СлужебныеДанные с добавленными полями
//
&НаСервере
Функция КнопкаШагаМастера(Знач Идентификатор, Знач Заголовок = "", Знач Подсказка = "", Знач Видимость = Истина, Знач Доступность = Истина, Знач КнопкаПоУмолчанию = Ложь, Знач СлужебныеДанные = Неопределено)
	Если СлужебныеДанные = Неопределено Тогда
		СлужебныеДанные = Новый Структура;
	КонецЕсли;
	
	ОписаниеКнопки = Новый Структура;
	ОписаниеКнопки.Вставить("Заголовок", Заголовок);
	ОписаниеКнопки.Вставить("Подсказка", ?(ПустаяСтрока(Подсказка), Заголовок, Подсказка));
	
	ОписаниеКнопки.Вставить("Доступность", Доступность);
	ОписаниеКнопки.Вставить("Видимость", Видимость);
	ОписаниеКнопки.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчанию);
	
	СлужебныеДанные.Вставить(Идентификатор, ОписаниеКнопки);
	Возврат СлужебныеДанные;
КонецФункции

// Читает пользовательский параметр мастера
&НаКлиентеНаСервереБезКонтекста
Функция ПрочитатьПараметрПользователяМастера(Форма, Знач ИмяПараметраМастера)
	
	Возврат Форма.НастройкиПошаговогоМастера.ПользовательскиеПараметры[ИмяПараметраМастера];
	
КонецФункции

// Устанавливает пользовательский параметр мастера
&НаКлиентеНаСервереБезКонтекста
Функция УстановитьПараметрПользователяМастера(Форма, Знач ИмяПараметраМастера, Знач ЗначениеПараметраМастера)
	
	Форма.НастройкиПошаговогоМастера.ПользовательскиеПараметры.Вставить(ИмяПараметраМастера, ЗначениеПараметраМастера);
	
КонецФункции

// Устанавливает начальную страницу для первого запуска мастера
//
// Параметры:
//     СтартоваяСтраница - Число, Строка, ГруппаФормы - Номер шага, группа-страница, или ее идентификатор
//
&НаКлиенте
Процедура УстановитьНачальнуюСтраницуМастера(Знач Страница)
	
	ЭтотОбъект.НастройкиПошаговогоМастера.СтраницаСтарта = НомерШагаМастераПоИдентификатору(Страница);
	
КонецПроцедуры

// Запускает начальную работу мастера с шага, установленного предварительно при помощи "УстановитьНачальнуюСтраницуМастера"
&НаКлиенте
Процедура ЗапуститьРаботуМастера()
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	Если НастройкиМастера.СтраницаСтарта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Перед запуском мастера должна быть установлена начальная страница.'");
		
	ИначеЕсли НастройкиМастера.СтраницаСтарта = -1 Тогда
		// Разогрев. Проверяем наличие обработчиков действий у всех шагов
		ВозможныеДействия = Новый Структура("ПриАктивации, ПередДействиемДалее, ПередДействиемНазад, ПередДействиемОтмена, ПриОбработкеОжидания");
		Для Каждого ОписаниеШага Из НастройкиМастера.Шаги Цикл
			Для Каждого КлючЗначение Из ВозможныеДействия Цикл
				ИмяДействия = КлючЗначение.Ключ;
				ИмяОбработчика = ОписаниеШага[ИмяДействия];
				Если Не ПустаяСтрока(ИмяОбработчика) Тогда
					Попытка
						Тест = Новый ОписаниеОповещения(ИмяОбработчика, ЭтотОбъект);
					Исключение
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка создания обработчика события %1 для страницы %2, не определена процедура %3'"),
							ИмяДействия, 
							ОписаниеШага.Страница, 
							ИмяОбработчика
						);
						ВызватьИсключение Текст;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Фактический запуск
		ПерейтиНаШагМастера(НастройкиМастера.НомерТекущегоШага, Истина);
	Иначе
		// По умолчанию все отключено
		Элементы[НастройкиМастера.КнопкаДалее].Видимость  = Ложь;
		Элементы[НастройкиМастера.КнопкаНазад].Видимость  = Ложь;
		Элементы[НастройкиМастера.КнопкаОтмена].Видимость = Ложь;
		
		// Отложенный запуск
		ЭтотОбъект.НастройкиПошаговогоМастера.НомерТекущегоШага = НастройкиМастера.СтраницаСтарта;
		ЭтотОбъект.НастройкиПошаговогоМастера.СтраницаСтарта    = -1;
		ПодключитьОбработчикОжидания("ЗапуститьРаботуМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

// Выполняет переключение мастера на следующую или предыдущую страницу.
//
// Параметры:
//     КодКоманды - Строка - Идентификатор действия, может принимать значения "Далее", "Назад" или "Отмена"
//
&НаКлиенте
Процедура ШагМастера(Знач КодКоманды)
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	Если КодКоманды = "Далее" Тогда
		Направление = 1;
	ИначеЕсли КодКоманды = "Назад" Тогда
		Направление = -1;
	ИначеЕсли КодКоманды = "Отмена" Тогда
		Направление = 0;
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректная команда шага помощника'");
	КонецЕсли;
		
	ОписаниеШага = НастройкиМастера.Шаги[НастройкиМастера.НомерТекущегоШага];
	
	// Останавливаем обработчик, если есть
	Если ОписаниеШага.ПриОбработкеОжидания <> Неопределено Тогда
		ОтключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера");
	КонецЕсли;
	
	// Отрабатываем уход с текущей страницы
	Если Направление = 1 Тогда
		Действие = ОписаниеШага.ПередДействиемДалее;
		
	ИначеЕсли Направление = -1 Тогда
		Действие = ОписаниеШага.ПередДействиемНазад;
		
	Иначе
		Действие = ОписаниеШага.ПередДействиемОтмена;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Действие) Тогда
		ЗавершитьШагМастера(Направление);
	Иначе
		Оповещение = Новый ОписаниеОповещения(Действие, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Направление);
	КонецЕсли;
КонецПроцедуры

// Выполняет безусловное позиционирование мастера на страницу
//
// Параметры:
//     ИдентификаторШага   - Число, Строка, ГруппаФормы - Номер, группа-страница формы или ее имя для перехода
//     ИнициироватьСобытия - Булево - Флаг того, что необходимо вызывать события, связанные с активацией шага
//
&НаКлиенте
Процедура ПерейтиНаШагМастера(Знач ИдентификаторШага, Знач ИнициироватьСобытия = Ложь)
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	СледующийШаг = НомерШагаМастераПоИдентификатору(ИдентификаторШага);
	Если СледующийШаг = Неопределено Тогда
		Ошибка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден шаг помощника %1'"),
			ИдентификаторШага
		);
		ВызватьИсключение Ошибка;
	КонецЕсли;
		
	ОписаниеШага = НастройкиМастера.Шаги[НастройкиМастера.НомерТекущегоШага];
	
	// Останавливаем обработчик, если есть
	Если ОписаниеШага.ПриОбработкеОжидания <> Неопределено Тогда
		ОтключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера");
	КонецЕсли;
	
	// И запускаем новую страницу
	ШагМастераЗавершениеБезусловно(СледующийШаг, ИнициироватьСобытия);
КонецПроцедуры

// Подтверждает действие шага мастера и вызывает переключение страницы
//
// Параметры:
//     ПараметрыШага - Служебный реквизит, полученный в обработчике перед началом действия
//
&НаКлиенте
Процедура ЗавершитьШагМастера(Знач ПараметрыШага)
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	СледующийШаг = НастройкиМастера.НомерТекущегоШага + ПараметрыШага;
	ПоследнийШаг = НастройкиМастера.Шаги.ВГраница();
	
	Если ПараметрыШага = 0 Тогда
		// Подтверждение отмены - ничего не делаем
		Возврат;
		
	ИначеЕсли ПараметрыШага = 1 И СледующийШаг > ПоследнийШаг Тогда
		// Попытка сделать шаг за пределы вперед
		ВызватьИсключение НСтр("ru='Попытка выхода за последний шаг мастера'");
		
	ИначеЕсли ПараметрыШага = -1 И СледующийШаг < 0 Тогда
		// Попытка сделать шаг за пределы назад
		ВызватьИсключение НСтр("ru='Попытка выхода назад из первого шага мастера'");
		
	КонецЕсли;
	
	ШагМастераЗавершениеБезусловно(СледующийШаг);
КонецПроцедуры

&НаКлиенте
Процедура ШагМастераЗавершениеБезусловно(Знач СледующийШаг, Знач ИнициироватьСобытия = Истина)
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	ОписаниеШага = НастройкиМастера.Шаги[СледующийШаг];
	ПоследнийШаг = НастройкиМастера.Шаги.ВГраница();
	
	// Переключаем на новую страницу
	Элементы[НастройкиМастера.ГруппаСтраниц].ТекущаяСтраница = Элементы[ОписаниеШага.Страница];
	
	// Обновляем кнопки
	ОбновитьСвойстваКнопкиМастера(НастройкиМастера.КнопкаДалее,  ОписаниеШага.КнопкаДалее);
	ОбновитьСвойстваКнопкиМастера(НастройкиМастера.КнопкаНазад,  ОписаниеШага.КнопкаНазад);
	ОбновитьСвойстваКнопкиМастера(НастройкиМастера.КнопкаОтмена, ОписаниеШага.КнопкаОтмена);
	
	// Успешно перешли
	ЭтотОбъект.НастройкиПошаговогоМастера.НомерТекущегоШага = СледующийШаг;
	
	Если ИнициироватьСобытия И Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		// Отрабатываем "ПриАктивации" новой страницы, он же запустит ожидание
		ПодключитьОбработчикОжидания("ОбработкаАктивацииСтраницыМастера", 0.1, Истина);
		
	ИначеЕсли Не ПустаяСтрока(ОписаниеШага.ПриОбработкеОжидания) Тогда
		// Запускаем обработчик ожидания, если надо
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", 0.1, Истина);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойстваКнопкиМастера(Знач ИмяКнопки, Знач Описание)
	
	КнопкаМастера = Элементы[ИмяКнопки];
	ЗаполнитьЗначенияСвойств(КнопкаМастера, Описание);
	КнопкаМастера.РасширеннаяПодсказка.Заголовок = Описание.Подсказка;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивацииСтраницыМастера()
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	ОписаниеШага = НастройкиМастера.Шаги[НастройкиМастера.НомерТекущегоШага];
	Если Не ПустаяСтрока(ОписаниеШага.ПриАктивации) Тогда
		Оповещение = Новый ОписаниеОповещения(ОписаниеШага.ПриАктивации, ЭтотОбъект);
		ВыполнитьОбработкуОповещения(Оповещение, Элементы[ОписаниеШага.Страница]);
	КонецЕсли;
	
	// И запускаем ожидание, если надо
	Если Не ПустаяСтрока(ОписаниеШага.ПриОбработкеОжидания) Тогда
		// Первый запуск быстрый
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

// Может быть номер шага или группа-страница, или ее идентификатор
&НаКлиенте
Функция НомерШагаМастераПоИдентификатору(Знач ИдентификаторШага)
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	НомерШага = Неопределено;
	
	ТипПараметра = ТипЗнч(ИдентификаторШага);
	Если ТипПараметра = Тип("Число") Тогда
		НомерШага = ИдентификаторШага;
	Иначе
		ИмяПоиска = ?(ТипПараметра = Тип("ГруппаФормы"), ИдентификаторШага.Имя, ИдентификаторШага); 
		Для НомерШага=0 По НастройкиМастера.Шаги.ВГраница() Цикл
			Если НастройкиМастера.Шаги[НомерШага].Страница = ИмяПоиска Тогда
				НомерШага = НомерШага;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НомерШага;
КонецФункции

// Возвращает флаг отмены
&НаКлиенте
Функция ОбработкаОжиданияСтраницыМастера()
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	ОписаниеШага = НастройкиМастера.Шаги[НастройкиМастера.НомерТекущегоШага];
	Действие = ОписаниеШага.ПриОбработкеОжидания;
	Если ПустаяСтрока(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(Действие, ЭтотОбъект);
	
	Прекратить = Ложь;
	ВыполнитьОбработкуОповещения(Оповещение, Прекратить);
	Продолжать = Не Прекратить;
	
	Если Продолжать Тогда
		ПодключитьОбработчикОжидания("ОбработкаОжиданияСтраницыМастера", НастройкиМастера.ТаймаутОжиданияДлительнойОперации, Истина);
	КонецЕсли;
	
	Возврат Продолжать;
КонецФункции

// Стартует длительную операцию мастера
// 
// Параметры:
//     ИмяМетода           - Строка - Имя метода для фонового задания
//     ПараметрыМетода     - Массив - Параметры метода для фонового задания.
//     ВозвращаетРезультат - Булево - Флаг необходимости получения результатов. Если установлен в Истина, то
//                                    последним параметром вызова добавляется адрес хранилища для результата
//     ОписаниеМетода      - Строка - Необязательное описание метода для отображения в списке фоновых заданий
//
&НаСервере
Функция ЗапуститьДлительнуюОперациюМастера(Знач ИмяМетода, Знач ПараметрыМетода, Знач ВозвращаетРезультат = Ложь, Знач ОписаниеМетода = "")
	
	// Отменяем возможно незавершенное предыдущее
	ОтменитьДлительнуюОперациюМастера();
	
	Если ВозвращаетРезультат Тогда
		ЭтотОбъект.НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ПараметрыФоновогоМетода = Новый Массив(Новый ФиксированныйМассив(ПараметрыМетода));
		ПараметрыФоновогоМетода.Добавить(ЭтотОбъект.НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания);
	Иначе
		ЭтотОбъект.НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Неопределено;
		ПараметрыФоновогоМетода = ПараметрыМетода;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыФоновогоМетода, , ОписаниеМетода);
	ЭтотОбъект.НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания = Задание.УникальныйИдентификатор;
КонецФункции

// Получает состояние текущей длительной операцию
// 
// Возвращаемое значение - Структура - Описание состояния с полями:
//     Завершено             - Булево              - Флаг активности длительной операции
//     ИнформацияОбОшибке    - ИнформацияОбОшибке  - Если операция завершилась аварийно, то содержит информацию почему
//     СообщенияПользователю - ФиксированныйМассив - Объекты типа "СообщениеПользователю"
//     Результат             - Произвольный        - Если длительное задание было запущено с флагом возвращения результата,
//                                                   то содержит текущее значение результата.
//
&НаСервере
Функция СостояниеДлительнойОперацииМастера()
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	Данные = Новый Структура("Завершено, Результат, ИнформацияОбОшибке", Истина);
	Данные.Вставить("СообщенияПользователю", Новый ФиксированныйМассив(Новый Массив));

	Если НастройкиМастера.ИдентификаторФоновогоЗадания = Неопределено Тогда
		Возврат Данные;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(НастройкиМастера.ИдентификаторФоновогоЗадания);
	Если Задание <> Неопределено Тогда
		// Все непонятное - завершено, см значения по умолчанию
		Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
			Данные.ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке);
		КонецЕсли;
		Данные.Завершено = Задание.Состояние <> СостояниеФоновогоЗадания.Активно;
		Если Данные.Завершено Тогда
			// Неперехваченные сообщения фонового задания
			НакопленныеСообщения = Задание.ПолучитьСообщенияПользователю(Истина);
			Если НакопленныеСообщения <> Неопределено Тогда
				Данные.СообщенияПользователю = НакопленныеСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(НастройкиМастера.АдресРезультатаФоновогоЗадания) Тогда
		Данные.Результат = ПолучитьИзВременногоХранилища(НастройкиМастера.АдресРезультатаФоновогоЗадания);
	КонецЕсли;
	
	Если Данные.Завершено Тогда
		ЭтотОбъект.НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания = Неопределено;
		ЭтотОбъект.НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Неопределено;
	КонецЕсли;
	
	Возврат Данные;
КонецФункции

// Отменяет текущую длительную операцию
&НаСервере
Процедура ОтменитьДлительнуюОперациюМастера()
	НастройкиМастера = ЭтотОбъект.НастройкиПошаговогоМастера;
	
	Если НастройкиМастера.ИдентификаторФоновогоЗадания <> Неопределено Тогда 
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(НастройкиМастера.ИдентификаторФоновогоЗадания);
		Если Задание <> Неопределено Тогда
			Задание.Отменить();
		КонецЕсли;
		ЭтотОбъект.НастройкиПошаговогоМастера.ИдентификаторФоновогоЗадания = Неопределено;
	КонецЕсли;
	
	ЭтотОбъект.НастройкиПошаговогоМастера.АдресРезультатаФоновогоЗадания = Неопределено;
	
КонецПроцедуры

