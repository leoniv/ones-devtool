#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Интерактивное удаление помеченных

// Удаляет помеченные объекты, используется при интерактивном удалении в фоновом задании.
//
// Параметры:
//   ПараметрыВыполнения - Структура - Параметры, необходимые для удаления.
//   АдресХранилища - Строка - Адрес временного хранилища.
//
Процедура УдалитьПомеченныеОбъектыИнтерактивно(ПараметрыВыполнения, АдресХранилища) Экспорт
	УдалитьПомеченныеОбъекты(ПараметрыВыполнения);
	ПоместитьВоВременноеХранилище(ПараметрыВыполнения, АдресХранилища);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Удаление помеченных из регламентного задания

// Удаляет помеченные объекты из регламентного задания.
Процедура УдалитьПомеченныеОбъектыИзРегламентногоЗадания() Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	УдалитьПомеченныеОбъекты(ПараметрыВыполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общая механика

// Основная механика удаления помеченных объектов.
Процедура УдалитьПомеченныеОбъекты(ПараметрыВыполнения)
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для выполнения операции.'");
	КонецЕсли;
	
	ИнициализироватьПараметры(ПараметрыВыполнения);
	
	ПрепятствующиеУдалению = Новый ТаблицаЗначений;
	ПрепятствующиеУдалению.Колонки.Добавить("УдаляемыйСсылка");
	ПрепятствующиеУдалению.Колонки.Добавить("УдаляемыйТип", Новый ОписаниеТипов("Тип"));
	ПрепятствующиеУдалению.Колонки.Добавить("ОбнаруженныйСсылка");
	ПрепятствующиеУдалению.Колонки.Добавить("ОбнаруженныйТип", Новый ОписаниеТипов("Тип"));
	ПрепятствующиеУдалению.Колонки.Добавить("ОбнаруженныйПометкаУдаления", Новый ОписаниеТипов("Булево"));
	
	ПараметрыВыполнения.Вставить("Удаленные",              Новый Массив);
	ПараметрыВыполнения.Вставить("НеУдаленные",            Новый Массив);
	ПараметрыВыполнения.Вставить("ПрепятствующиеУдалению", ПрепятствующиеУдалению);
	ПараметрыВыполнения.Вставить("ПовторноУдаляемые",      Новый Массив);
	ПараметрыВыполнения.Вставить("Интерактивное",          ПараметрыВыполнения.Свойство("ПериодЗаписи"));
	
	Если ПараметрыВыполнения.ПомеченныеНаУдаление = Неопределено Тогда
		Если ПараметрыВыполнения.Интерактивное Тогда
			ДлительныеОперации.СообщитьПрогресс(1, НСтр("ru = 'Поиск объектов, помеченных на удаление.'"));
		КонецЕсли;
		ПолучитьПомеченныеНаУдаление(ПараметрыВыполнения);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удаление технологических объектов (которые создавались и помечались на удаление без участия пользователя).
	Если ПараметрыВыполнения.ТехнологическиеОбъекты <> Неопределено Тогда
		КлиентОтметитьНачалоОбходаКоллекции(ПараметрыВыполнения, "ТехнологическиеОбъекты");
		Для Каждого Ссылка Из ПараметрыВыполнения.ТехнологическиеОбъекты Цикл
			УдалитьСсылку(ПараметрыВыполнения, Ссылка);
			КлиентОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, "ТехнологическиеОбъекты");
		КонецЦикла;
	КонецЕсли;
	
	// Удаление помеченных на удаление.
	КлиентОтметитьНачалоОбходаКоллекции(ПараметрыВыполнения, "ПомеченныеНаУдаление");
	Для Каждого Ссылка Из ПараметрыВыполнения.ПомеченныеНаУдаление Цикл
		Результат = УдалитьСсылку(ПараметрыВыполнения, Ссылка);
		ЗарегистрироватьРезультатУдаления(ПараметрыВыполнения, Ссылка, Результат, "ПомеченныеНаУдаление");
		КлиентОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, "ПомеченныеНаУдаление");
	КонецЦикла;
	
	// Удаление цепочек (линейно связанных объектов).
	КлиентОтметитьНачалоОбходаКоллекции(ПараметрыВыполнения, "ПовторноУдаляемые");
	Пока ПараметрыВыполнения.ПовторноУдаляемые.Количество() > 0 Цикл
		Ссылка = ПараметрыВыполнения.ПовторноУдаляемые[0];
		ПараметрыВыполнения.ПовторноУдаляемые.Удалить(0);
		
		Результат = УдалитьСсылку(ПараметрыВыполнения, Ссылка);
		
		ЗарегистрироватьРезультатУдаления(ПараметрыВыполнения, Ссылка, Результат, "ПовторноУдаляемые");
		КлиентОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, "ПовторноУдаляемые");
	КонецЦикла;
	
	// Удаление циклов (кольцевых связей объектов).
	УдалитьОставшиесяОбъектыВОднойТранзакции(ПараметрыВыполнения);
	
КонецПроцедуры

// Удаление одиночного объекта с контролем результата и откатом транзакции в случае неудачи.
Функция УдалитьСсылку(ПараметрыВыполнения, Ссылка)
	Результат = Новый Структура;
	Результат.Вставить("Успех", Неопределено);
	Результат.Вставить("ИнформацияОбОшибке", Неопределено);
	Результат.Вставить("ПрепятствующиеУдалению", Неопределено);
	Результат.Вставить("ВложенныеИПодчиненныеОбъекты", Новый Массив);
	Результат.Вставить("Количество", 0);
	
	Информация = СформироватьИнформациюОТипах(ПараметрыВыполнения, ТипЗнч(Ссылка));
	
	НачатьТранзакцию();
	Попытка
		ПопробоватьУдалитьСсылку(Ссылка, Информация, Результат);
	Исключение
		Результат.Успех = Ложь;
		Результат.ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	Если Результат.Успех Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		ЗаписатьПредупреждение(Ссылка, Результат.ИнформацияОбОшибке);
	КонецЕсли;
	
	Если ТипЗнч(Результат.ПрепятствующиеУдалению) = Тип("ТаблицаЗначений") Тогда
		Результат.ПрепятствующиеУдалению.Колонки[0].Имя = "УдаляемыйСсылка";
		Результат.ПрепятствующиеУдалению.Колонки[1].Имя = "ОбнаруженныйСсылка";
		Результат.ПрепятствующиеУдалению.Колонки[2].Имя = "ОбнаруженныйМетаданные";
		Для Каждого ОбнаруженныйСсылка Из Результат.ВложенныеИПодчиненныеОбъекты Цикл
			СтрокаТаблицы = Результат.ПрепятствующиеУдалению.Добавить();
			СтрокаТаблицы.УдаляемыйСсылка        = Ссылка;
			СтрокаТаблицы.ОбнаруженныйСсылка     = ОбнаруженныйСсылка;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Механика удаления объекта и поиска ссылок.
Процедура ПопробоватьУдалитьСсылку(Ссылка, Информация, Результат)
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Информация.ПолноеИмя);
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
	Блокировка.Заблокировать();
	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Результат.Успех = Истина; // Объект уже удален.
		Возврат;
	КонецЕсли;
	Если Объект.ПометкаУдаления <> Истина Тогда
		Результат.Успех = Ложь;
		Результат.ИнформацияОбОшибке = НСтр("ru = 'Объект не помечен на удаление.'");
		Возврат;
	КонецЕсли;
	
	НайтиВложенныеИПодчиненныеОбъекты(Ссылка, Информация, Результат);
	
	Объект.Удалить();
	
	НайтиПрепятствующиеУдалению(Ссылка, Информация, Результат);
	
	Если Результат.Количество = 0 Тогда
		Результат.Успех = Истина;
	Иначе
		Результат.Успех = Ложь;
		Результат.ИнформацияОбОшибке = НСтр("ru = 'Объект используется в других объектах программы.'");
	КонецЕсли;
КонецПроцедуры

// Поиск ссылок вложенных и подчиненных (иерархия и связь по владельцу). Выполняется до удаления.
Процедура НайтиВложенныеИПодчиненныеОбъекты(Ссылка, Информация, Результат)
	
	Если Информация.Иерархический Тогда
		Запрос = Новый Запрос(Информация.ТекстЗапросаПоИерархии);
		Запрос.УстановитьПараметр("УдаляемыйСсылка", Ссылка);
		ВложенныеОбъекты = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТаблицы Из ВложенныеОбъекты Цикл
			Результат.ВложенныеИПодчиненныеОбъекты.Добавить(СтрокаТаблицы.Ссылка);
		КонецЦикла;
		Результат.Количество = Результат.Количество + ВложенныеОбъекты.Количество();
	КонецЕсли;
	
	Если Информация.ЕстьПодчиненные Тогда
		Запрос = Новый Запрос(Информация.ТекстЗапросаПоПодчиненным);
		Запрос.УстановитьПараметр("УдаляемыйСсылка", Ссылка);
		ПодчиненныеОбъекты = Запрос.Выполнить().Выгрузить();
		Для Каждого СтрокаТаблицы Из ПодчиненныеОбъекты Цикл
			Результат.ВложенныеИПодчиненныеОбъекты.Добавить(СтрокаТаблицы.Ссылка);
		КонецЦикла;
		Результат.Количество = Результат.Количество + ПодчиненныеОбъекты.Количество();
	КонецЕсли;
	
КонецПроцедуры

// Поиск ссылок путем сканирования всех таблиц. Выполняется после удаления.
Процедура НайтиПрепятствующиеУдалению(Ссылка, Информация, Результат)
	
	ПоискСсылок = Новый Массив;
	ПоискСсылок.Добавить(Ссылка);
	
	Результат.ПрепятствующиеУдалению = НайтиПоСсылкам(ПоискСсылок);
	Результат.Количество = Результат.Количество + Результат.ПрепятствующиеУдалению.Количество();
	
КонецПроцедуры

// Удаление циклов (кольцевых связей объектов).
Процедура УдалитьОставшиесяОбъектыВОднойТранзакции(ПараметрыВыполнения)
	Перем Ссылка;
	
	// 1. Объекты, которые невозможно удалить.
	//    Получаются путем определения неразрешимых связей.
	ОбъектыКоторыеНевозможноУдалить = Новый Массив;
	ВложенныеНеразрешимыеСвязи = Новый Массив;
	
	// 1.1. Первичным критерием для определения неразрешимых связей
	//      является тот факт, что объект, препятствующий удалению, не отмечен для удаления.
	Для Каждого СтрокаТаблицы Из ПараметрыВыполнения.ПрепятствующиеУдалению Цикл
		Если ПараметрыВыполнения.НеУдаленные.Найти(СтрокаТаблицы.ОбнаруженныйСсылка) = Неопределено
			И ОбъектыКоторыеНевозможноУдалить.Найти(СтрокаТаблицы.УдаляемыйСсылка) = Неопределено Тогда
			ОбъектыКоторыеНевозможноУдалить.Добавить(СтрокаТаблицы.УдаляемыйСсылка);
			Найденные = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(Новый Структура("ОбнаруженныйСсылка", СтрокаТаблицы.УдаляемыйСсылка));
			ВложенныеНеразрешимыеСвязи.Добавить(Найденные);
		КонецЕсли;
	КонецЦикла;
	
	// 1.2. Далее при помощи массива ВложенныеНеразрешимыеСвязи
	//      получаются неразрешимые подчиненные - "связи связей", "связи связей связей" и т.д...
	Индекс = 0;
	Пока Индекс < ВложенныеНеразрешимыеСвязи.Количество() Цикл
		Найденные = ВложенныеНеразрешимыеСвязи[Индекс];
		Индекс = Индекс + 1;
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			Если ОбъектыКоторыеНевозможноУдалить.Найти(СтрокаТаблицы.УдаляемыйСсылка) = Неопределено Тогда
				ОбъектыКоторыеНевозможноУдалить.Добавить(СтрокаТаблицы.УдаляемыйСсылка);
				Найденные = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(Новый Структура("ОбнаруженныйСсылка", СтрокаТаблицы.УдаляемыйСсылка));
				ВложенныеНеразрешимыеСвязи.Добавить(Найденные);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// 2. Объекты, которые можно попробовать удалить в одной транзакции.
	//    = Массив удаляемых - Массив объектов, которые невозможно удалить.
	МассивСсылок = Новый Массив;
	Для Каждого Ссылка Из ПараметрыВыполнения.НеУдаленные Цикл
		Если ОбъектыКоторыеНевозможноУдалить.Найти(Ссылка) = Неопределено Тогда
			МассивСсылок.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Количество = МассивСсылок.Количество();
	Если Количество = 0 Тогда
		Возврат; // Нет объектов для удаления.
	КонецЕсли;
	
	// 3. Включение всех объектов в одну транзакцию и попытка удалить.
	Успех = Ложь;
	НачатьТранзакцию();
	Попытка
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс = Количество - Номер;
			Ссылка = МассивСсылок[ОбратныйИндекс];
			
			Информация = СформироватьИнформациюОТипах(ПараметрыВыполнения, ТипЗнч(Ссылка));
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Информация.ПолноеИмя);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			Блокировка.Заблокировать();
			
			Объект = Ссылка.ПолучитьОбъект();
			Если Объект = Неопределено Тогда // Объект уже удален.
				МассивСсылок.Удалить(ОбратныйИндекс);
				Продолжить;
			КонецЕсли;
			Если Объект.ПометкаУдаления <> Истина Тогда
				МассивСсылок.Удалить(ОбратныйИндекс); // Объект уже не помечен на удаление.
				Продолжить;
			КонецЕсли;
			
			Объект.Удалить();
		КонецЦикла;
		Ссылка = Неопределено;
		
		Если МассивСсылок.Количество() > 0 Тогда
			ПрепятствующиеУдалению = НайтиПоСсылкам(МассивСсылок);
			Если ПрепятствующиеУдалению.Количество() = 0 Тогда
				Успех = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ЗаписатьПредупреждение(Ссылка, ИнформацияОбОшибке());
	КонецПопытки;
	
	// 4. Регистрация результата (если успех).
	Если Успех Тогда
		ЗафиксироватьТранзакцию();
		
		Для Каждого Ссылка Из МассивСсылок Цикл
			// Регистрация ссылки в коллекции удаленных.
			Если ПараметрыВыполнения.Удаленные.Найти(Ссылка) = Неопределено Тогда
				ПараметрыВыполнения.Удаленные.Добавить(Ссылка);
			КонецЕсли;
			
			// Удаление ссылки из коллекции не удаленных.
			Индекс = ПараметрыВыполнения.НеУдаленные.Найти(Ссылка);
			Если Индекс <> Неопределено Тогда
				ПараметрыВыполнения.НеУдаленные.Удалить(Индекс);
			КонецЕсли;
			
			// Очистка информации о связях.
			Найденные = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(Новый Структура("УдаляемыйСсылка", Ссылка));
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				ПараметрыВыполнения.ПрепятствующиеУдалению.Удалить(СтрокаТаблицы);
			КонецЦикла;
		КонецЦикла;
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Регистрация результата удаления и заполнение коллекции ПовторноУдаляемые.
Процедура ЗарегистрироватьРезультатУдаления(ПараметрыВыполнения, Ссылка, Результат, ИмяКоллекции)
	Если Результат.Успех Тогда
		// Регистрация ссылки в коллекции удаленных.
		ПараметрыВыполнения.Удаленные.Добавить(Ссылка);
		
		// Исключение удаленного объекта из причин неудаления других объектов. Поиск.
		НеактуальныеПричины = ПараметрыВыполнения.ПрепятствующиеУдалению.НайтиСтроки(Новый Структура("ОбнаруженныйСсылка", Ссылка));
		Для Каждого Причина Из НеактуальныеПричины Цикл
			// Удаление причины неудаления другого объекта.
			УдаляемыйСсылка = Причина.УдаляемыйСсылка;
			ПараметрыВыполнения.ПрепятствующиеУдалению.Удалить(Причина);
			// Поиск других причин неудаления другого объекта.
			Если ПараметрыВыполнения.ПрепятствующиеУдалению.Найти(УдаляемыйСсылка, "УдаляемыйСсылка") = Неопределено Тогда
				// Устранены все причины неудаления другого объекта.
				// Регистрация другого объекта для повторного удаления.
				ПараметрыВыполнения.ПовторноУдаляемые.Добавить(УдаляемыйСсылка);
				Если ИмяКоллекции = "ПовторноУдаляемые" И ПараметрыВыполнения.Интерактивное Тогда
					ПараметрыВыполнения.Всего = ПараметрыВыполнения.Всего + 1;
				КонецЕсли;
				// Очистка записи о другом объекте из коллекции "НеУдаленные".
				Индекс = ПараметрыВыполнения.НеУдаленные.Найти(УдаляемыйСсылка);
				Если Индекс <> Неопределено Тогда
					ПараметрыВыполнения.НеУдаленные.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе // Не успешно.
		
		ПараметрыВыполнения.НеУдаленные.Добавить(Ссылка);
		
		Если ТипЗнч(Результат.ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда // Текст ошибки
			Причина = ПараметрыВыполнения.ПрепятствующиеУдалению.Добавить();
			Причина.УдаляемыйСсылка    = Ссылка;
			Причина.УдаляемыйТип       = ТипЗнч(Причина.УдаляемыйСсылка);
			Причина.ОбнаруженныйСсылка = КраткоеПредставлениеОшибки(Результат.ИнформацияОбОшибке);
			Причина.ОбнаруженныйТип    = Тип("Строка");
			
			СформироватьИнформациюОТипах(ПараметрыВыполнения, Причина.УдаляемыйТип);
		Иначе // Регистрация препятствующих удалению.
			Для Каждого СтрокаТаблицы Из Результат.ПрепятствующиеУдалению Цикл
				// Регистрация причины неудаления.
				Причина = ПараметрыВыполнения.ПрепятствующиеУдалению.Добавить();
				ЗаполнитьЗначенияСвойств(Причина, СтрокаТаблицы);
				Причина.УдаляемыйТип    = ТипЗнч(Причина.УдаляемыйСсылка);
				Причина.ОбнаруженныйТип = ТипЗнч(Причина.ОбнаруженныйСсылка);
				
				Если СтрокаТаблицы.ОбнаруженныйСсылка = Неопределено Тогда
					Если Метаданные.Константы.Содержит(СтрокаТаблицы.ОбнаруженныйМетаданные) Тогда
						Причина.ОбнаруженныйТип = Тип("КонстантаМенеджерЗначения." + СтрокаТаблицы.ОбнаруженныйМетаданные.Имя);
					Иначе
						Причина.ОбнаруженныйСсылка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Обнаружены неразрешимые ссылки (%1)'"),
							СтрокаТаблицы.ОбнаруженныйМетаданные.Представление());
						Причина.ОбнаруженныйТип    = Тип("Строка");
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// Регистрация информации об объектах метаданных (если требуется).
				СформироватьИнформациюОТипах(ПараметрыВыполнения, Причина.УдаляемыйТип);
				ОбнаруженныйИнформация = СформироватьИнформациюОТипах(ПараметрыВыполнения, Причина.ОбнаруженныйТип);
				
				// Заполнение подчиненных полей.
				Если ОбнаруженныйИнформация.Ссылочный Тогда
					Причина.ОбнаруженныйПометкаУдаления = Причина.ОбнаруженныйСсылка.ПометкаУдаления;
				Иначе
					Причина.ОбнаруженныйПометкаУдаления = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; // Результат.Успех.
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Передача информации на клиент

Процедура КлиентОтметитьНачалоОбходаКоллекции(ПараметрыВыполнения, ИмяКоллекции)
	Если Не ПараметрыВыполнения.Интерактивное Тогда
		Возврат;
	КонецЕсли;
	ПараметрыВыполнения.Вставить("Всего", ПараметрыВыполнения[ИмяКоллекции].Количество());
	ПараметрыВыполнения.Вставить("Номер", 0);
	ПараметрыВыполнения.Вставить("Время", '00010101');
КонецПроцедуры

Процедура КлиентОтметитьПрогрессОбходаКоллекции(ПараметрыВыполнения, ИмяКоллекции)
	Если Не ПараметрыВыполнения.Интерактивное Тогда
		Возврат;
	КонецЕсли;
	
	// Регистрация прогресса.
	ПараметрыВыполнения.Номер = ПараметрыВыполнения.Номер + 1;
	
	// Проверка что подошло время передачи инфорации на клиент.
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	Если ТекущаяДатаСеанса < ПараметрыВыполнения.Время Тогда
		Возврат;
	КонецЕсли;
	
	// Установка следующего времени передачи инфорации на клиент.
	ПараметрыВыполнения.Время = ТекущаяДатаСеанса + ПараметрыВыполнения.ПериодЗаписи;
	
	// Подготовка передаваемых параметров.
	Если ИмяКоллекции = "ТехнологическиеОбъекты" Тогда
		
		Процент = 5 + 5*ПараметрыВыполнения.Номер/ПараметрыВыполнения.Всего;
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подготовка к удалению (%1 из %2).'"),
			Формат(ПараметрыВыполнения.Номер, "ЧН=0; ЧГ="),
			Формат(ПараметрыВыполнения.Всего, "ЧН=0; ЧГ="));
		
	ИначеЕсли ИмяКоллекции = "ПомеченныеНаУдаление" Тогда
		
		НеУдалено = ПараметрыВыполнения.НеУдаленные.Количество();
		Если НеУдалено = 0 Тогда
			Шаблон = НСтр("ru = 'Удалено: %1 из %2 объектов.'");
		Иначе
			Шаблон = НСтр("ru = 'Обработано: %1 из %2 объектов, из них не удалено: %3.'");
		КонецЕсли;
		Процент = 10 + 80*ПараметрыВыполнения.Номер/ПараметрыВыполнения.Всего;
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			Формат(ПараметрыВыполнения.Номер, "ЧН=0; ЧГ="),
			Формат(ПараметрыВыполнения.Всего, "ЧН=0; ЧГ="),
			Формат(НеУдалено, "ЧН=0; ЧГ="));
		
	ИначеЕсли ИмяКоллекции = "ПовторноУдаляемые" Тогда
		
		Процент = 90 + 10*ПараметрыВыполнения.Номер/ПараметрыВыполнения.Всего;
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Повторная проверка не удаленных объектов: %1 из %2.'"),
			Формат(ПараметрыВыполнения.Номер, "ЧН=0; ЧГ="),
			Формат(ПараметрыВыполнения.Всего, "ЧН=0; ЧГ="));
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	// Регистрация сообщения для чтения из клиентского сеанса.
	ДлительныеОперации.СообщитьПрогресс(Процент, Текст);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные методы

// Инициализирует структуру параметров, необходимых для выполнения других служебных методов.
Процедура ИнициализироватьПараметры(ПараметрыВыполнения) Экспорт
	// Определение параметров работы программы.
	Если Не ПараметрыВыполнения.Свойство("МодельСервиса") Тогда
		ПараметрыВыполнения.Вставить("МодельСервиса", ОбщегоНазначенияПовтИсп.РазделениеВключено());
		Если ПараметрыВыполнения.МодельСервиса Тогда
			ПараметрыВыполнения.Вставить("ВОбластиДанных", ОбщегоНазначения.ИспользованиеРазделителяСеанса());
			ПараметрыВыполнения.Вставить("РазделительОсновныхДанных",        ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных());
			ПараметрыВыполнения.Вставить("РазделительВспомогательныхДанных", ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных());
		КонецЕсли;
	КонецЕсли;
	Если Не ПараметрыВыполнения.Свойство("ПомеченныеНаУдаление") Тогда
		ПараметрыВыполнения.Вставить("ПомеченныеНаУдаление", Неопределено);
	КонецЕсли;
	Если Не ПараметрыВыполнения.Свойство("ИнформацияОТипах") Тогда
		ПараметрыВыполнения.Вставить("ИнформацияОТипах", Новый Соответствие);
	КонецЕсли;
	Если Не ПараметрыВыполнения.Свойство("ТехнологическиеОбъекты") Тогда
		ПараметрыВыполнения.Вставить("ТехнологическиеОбъекты", Неопределено);
	КонецЕсли;
КонецПроцедуры

// Формирует массив помеченных на удаление с учетом разделения.
Процедура ПолучитьПомеченныеНаУдаление(ПараметрыВыполнения) Экспорт
	ПараметрыВыполнения.ПомеченныеНаУдаление = Новый Массив;
	ПараметрыВыполнения.ТехнологическиеОбъекты = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение списка помеченных на удаление.
	ПомеченныеНаУдаление = НайтиПомеченныеНаУдаление();
	
	// Распределение помеченных на удаление по коллекциям.
	Для Каждого Ссылка Из ПомеченныеНаУдаление Цикл
		Информация = СформироватьИнформациюОТипах(ПараметрыВыполнения, ТипЗнч(Ссылка));
		
		Если ПараметрыВыполнения.МодельСервиса
			И ПараметрыВыполнения.ВОбластиДанных 
			И Не Информация.Разделенный Тогда
			Продолжить; // Неразделенные объекты запрещено изменять из области данных.
		КонецЕсли;
		
		Если Информация.Технический = Истина Тогда
			ПараметрыВыполнения.ТехнологическиеОбъекты.Добавить(Ссылка);
		Иначе
			ПараметрыВыполнения.ПомеченныеНаУдаление.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Формирует информацию о типе объекта метаданных, как то: полное имя, представления, вид и т.п.
Функция СформироватьИнформациюОТипах(ПараметрыВыполнения, Тип) Экспорт
	Информация = ПараметрыВыполнения.ИнформацияОТипах.Получить(Тип);
	Если Информация <> Неопределено Тогда
		Возврат Информация;
	КонецЕсли;
	
	Информация = Новый Структура("ПолноеИмя, ПредставлениеЭлемента, ПредставлениеСписка,
	|Вид, Ссылочный, Технический, Разделенный,
	|Иерархический, ТекстЗапросаПоИерархии,
	|ЕстьПодчиненные, ТекстЗапросаПоПодчиненным");
	
	// Поиск объекта метаданных.
	ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
	
	// Заполнение базовой информации.
	Информация.ПолноеИмя = ВРег(ОбъектМетаданных.ПолноеИмя());
	
	// Представления: элемента и списка.
	СтандартныеСвойства = Новый Структура("ПредставлениеОбъекта, РасширенноеПредставлениеОбъекта, ПредставлениеСписка, РасширенноеПредставлениеСписка");
	ЗаполнитьЗначенияСвойств(СтандартныеСвойства, ОбъектМетаданных);
	Если ЗначениеЗаполнено(СтандартныеСвойства.ПредставлениеОбъекта) Тогда
		Информация.ПредставлениеЭлемента = СтандартныеСвойства.ПредставлениеОбъекта;
	ИначеЕсли ЗначениеЗаполнено(СтандартныеСвойства.РасширенноеПредставлениеОбъекта) Тогда
		Информация.ПредставлениеЭлемента = СтандартныеСвойства.РасширенноеПредставлениеОбъекта;
	Иначе
		Информация.ПредставлениеЭлемента = ОбъектМетаданных.Представление();
	КонецЕсли;
	Если ЗначениеЗаполнено(СтандартныеСвойства.ПредставлениеСписка) Тогда
		Информация.ПредставлениеСписка = СтандартныеСвойства.ПредставлениеСписка;
	ИначеЕсли ЗначениеЗаполнено(СтандартныеСвойства.РасширенноеПредставлениеСписка) Тогда
		Информация.ПредставлениеСписка = СтандартныеСвойства.РасширенноеПредставлениеСписка;
	Иначе
		Информация.ПредставлениеСписка = ОбъектМетаданных.Представление();
	КонецЕсли;
	
	// Вид и его свойства.
	Информация.Вид = Лев(Информация.ПолноеИмя, Найти(Информация.ПолноеИмя, ".")-1);
	Если Информация.Вид = "СПРАВОЧНИК"
		Или Информация.Вид = "ДОКУМЕНТ"
		Или Информация.Вид = "ПЕРЕЧИСЛЕНИЕ"
		Или Информация.Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК"
		Или Информация.Вид = "ПЛАНСЧЕТОВ"
		Или Информация.Вид = "ПЛАНВИДОВРАСЧЕТА"
		Или Информация.Вид = "БИЗНЕСПРОЦЕСС"
		Или Информация.Вид = "ЗАДАЧА"
		Или Информация.Вид = "ПЛАНОБМЕНА" Тогда
		Информация.Ссылочный = Истина;
	Иначе
		Информация.Ссылочный = Ложь;
	КонецЕсли;
	
	Если Информация.Вид = "СПРАВОЧНИК"
		Или Информация.Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Информация.Иерархический = ОбъектМетаданных.Иерархический;
	ИначеЕсли Информация.Вид = "ПЛАНСЧЕТОВ" Тогда
		Информация.Иерархический = Истина;
	Иначе
		Информация.Иерархический = Ложь;
	КонецЕсли;
	Если Информация.Иерархический Тогда
		ШаблонЗапроса = "ВЫБРАТЬ Ссылка ИЗ &ПолноеИмя ГДЕ Родитель = &УдаляемыйСсылка";
		Информация.ТекстЗапросаПоИерархии = СтрЗаменить(ШаблонЗапроса, "&ПолноеИмя", Информация.ПолноеИмя);
	КонецЕсли;
	
	Информация.ЕстьПодчиненные = Ложь;
	Информация.ТекстЗапросаПоПодчиненным = "";
	Если Информация.Вид = "СПРАВОЧНИК"
		Или Информация.Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК"
		Или Информация.Вид = "ПЛАНОБМЕНА"
		Или Информация.Вид = "ПЛАНСЧЕТОВ"
		Или Информация.Вид = "ПЛАНВИДОВРАСЧЕТА" Тогда
		
		ШаблонЗапроса = "ВЫБРАТЬ Ссылка ИЗ Справочник.&Имя ГДЕ Владелец = &УдаляемыйСсылка";
		ТекстЗапроса = "";
		
		Для Каждого Справочник Из Метаданные.Справочники Цикл
			Если Справочник.Владельцы.Содержит(ОбъектМетаданных) Тогда
				Если Информация.ЕстьПодчиненные = Ложь Тогда
					Информация.ЕстьПодчиненные = Истина;
				Иначе
					ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
				КонецЕсли;
				ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапроса, "&Имя", Справочник.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Информация.ТекстЗапросаПоПодчиненным = ТекстЗапроса;
	КонецЕсли;
	
	
	Если Информация.ПолноеИмя = "СПРАВОЧНИК.ИДЕНТИФИКАТОРЫОБЪЕКТОВМЕТАДАННЫХ"
		Или Информация.ПолноеИмя = "СПРАВОЧНИК.ПРЕДОПРЕДЕЛЕННЫЕВАРИАНТЫОТЧЕТОВ" Тогда
		Информация.Технический = Истина;
		Информация.Разделенный = Ложь;
	Иначе
		Информация.Технический = Ложь;
		Если ПараметрыВыполнения.МодельСервиса Тогда
			Информация.Разделенный = ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ОбъектМетаданных, ПараметрыВыполнения.РазделительОсновныхДанных)
				Или ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ОбъектМетаданных, ПараметрыВыполнения.РазделительВспомогательныхДанных);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполнения.ИнформацияОТипах.Вставить(Тип, Информация);
	
	Возврат Информация;
КонецФункции

// Регистрирует предупреждение в журнале регистрации.
Процедура ЗаписатьПредупреждение(Ссылка, ИнформацияОбОшибке)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ТекстДляЖурнала = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ТекстДляЖурнала = ИнформацияОбОшибке;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Удаление помеченных'"),
		УровеньЖурналаРегистрации.Предупреждение,
		,
		Ссылка,
		ТекстДляЖурнала);
КонецПроцедуры

#КонецЕсли
