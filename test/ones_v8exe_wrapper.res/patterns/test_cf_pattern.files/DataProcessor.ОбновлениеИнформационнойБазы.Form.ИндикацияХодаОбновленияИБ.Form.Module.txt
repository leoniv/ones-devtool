///////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НачальноеЗаполнениеДанных = ОбновлениеИнформационнойБазы.НачальноеЗаполнениеДанных();
	Если НачальноеЗаполнениеДанных Тогда
		Заголовок = НСтр("ru = 'Начальное заполнение данных'");
		Элементы.РежимЗапуска.ТекущаяСтраница = Элементы.НачальноеЗаполнение;
	Иначе
		Элементы.ТекстСообщенияОбновляемаяКонфигурация.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Элементы.ТекстСообщенияОбновляемаяКонфигурация.Заголовок, Метаданные.Синоним, Метаданные.Версия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьИнформационнуюБазу", 0.1, Истина);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьИнформационнуюБазу()
	
	ДополнительныеПараметры = Новый Структура;
	ИнформацияОбОшибке = Неопределено;
	
	ВремяНачалаОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Попытка
		ПризнакВыполненияОбработчиков =
			ОбновлениеИнформационнойБазыВызовСервера.ВыполнитьОбновлениеИнформационнойБазы(Ложь, Истина);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	
	Если ПризнакВыполненияОбработчиков = "ПрекратитьРаботуСистемы" Тогда
		НовыйПараметрЗапуска = ПараметрЗапуска + ";РегламентныеЗаданияОтключены";
		НовыйПараметрЗапуска = "/AllowExecuteScheduledJobs -Off " + "/C """ + НовыйПараметрЗапуска + """";
		ПрекратитьРаботуСистемы(Истина, НовыйПараметрЗапуска);
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ДокументОписаниеОбновлений", Неопределено);
	ДополнительныеПараметры.Вставить("ИнформацияОбОшибке", ИнформацияОбОшибке);
	ДополнительныеПараметры.Вставить("ВремяНачалаОбновления", ВремяНачалаОбновления);
	ДополнительныеПараметры.Вставить("ВремяОкончанияОбновления", ОбщегоНазначенияКлиент.ДатаСеанса());
	ДополнительныеПараметры.Вставить("ПризнакВыполненияОбработчиков", ПризнакВыполненияОбработчиков);
	
	Если ИнформацияОбОшибке = Неопределено
		И ПризнакВыполненияОбработчиков = "ОшибкаУстановкиМонопольногоРежима" Тогда
		
		ОбновитьИнформационнуюБазуПриОшибкеУстановкиМонопольногоРежима(ДополнительныеПараметры);
		Возврат;
		
	КонецЕсли;
	
	ОбновитьИнформационнуюБазуЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационнуюБазуПриОшибкеУстановкиМонопольногоРежима(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ПризнакВыполненияОбработчиков = "ОшибкаУстановкиМонопольногоРежима" Тогда
		
		// Открытие формы для отключения активных сеансов
		Оповещение = Новый ОписаниеОповещения(
			"ОбновитьИнформационнуюБазуПриОшибкеУстановкиМонопольногоРежимаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(Оповещение);
		
	Иначе
		
		ОбновитьИнформационнуюБазуЗавершение(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационнуюБазуПриОшибкеУстановкиМонопольногоРежимаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат Тогда
		Закрыть(Новый Структура("Отказ, Перезапустить", Истина, Ложь));
		Возврат;
	Иначе
		
		Попытка
			ПризнакВыполненияОбработчиков =
				ОбновлениеИнформационнойБазыВызовСервера.ВыполнитьОбновлениеИнформационнойБазы(
					Ложь, ПриЗапускеКлиентскогоПриложения);
		Исключение
			ДополнительныеПараметры.ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОбновитьИнформационнуюБазуЗавершение(ДополнительныеПараметры);
			Возврат;
		КонецПопытки;
		
		ДополнительныеПараметры.ВремяОкончанияОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	Если ПризнакВыполненияОбработчиков = "ОшибкаУстановкиМонопольногоРежима" Тогда
		ДополнительныеПараметры.ПризнакВыполненияОбработчиков = ПризнакВыполненияОбработчиков;
		ОбновитьИнформационнуюБазуПриОшибкеУстановкиМонопольногоРежима(ДополнительныеПараметры);
	Иначе
		ОбновлениеИнформационнойБазыВызовСервера.СнятьБлокировкуФайловойБазы();
		ОбновитьИнформационнуюБазуЗавершение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационнуюБазуЗавершение(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ИнформацияОбОшибке <> Неопределено Тогда
		ВремяОкончанияОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КраткоеСообщениеОбОшибке", КраткоеПредставлениеОшибки(ДополнительныеПараметры.ИнформацияОбОшибке));
		ПараметрыФормы.Вставить("ПодробноеСообщениеОбОшибке", ПодробноеПредставлениеОшибки(ДополнительныеПараметры.ИнформацияОбОшибке));
		ПараметрыФормы.Вставить("ВремяНачалаОбновления", ДополнительныеПараметры.ВремяНачалаОбновления);
		ПараметрыФормы.Вставить("ВремяОкончанияОбновления", ВремяОкончанияОбновления);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьИнформационнуюБазуДействияПриОшибке", ЭтотОбъект);
		ОткрытьФорму("Обработка.ОбновлениеИнформационнойБазы.Форма.СообщениеОНеудачномОбновлении",
			ПараметрыФормы,,,,,ОписаниеОповещения);
		
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыВызовСервера.ЗаписатьВремяВыполненияОбновления(
		ДополнительныеПараметры.ВремяНачалаОбновления, ДополнительныеПараметры.ВремяОкончанияОбновления);
	
	Закрыть(Новый Структура("Отказ, Перезапустить", Ложь, Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационнуюБазуДействияПриОшибке(ЗавершитьРаботу, ДополнительныеПараметры) Экспорт
	
	Если ЗавершитьРаботу = Неопределено
		Или ЗавершитьРаботу Тогда
		Закрыть(Новый Структура("Отказ, Перезапустить", Истина, Ложь));
	Иначе
		Закрыть(Новый Структура("Отказ, Перезапустить", Истина, Истина));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Вызывается при неудачной попытке установить монопольный режим в файловой базе.
// 
// Параметры:
//  Отказ - булево - если Истина - завершает работу программы
//
&НаКлиенте
Процедура ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(Оповещение)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		МодульСоединенияИБКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СоединенияИБКлиент");
		МодульСоединенияИБКлиент.ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

