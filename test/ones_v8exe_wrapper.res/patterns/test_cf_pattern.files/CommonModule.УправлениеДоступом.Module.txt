////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управление доступом".
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые для проверки прав

// Проверяет, что у пользователя есть роль в одном из профилей
// тех групп доступа в которых он участвует, например,
// роль ПросмотрЖурналаРегистрации, роль ПечатьНепроведенныхДокументов.
//
// Если указан объект, тогда дополнительно проверяет, что группа доступа
// в профиле которой есть указанная роль также предоставляет право Чтение
// указанного объекта.
//
// Параметры:
//  Роль           - Строка - имя роли.
//
//  СсылкаНаОбъект - Ссылка на объект для которого заполняются наборы значений доступа
//                   для проверки права Чтение.
//                 - ТаблицаЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа) - произвольная
//                   таблица наборов значений доступа.
//                   Пустую подготовленную таблицу можно получить с помощью функции
//                   УправлениеДоступом.ТаблицаНаборыЗначенийДоступа() - колонки
//                   Чтение, Изменение не заполнять.
//
//  Пользователь   - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи, Неопределено.
//                   Если не заполнено, тогда право проверяется для текущего пользователя.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьРоль(Знач Роль, Знач НаборыЗначенийДоступа = Неопределено, Знач Пользователь = Неопределено) Экспорт
	
	Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, Пользователи.АвторизованныйПользователь());
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НаборыЗначенийДоступа = Неопределено ИЛИ НЕ ОграничиватьДоступНаУровнеЗаписей() Тогда
		// Проверка, что роль назначается пользователю через группу доступа по профилю.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("АвторизованныйПользователь", Пользователь);
		Запрос.УстановитьПараметр("Роль", Роль);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.Пользователь = &АвторизованныйПользователь)
		|			И (СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
		|			И (СоставыГруппПользователей.Используется)
		|			И (НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|			И (ПрофилиГруппДоступаРоли.Роль.Имя = &Роль)
		|			И (НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления)";
		Возврат НЕ Запрос.Выполнить().Пустой();
	КонецЕсли;
		
	Если ТипЗнч(НаборыЗначенийДоступа) = Тип("ТаблицаЗначений") Тогда
		НаборыЗначенийДоступа = НаборыЗначенийДоступа.Скопировать();
	Иначе
		СсылкаНаОбъект = НаборыЗначенийДоступа;
		НаборыЗначенийДоступа = ТаблицаНаборыЗначенийДоступа();
		СсылкаНаОбъект.ПолучитьОбъект().ЗаполнитьНаборыЗначенийДоступа(НаборыЗначенийДоступа);
		// Выбор только наборов значений доступа предназначенных для проверки права Чтение.
		СтрокиНаборовЧтения = НаборыЗначенийДоступа.НайтиСтроки(Новый Структура("Чтение", Истина));
		НомераНаборов = Новый Соответствие;
		Для каждого Строка Из СтрокиНаборовЧтения Цикл
			НомераНаборов.Вставить(Строка.НомерНабора, Истина);
		КонецЦикла;
		Индекс = НаборыЗначенийДоступа.Количество()-1;
		Пока Индекс > 0 Цикл
			Если НомераНаборов[НаборыЗначенийДоступа[Индекс].НомерНабора] = Неопределено Тогда
				НаборыЗначенийДоступа.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		НаборыЗначенийДоступа.ЗаполнитьЗначения(Ложь, "Чтение, Изменение");
	КонецЕсли;
	
	// Уточнение наборов значений доступа.
	ИменаВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.Параметры().СвойстваВидовДоступа.ПоИменам;
	
	Для каждого Строка Из НаборыЗначенийДоступа Цикл
		
		Если Строка.ВидДоступа = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(Строка.ВидДоступа) = ВРег("ПравоЧтения")
		 ИЛИ ВРег(Строка.ВидДоступа) = ВРег("ПравоИзменения") Тогда
			
			Если ТипЗнч(Строка.ЗначениеДоступа) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Строка.ЗначениеДоступа)) Тогда
					Строка.ЗначениеДоступа = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Строка.ЗначениеДоступа));
				Иначе
					Строка.ЗначениеДоступа = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			Если ВРег(Строка.ВидДоступа) = ВРег("ПравоИзменения") Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка в функции ЕстьРоль модуля УправлениеДоступом.
				           |В наборе значений доступа указан вид доступа ПравоИзменения
				           |таблицы с идентификтором ""%1"".
				           |В ограничении проверки роли (как дополнительного права)
				           |может быть зависимость только от права Чтения.'"),
					Строка.ЗначениеДоступа);
			КонецЕсли;
		ИначеЕсли ИменаВидовДоступа.Получить(Строка.ВидДоступа) <> Неопределено
		      ИЛИ Строка.ВидДоступа = "НастройкиПрав" Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка в функции ЕстьРоль модуля УправлениеДоступом.
				           |Набор значений доступа содержит известный вид доступа ""%2"",
				           |который не требуется указывать.
				           |
				           |Указывать требуется только специальные виды доступа
				           |""ПравоЧтения"", ""ПравоИзменения"", если они используются.'"),
				ТипЗнч(СсылкаНаОбъект),
				Строка.ВидДоступа);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка в функции ЕстьРоль модуля УправлениеДоступом.
				           |Набор значений доступа содержит неизвестный вид доступа ""%2"".'"),
				ТипЗнч(СсылкаНаОбъект),
				Строка.ВидДоступа);
		КонецЕсли;
		
		Строка.ВидДоступа = "";
	КонецЦикла;
	
	// Добавление служебных полей в набор значений доступа.
	УправлениеДоступомСлужебный.ПодготовитьНаборыЗначенийДоступаКЗаписи(Неопределено, НаборыЗначенийДоступа, Истина);
	
	// Проверка, что роль назначается пользователю через группу доступа по профилю с разрешенными наборами значений доступа.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АвторизованныйПользователь", Пользователь);
	Запрос.УстановитьПараметр("Роль", Роль);
	Запрос.УстановитьПараметр("НаборыЗначенийДоступа", НаборыЗначенийДоступа);
	Запрос.УстановитьПараметр("ТипыВладельцевНастроекПрав", ПараметрыСеанса.ТипыВладельцевНастроекПрав);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НаборыЗначенийДоступа.НомерНабора,
	|	НаборыЗначенийДоступа.ЗначениеДоступа,
	|	НаборыЗначенийДоступа.ЗначениеБезГрупп,
	|	НаборыЗначенийДоступа.СтандартноеЗначение
	|ПОМЕСТИТЬ НаборыЗначенийДоступа
	|ИЗ
	|	&НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НаборыЗначенийДоступа.НомерНабора,
	|	НаборыЗначенийДоступа.ЗначениеДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыДоступаПользователи.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ГруппыДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.Пользователь = &АвторизованныйПользователь)
	|			И (СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
	|			И (СоставыГруппПользователей.Используется)
	|			И (НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	|			И (ПрофилиГруппДоступаРоли.Роль.Имя = &Роль)
	|			И (НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Наборы.НомерНабора
	|ПОМЕСТИТЬ НомераНаборов
	|ИЗ
	|	НаборыЗначенийДоступа КАК Наборы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Наборы.НомерНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	НЕ(ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						НомераНаборов КАК НомераНаборов
	|					ГДЕ
	|						ИСТИНА В
	|							(ВЫБРАТЬ ПЕРВЫЕ 1
	|								ИСТИНА
	|							ИЗ
	|								НаборыЗначенийДоступа КАК НаборыЗначений
	|							ГДЕ
	|								НаборыЗначений.НомерНабора = НомераНаборов.НомерНабора
	|								И НЕ ИСТИНА В
	|										(ВЫБРАТЬ ПЕРВЫЕ 1
	|											ИСТИНА
	|										ИЗ
	|											РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
	|										ГДЕ
	|											ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
	|											И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа)
	|											И ЗначенияПоУмолчанию.БезНастройки = ИСТИНА)))
	|				И НЕ ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							НомераНаборов КАК НомераНаборов
	|						ГДЕ
	|							ИСТИНА В
	|								(ВЫБРАТЬ ПЕРВЫЕ 1
	|									ИСТИНА
	|								ИЗ
	|									НаборыЗначенийДоступа КАК НаборыЗначений
	|								ГДЕ
	|									НаборыЗначений.НомерНабора = НомераНаборов.НомерНабора
	|									И НЕ ИСТИНА В
	|											(ВЫБРАТЬ ПЕРВЫЕ 1
	|												ИСТИНА
	|											ИЗ
	|												РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
	|											ГДЕ
	|												ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
	|												И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа)
	|												И ЗначенияПоУмолчанию.БезНастройки = ИСТИНА))
	|							И НЕ ЛОЖЬ В
	|									(ВЫБРАТЬ ПЕРВЫЕ 1
	|										ЛОЖЬ
	|									ИЗ
	|										НаборыЗначенийДоступа КАК НаборыЗначений
	|									ГДЕ
	|										НаборыЗначений.НомерНабора = НомераНаборов.НомерНабора
	|										И НЕ ВЫБОР
	|												КОГДА НаборыЗначений.ЗначениеБезГрупп
	|													ТОГДА ИСТИНА В
	|															(ВЫБРАТЬ ПЕРВЫЕ 1
	|																ИСТИНА
	|															ИЗ
	|																РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
	|																	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК Значения
	|																	ПО
	|																		Значения.ГруппаДоступа = ГруппыДоступа.Ссылка
	|																			И Значения.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
	|															ГДЕ
	|																ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
	|																И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа)
	|																И ЕСТЬNULL(Значения.ЗначениеРазрешено, ЗначенияПоУмолчанию.ВсеРазрешены))
	|												КОГДА НаборыЗначений.СтандартноеЗначение
	|													ТОГДА ВЫБОР
	|															КОГДА ИСТИНА В
	|																	(ВЫБРАТЬ ПЕРВЫЕ 1
	|																		ИСТИНА
	|																	ИЗ
	|																		РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа
	|																	ГДЕ
	|																		ГруппыЗначенийДоступа.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
	|																		И ГруппыЗначенийДоступа.ГруппаЗначенийДоступа = &АвторизованныйПользователь)
	|																ТОГДА ИСТИНА
	|															ИНАЧЕ ИСТИНА В
	|																	(ВЫБРАТЬ ПЕРВЫЕ 1
	|																		ИСТИНА
	|																	ИЗ
	|																		РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
	|																			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений
	|																			ПО
	|																				ГруппыЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
	|																					И ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
	|																					И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа)
	|																			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК Значения
	|																			ПО
	|																				Значения.ГруппаДоступа = ГруппыДоступа.Ссылка
	|																					И Значения.ЗначениеДоступа = ГруппыЗначений.ГруппаЗначенийДоступа
	|																	ГДЕ
	|																		ЕСТЬNULL(Значения.ЗначениеРазрешено, ЗначенияПоУмолчанию.ВсеРазрешены))
	|														КОНЕЦ
	|												КОГДА НаборыЗначений.ЗначениеДоступа = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.ДоступРазрешен)
	|													ТОГДА ИСТИНА
	|												КОГДА НаборыЗначений.ЗначениеДоступа = ЗНАЧЕНИЕ(Перечисление.ДополнительныеЗначенияДоступа.ДоступЗапрещен)
	|													ТОГДА ЛОЖЬ
	|												КОГДА ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа) = ТИП(Справочник.ИдентификаторыОбъектовМетаданных)
	|													ТОГДА ИСТИНА В
	|															(ВЫБРАТЬ ПЕРВЫЕ 1
	|																ИСТИНА
	|															ИЗ
	|																РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступаПроверкаПраваНаОбъект
	|															ГДЕ
	|																ТаблицыГруппДоступаПроверкаПраваНаОбъект.ГруппаДоступа = ГруппыДоступа.Ссылка
	|																И ТаблицыГруппДоступаПроверкаПраваНаОбъект.Таблица = НаборыЗначений.ЗначениеДоступа)
	|												ИНАЧЕ ИСТИНА В
	|															(ВЫБРАТЬ ПЕРВЫЕ 1
	|																ИСТИНА
	|															ИЗ
	|																РегистрСведений.НастройкиПравОбъектов КАК НастройкиПрав
	|																	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроек
	|																	ПО
	|																		НаследованиеНастроек.Объект = НаборыЗначений.ЗначениеДоступа
	|																			И НастройкиПрав.Объект = НаследованиеНастроек.Родитель
	|																			И НаследованиеНастроек.УровеньИспользования < НастройкиПрав.УровеньРазрешенияЧтения
	|																	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|																	ПО
	|																		СоставыГруппПользователей.Пользователь = &АвторизованныйПользователь
	|																			И СоставыГруппПользователей.ГруппаПользователей = НастройкиПрав.Пользователь)
	|														И НЕ ЛОЖЬ В
	|																(ВЫБРАТЬ ПЕРВЫЕ 1
	|																	ЛОЖЬ
	|																ИЗ
	|																	РегистрСведений.НастройкиПравОбъектов КАК НастройкиПрав
	|																		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроек
	|																		ПО
	|																			НаследованиеНастроек.Объект = НаборыЗначений.ЗначениеДоступа
	|																				И НастройкиПрав.Объект = НаследованиеНастроек.Родитель
	|																				И НаследованиеНастроек.УровеньИспользования < НастройкиПрав.УровеньЗапрещенияЧтения
	|																		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|																		ПО
	|																			СоставыГруппПользователей.Пользователь = &АвторизованныйПользователь
	|																				И СоставыГруппПользователей.ГруппаПользователей = НастройкиПрав.Пользователь)
	|											КОНЕЦ)))";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Проверяет, что для пользователя настроено разрешение права для объекта.
//  Например, для папки файлов могут быть настроены права "УправлениеПравами",
// "Чтение", "ИзменениеПапок", причем право "Чтение" являются,
// как правом для папки файлов, так и правом для файлов.
//
// Параметры:
//  Право          - Строка - имя права, как оно указано в процедуре ПриЗаполненииВозможныхПравДляНастройкиПравОбъектов
//                   общего модуля УправлениеДоступомПереопределяемый.
//
//  СсылкаНаОбъект - СправочникСсылка, ПланВидовХарактеристикСсылка - ссылка на одного из владельцев прав,
//                   указанных в процедуре ПриЗаполненииВозможныхПравДляНастройкиПравОбъектов
//                   общего модуля УправлениеДоступомПереопределяемый, например, ссылка на папку файлов.
//
//  Пользователь   - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи, Неопределено.
//                   Если не заполнено, тогда право проверяется для текущего пользователя.
//
// Возвращаемое значение:
//  Булево. Истина - настроено разрешение права с учетом всех разрешающих и запрещающих настроек в иерархии.
//
Функция ЕстьПраво(Право, СсылкаНаОбъект, Пользователь = Неопределено) Экспорт
	
	Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, Пользователи.АвторизованныйПользователь());
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ОграничиватьДоступНаУровнеЗаписей() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОписаниеПрав = УправлениеДоступомСлужебныйПовтИсп.Параметры(
		).ВозможныеПраваДляНастройкиПравОбъектов.ПоТипам.Получить(ТипЗнч(СсылкаНаОбъект));
	
	Если ОписаниеПрав = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено описание возможных прав для таблицы ""%1""'"),
			СсылкаНаОбъект.Метаданные().ПолноеИмя());
	КонецЕсли;
	
	ОписаниеПрава = ОписаниеПрав.Получить(Право);
	
	Если ОписаниеПрава = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено описание права ""%1"" для таблицы ""%2""'"),
			Право,
			СсылкаНаОбъект.Метаданные().ПолноеИмя());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Право", Право);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.НастройкиПравОбъектов КАК НастройкиПрав
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроек
	|					ПО
	|						НаследованиеНастроек.Объект = &СсылкаНаОбъект
	|							И НастройкиПрав.Право = &Право
	|							И НаследованиеНастроек.УровеньИспользования < НастройкиПрав.УровеньРазрешенияПрава
	|							И НастройкиПрав.Объект = НаследованиеНастроек.Родитель
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|					ПО
	|						СоставыГруппПользователей.Пользователь = &Пользователь
	|							И СоставыГруппПользователей.ГруппаПользователей = НастройкиПрав.Пользователь)
	|	И НЕ ЛОЖЬ В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ЛОЖЬ
	|				ИЗ
	|					РегистрСведений.НастройкиПравОбъектов КАК НастройкиПрав
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроек
	|						ПО
	|							НаследованиеНастроек.Объект = &СсылкаНаОбъект
	|								И НастройкиПрав.Право = &Право
	|								И НаследованиеНастроек.УровеньИспользования < НастройкиПрав.УровеньЗапрещенияПрава
	|								И НастройкиПрав.Объект = НаследованиеНастроек.Родитель
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|						ПО
	|							СоставыГруппПользователей.Пользователь = &Пользователь
	|								И СоставыГруппПользователей.ГруппаПользователей = НастройкиПрав.Пользователь)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для получения общих настроек подсистемы

// Проверяет используется ли ограничении доступа на уровне записей.
Функция ОграничиватьДоступНаУровнеЗаписей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые для настройки интерфейса управляемых форм.

// Настраивает форму значения доступа, которое использует группы значений доступа
// при настройке разрешенных значений в группах доступа пользователей.
//
// Поддерживается только для случая, когда выбирается одна группа доступа, а не несколько.
//
// Для элемента формы ГруппаДоступа, связанного с реквизитом ГруппаДоступа
// устанавливает список групп значений доступа в параметр выбора, которые дают
// доступ на изменение значения доступа.
//
// При создании нового значения доступа, если количество групп значений доступа
// которые дают доступ на изменение значения доступа равно нулю,
// будет вызвано исключение.
//
// Если в базе данных уже записана группа значений доступа, которая не дает
// доступ на изменение значения доступа или количество групп значений доступа,
// которые дают доступ на изменение значения доступа равно нулю,
// тогда свойство формы ТолькоПросмотр устанавливается Истина.
//
// Если ограничение на уровне записей не используется или ограничение
// по виду доступа не используется, тогда элемент формы скрывается.
//
// Параметры:
//  Форма          - УправляемаяФорма значения доступа, использующего группы
//                   для назначения разрешенных.
//
//  Реквизит       - Неопределено - означает реквизит Форма.Объект.ГруппаДоступа.
//                 - Строка - реквизит формы содержащий группу доступа.
//
//  Элементы       - Неопределено - означает элемент формы Форма.Элементы.ГруппаДоступа.
//                 - Строка,
//                 - Массив строк имен элементов формы.
//
//  ТипЗначения    - Неопределено - предполагает наличие реквизита формы Объект.Ссылка,
//                   по которому определяется тип значения доступа.
//                 - Тип ссылки - используется указанный тип значения доступа.
//
//  СозданиеНового - Неопределено - означает проверку НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка),
//                   для определения того, что создается новое значение доступа.
//                 - Булево - используется указанное значение.
//
Процедура ПриСозданииФормыЗначенияДоступа(Форма,
                                          Реквизит       = Неопределено,
                                          Элементы       = Неопределено,
                                          ТипЗначения    = Неопределено,
                                          СозданиеНового = Неопределено) Экспорт
	
	Если ТипЗнч(СозданиеНового) <> Тип("Булево") Тогда
		СозданиеНового = НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка);
	КонецЕсли;
	
	Если ТипЗнч(ТипЗначения) <> Тип("Тип") Тогда
		ТипЗначенияДоступа = ТипЗнч(Форма.Объект.Ссылка);
	Иначе
		ТипЗначенияДоступа = ТипЗначения;
	КонецЕсли;
	
	Если Элементы = Неопределено Тогда
		ЭлементыФормы = Новый Массив;
		ЭлементыФормы.Добавить("ГруппаДоступа");
		
	ИначеЕсли ТипЗнч(Элементы) <> Тип("Массив") Тогда
		ЭлементыФормы = Новый Массив;
		ЭлементыФормы.Добавить(Элементы);
	КонецЕсли;
	
	ЗаголовокОшибки =
		НСтр("ru = 'Ошибка в процедуре ПриСозданииФормыЗначенияДоступа
		           |общего модуля УправлениеДоступом.'");
	
	СвойстваГрупп = СвойстваГруппЗначенияДоступа(ТипЗначенияДоступа, ЗаголовокОшибки);
	
	Если Реквизит = Неопределено Тогда
		ГруппаЗначенийДоступа = Форма.Объект.ГруппаДоступа;
	Иначе
		ГруппаЗначенийДоступа = Форма[Реквизит];
	КонецЕсли;
	
	Если ТипЗнч(ГруппаЗначенийДоступа) <> СвойстваГрупп.Тип Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокОшибки + Символы.ПС + Символы.ПС +
			НСтр("ru = 'Для значений доступа типа ""%1""
					   |используются вид доступа ""%2"" с типом значений ""%3"",
					   |заданным в плане видов характеристик ""Виды доступа"".
					   |Но этот тип не совпадает с типом ""%4"" в форме значения
					   |доступа у реквизита ГруппаДоступа.'"),
			Строка(ТипЗначенияДоступа),
			Строка(СвойстваГрупп.ВидДоступа),
			Строка(СвойстваГрупп.Тип),
			Строка(ТипЗнч(ГруппаЗначенийДоступа)));
	КонецЕсли;
	
	Если НЕ ОграничиватьДоступНаУровнеЗаписей()
	 ИЛИ НЕ УправлениеДоступомСлужебный.ВидДоступаИспользуется(СвойстваГрупп.ВидДоступа) Тогда
		
		Для каждого Элемент Из ЭлементыФормы Цикл
			Форма.Элементы[Элемент].Видимость = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ГруппыЗначенийДляИзменения =
		ГруппыЗначенийДоступаРазрешающиеИзменениеЗначенийДоступа(ТипЗначенияДоступа);
	
	Если ГруппыЗначенийДляИзменения.Количество() = 0
	   И СозданиеНового Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для добавления требуются разрешенные ""%1"".'"),
			Метаданные.НайтиПоТипу(СвойстваГрупп.Тип).Представление());
	КонецЕсли;
	
	Если ГруппыЗначенийДляИзменения.Количество() = 0
	 ИЛИ НЕ СозданиеНового
	   И ГруппыЗначенийДляИзменения.Найти(ГруппаЗначенийДоступа) = Неопределено Тогда
		
		Форма.ТолькоПросмотр = Истина;
		Возврат;
	КонецЕсли;
	
	Если СозданиеНового
	   И НЕ ЗначениеЗаполнено(ГруппаЗначенийДоступа)
	   И ГруппыЗначенийДляИзменения.Количество() = 1 Тогда
		
		Если Реквизит = Неопределено Тогда
			Форма.Объект.ГруппаДоступа = ГруппыЗначенийДляИзменения[0];
		Иначе
			Форма[Реквизит] = ГруппыЗначенийДляИзменения[0];
		КонецЕсли;
	КонецЕсли;
	
	НовыйПараметрВыбора = Новый ПараметрВыбора(
		"Отбор.Ссылка", Новый ФиксированныйМассив(ГруппыЗначенийДляИзменения));

	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(НовыйПараметрВыбора);
	
	Для каждого Элемент Из ЭлементыФормы Цикл
		Форма.Элементы[Элемент].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив групп значений доступа разрешающих изменять значения доступа.
//
// Поддерживается только для случая, когда выбирается одна группа доступа, а не несколько.
//
// Параметры:
//  ТипЗначенийДоступа - Тип ссылки.
//  ВозвращатьВсе      - Булево, если Истина, то в случае, когда нет ограничений
//                       (доступны все) будет возвращен массив всех вместо Неопределено.
//
// Возвращаемое значение:
//  Неопределено - все группы значений доступа разрешают изменять значения доступа.
//  Массив - массив найденных групп значений доступа.
//  
Функция ГруппыЗначенийДоступаРазрешающиеИзменениеЗначенийДоступа(ТипЗначенийДоступа, ВозвращатьВсе = Ложь) Экспорт
	
	ЗаголовокОшибки =
		НСтр("ru = 'Ошибка в процедуре ГруппыЗначенийДоступаРазрешающиеИзменениеЗначенийДоступа
		           |общего модуля УправлениеДоступом.'");
	
	СвойстваГрупп = СвойстваГруппЗначенияДоступа(ТипЗначенийДоступа, ЗаголовокОшибки);
	
	Если НЕ ОграничиватьДоступНаУровнеЗаписей()
	 ИЛИ НЕ УправлениеДоступомСлужебный.ВидДоступаИспользуется(СвойстваГрупп.ВидДоступа)
	 ИЛИ Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		
		Если ВозвращатьВсе Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ГруппыЗначенийДоступа.Ссылка КАК Ссылка
			|ИЗ
			|	&ТаблицаГруппЗначенийДоступа КАК ГруппыЗначенийДоступа";
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст, "&ТаблицаГруппЗначенийДоступа", СвойстваГрупп.Таблица);
			
			Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидДоступа",          СвойстваГрупп.ВидДоступа);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ТипЗначенийДоступа",  СвойстваГрупп.ПустаяСсылкаТипаЗначений);
	
	Запрос.УстановитьПараметр("ИдентификаторЗначенийДоступа",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗначенийДоступа));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка
	|ПОМЕСТИТЬ ГруппыДоступаПользователя
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступа
	|			ГДЕ
	|				ТаблицыГруппДоступа.Таблица = &ИдентификаторЗначенийДоступа
	|				И ТаблицыГруппДоступа.ГруппаДоступа = ГруппыДоступа.Ссылка
	|				И ТаблицыГруппДоступа.Изменение = ИСТИНА)
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|					ПО
	|						СоставыГруппПользователей.Используется
	|							И СоставыГруппПользователей.Пользователь = &ТекущийПользователь
	|							И ГруппыДоступаПользователи.Пользователь = СоставыГруппПользователей.ГруппаПользователей
	|							И ГруппыДоступаПользователи.Ссылка = ГруппыДоступа.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыЗначенийДоступа.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ГруппыЗначений
	|ИЗ
	|	&ТаблицаГруппЗначенийДоступа КАК ГруппыЗначенийДоступа
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ГруппыДоступаПользователя КАК ГруппыДоступаПользователя
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
	|					ПО
	|						ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступаПользователя.Ссылка
	|							И ЗначенияПоУмолчанию.ТипЗначенийДоступа = &ТипЗначенийДоступа
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК Значения
	|					ПО
	|						Значения.ГруппаДоступа = ГруппыДоступаПользователя.Ссылка
	|							И Значения.ЗначениеДоступа = ГруппыЗначенийДоступа.Ссылка
	|			ГДЕ
	|				ЕСТЬNULL(Значения.ЗначениеРазрешено, ЗначенияПоУмолчанию.ВсеРазрешены))";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаГруппЗначенийДоступа", СвойстваГрупп.Таблица);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГруппыЗначенийДоступа.Ссылка КАК Ссылка
	|ИЗ
	|	&ТаблицаГруппЗначенийДоступа КАК ГруппыЗначенийДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппыЗначений КАК ГруппыЗначений
	|		ПО ГруппыЗначенийДоступа.Ссылка = ГруппыЗначений.Ссылка";
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, "&ТаблицаГруппЗначенийДоступа", СвойстваГрупп.Таблица);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с наборами значений доступа

// Проверяет предусмотрена ли для объекта метаданных
// процедура заполнения наборов значений доступа.
// 
// Параметры:
//  Ссылка       - ЛюбаяСсылка.
//
// Возвращаемое значение:
//  Булево.
//
Функция ВозможноЗаполнитьНаборыЗначенийДоступа(Ссылка) Экспорт
	
	ТипОбъекта = Тип(ОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка) + "Объект." + Ссылка.Метаданные().Имя);
	
	НаборыЗаполняются = УправлениеДоступомСлужебныйПовтИсп.ТипыОбъектовВПодпискахНаСобытия(
		"ЗаписатьНаборыЗначенийДоступа
		|ЗаписатьЗависимыеНаборыЗначенийДоступа").Получить(ТипОбъекта) <> Неопределено;
	
	Возврат НаборыЗаполняются;
	
КонецФункции

// Возвращает пустую таблицу, которая заполняется для передачи в функцию ЕстьРоль() и
// в процедуры ЗаполнитьНаборыЗначенийДоступа(Таблица), определенные прикладным разработчиком.
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками:
//    НомерНабора     - Число (необязательно, если набор один),
//    ВидДоступа      - Строка - необязательно, кроме специальных ПравоЧтения, ПравоИзменения.
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др. (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора.
//
Функция ТаблицаНаборыЗначенийДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерНабора",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("ВидДоступа",      Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
	Таблица.Колонки.Добавить("ЗначениеДоступа", Метаданные.ОпределяемыеТипы.ЗначениеДоступа.Тип);
	Таблица.Колонки.Добавить("Чтение",          Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Изменение",       Новый ОписаниеТипов("Булево"));
	// Служебное поле - его нельзя заполнять и менять (заполняется автоматически).
	Таблица.Колонки.Добавить("Уточнение",       Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	
	Возврат Таблица;
	
КонецФункции

// Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) создается прикладным разработчиком
// в модулях объектов, тип которых задан в одной из подписок на событие
// ЗаписатьНаборыЗначенийДоступа или ЗаписатьЗависимыеНаборыЗначенийДоступа.
// В процедуре выполняется заполнение наборов значений доступа по свойствам объекта.
//
// Параметры:
//  Таблица      - ТаблицаЗначений, возвращаемая функцией ТаблицаНаборыЗначенийДоступа() модуля УправлениеДоступом.
//                   Поля таблицы:
//                    НомерНабора     - Число  (необязательно, если набор один);
//                    ВидДоступа      - Строка - имя вида доступа (не обязательно),
//                                      кроме специальных ПравоЧтения, ПравоИзменения;
//                    ЗначениеДоступа - Неопределено, СправочникСсылка или др. (обязательно);
//                    Чтение          - Булево (необязательно, если набор для всех прав)
//                                      устанавливается для одной строки набора;
//                    Изменение       - Булево (необязательно, если набор для всех прав)
//                                      устанавливается для одной строки набора.
//
// Процедура ЗаполнитьНаборыЗначенийДоступа(Знач Объект, Таблица, Знач СсылкаНаПодчиненныйОбъект = Неопределено)
// заполняет наборы значений доступа объекта, используя процедуру ЗаполнитьНаборыЗначенийДоступа(Таблица),
// созданную прикладным разработчиком (см. описание выше).
// 
// Параметры:
//  Объект       - СправочникОбъект, ДокументОбъект, ..., или СправочникСсылка, ДокументСсылка, ...
//                 Если передана ссылка, то по ней будет получен объект.
//
//  Таблица      - ТаблицаЗначений, возвращаемая функцией ТаблицаНаборыЗначенийДоступа() модуля УправлениеДоступом,
//                 Неопределено - будет создана таблица значений.
//
//  СсылкаНаПодчиненныйОбъект - ЛюбаяСсылка, используется, когда нужно заполнить наборы значений доступа объекта-владельца
//                 для подчиненного объекта.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Знач Объект, Таблица, Знач СсылкаНаПодчиненныйОбъект = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передана ссылка, тогда получить объект.
	// Объект не изменяется, а используется для вызова метода ЗаполнитьНаборыЗначенийДоступа()
	Объект = ?(Объект = Объект.Ссылка, Объект.ПолучитьОбъект(), Объект);
	СсылкаНаОбъект = Объект.Ссылка;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	НаборыЗаполняются = УправлениеДоступомСлужебныйПовтИсп.ТипыОбъектовВПодпискахНаСобытия(
		"ЗаписатьНаборыЗначенийДоступа
		|ЗаписатьЗависимыеНаборыЗначенийДоступа").Получить(ТипЗначенияОбъект) <> Неопределено;
	
	Если НЕ НаборыЗаполняются Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверные параметры.
			           |Тип объекта ""%1""
			           |не найден ни в одной из подписок на события
			           |""Записать наборы значений доступа"",
			           |""Записать зависимые наборы значений доступа"".'"),
			ТипЗначенияОбъект);
	КонецЕсли;
	
	Таблица = ?(ТипЗнч(Таблица) = Тип("ТаблицаЗначений"), Таблица, ТаблицаНаборыЗначенийДоступа());
	Объект.ЗаполнитьНаборыЗначенийДоступа(Таблица);
	
	Если Таблица.Количество() = 0 Тогда
		// Если это условие отключить, тогда зациклится регламентное задание
		// заполнения данных для ограничения доступа.
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Объект ""%1"" сформировал пустой набор значений доступа.'"),
			ТипЗначенияОбъект);
	КонецЕсли;
	
	УточнитьНаборыЗначенийДоступа(СсылкаНаОбъект, Таблица);
	
	Если СсылкаНаПодчиненныйОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Добавление наборов проверки прав Чтения, Изменения "ведущего" объекта-владельца,
	// при формировании зависимых наборов значений в процедурах,
	// подготовленных прикладным разработчиком.
	//
	// Действие не требуется при заполнении конечного набора (даже включающего зависимые наборы),
	// т.к. в стандартных шаблонах проверка прав встроена в логику работы вида доступа "Объект".
	
	// Добавление пустого набора, чтобы установить все флажки прав и упорядочить строки наборов.
	ДобавитьНаборыЗначенийДоступа(Таблица, ТаблицаНаборыЗначенийДоступа());
	
	// Подготовка наборов объекта по отдельным правам.
	НаборыЧтения     = ТаблицаНаборыЗначенийДоступа();
	НаборыИзменения  = ТаблицаНаборыЗначенийДоступа();
	Для каждого Строка Из Таблица Цикл
		Если Строка.Чтение Тогда
			НоваяСтрока = НаборыЧтения.Добавить();
			НоваяСтрока.НомерНабора     = Строка.НомерНабора + 1;
			НоваяСтрока.ВидДоступа      = Строка.ВидДоступа;
			НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
			НоваяСтрока.Уточнение       = Строка.Уточнение;
		КонецЕсли;
		Если Строка.Изменение Тогда
			НоваяСтрока = НаборыИзменения.Добавить();
			НоваяСтрока.НомерНабора     = (Строка.НомерНабора + 1)*2;
			НоваяСтрока.ВидДоступа      = Строка.ВидДоступа;
			НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
			НоваяСтрока.Уточнение       = Строка.Уточнение;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.ЗависимостиПравДоступа КАК ЗависимостиПравДоступа
	|ГДЕ
	|	ЗависимостиПравДоступа.ПодчиненнаяТаблица = &ПодчиненнаяТаблица
	|	И ЗависимостиПравДоступа.ТипВедущейТаблицы = &ТипВедущейТаблицы";
	
	Запрос.УстановитьПараметр("ПодчиненнаяТаблица",
		СсылкаНаПодчиненныйОбъект.Метаданные().ПолноеИмя());
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(СсылкаНаОбъект));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Запрос.УстановитьПараметр("ТипВедущейТаблицы", ОписаниеТипов.ПривестиЗначение(Неопределено));
	
	ЗависимостиПрав = Запрос.Выполнить().Выгрузить();
	Таблица.Очистить();
	
	Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СсылкаНаОбъект));
	
	Если ЗависимостиПрав.Количество() = 0 Тогда
		
		// Добавление наборов по стандартному правилу.
		
		// Проверка права Чтения "ведущего" объекта-владельца наборов
		// при проверке права Чтения "подчиненного" объекта.
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 1;
		Строка.ВидДоступа      = "ПравоЧтения";
		Строка.ЗначениеДоступа = Идентификатор;
		Строка.Чтение          = Истина;
		
		// Проверка права Изменения "ведущего" объекта-владельца наборов
		// при проверке прав Добавления, Изменения, Удаления "подчиненного" объекта.
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 2;
		Строка.ВидДоступа      = "ПравоИзменения";
		Строка.ЗначениеДоступа = Идентификатор;
		Строка.Изменение       = Истина;
		
		// Пометка прав, требующих проверки наборов ограничения права чтения "ведущего" объекта-владельца.
		НаборыЧтения.ЗаполнитьЗначения(Истина, "Чтение");
		// Пометка прав, требующих проверки наборов ограничения права изменения "ведущего" объекта-владельца.
		НаборыИзменения.ЗаполнитьЗначения(Истина, "Изменение");
		
		ДобавитьНаборыЗначенийДоступа(НаборыЧтения, НаборыИзменения);
		ДобавитьНаборыЗначенийДоступа(Таблица, НаборыЧтения, Истина);
	Иначе
		// Добавление наборов по нестандартному правилу: вместо изменения проверять чтение.
		
		// Проверка права Чтения "ведущего" объекта-владельца наборов
		// при проверке права Чтения "подчиненного" объекта.
		Строка = Таблица.Добавить();
		Строка.НомерНабора     = 1;
		Строка.ВидДоступа      = "ПравоЧтения";
		Строка.ЗначениеДоступа = Идентификатор;
		Строка.Чтение          = Истина;
		Строка.Изменение       = Истина;
		
		// Пометка прав, требующих проверки наборов ограничения права чтения "ведущего" объекта-владельца.
		НаборыЧтения.ЗаполнитьЗначения(Истина, "Чтение");
		НаборыЧтения.ЗаполнитьЗначения(Истина, "Изменение");
		ДобавитьНаборыЗначенийДоступа(Таблица, НаборыЧтения, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Позволяет добавить к одной таблице наборов значений доступа другую
// таблицу наборов значений доступа, либо логическим сложением, либо логическим умножением.
// Результат помещается в приемник.
//
// Параметры:
//  Приемник,
//  Источник     - ТаблицаЗначений возвращаемая функцией ТаблицаНаборыЗначенийДоступа() модуля УправлениеДоступом.
//
//  Умножение    - Булево, определяет способ логического объединения наборов приемника и источника.
//  Упростить    - Булево, определяет требуется ли упрощение наборов после добавления.
//
Процедура ДобавитьНаборыЗначенийДоступа(Приемник, Знач Источник, Знач Умножение = Ложь, Знач Упростить = Ложь) Экспорт
	
	Если Источник.Количество() = 0 И Приемник.Количество() = 0 Тогда
		Возврат;
		
	ИначеЕсли Умножение И ( Источник.Количество() = 0 ИЛИ  Приемник.Количество() = 0 ) Тогда
		Приемник.Очистить();
		Источник.Очистить();
		Возврат;
	КонецЕсли;
	
	Если Приемник.Количество() = 0 Тогда
		Значение = Приемник;
		Приемник = Источник;
		Источник = Значение;
	КонецЕсли;
	
	Если Упростить Тогда
		
		// Определение копий наборов и копий строк в наборах в пределах прав
		// в процессе добавления или умножения.
		//
		// "Копии" возникают из-за правил раскрытия скобок в логических выражениях:
		//  Для наборов в пределах права и наборов разных прав:
		//     X  И  X = X,
		//     X ИЛИ X = X, где X - набор строк-аргументов.
		//  Только для наборов в пределах права:
		//     (а И б И в) ИЛИ (а И б) = (а И б), где а,б,в - строки-аргументы наборов.
		// Исходя из этих правил одинаковые строки в наборе и одинаковые наборы можно удалить.
		
		Если Умножение Тогда
			УмножитьНаборыИУпростить(Приемник, Источник);
		Иначе // Добавление
			ДобавитьНаборыИУпростить(Приемник, Источник);
		КонецЕсли;
	Иначе
		
		Если Умножение Тогда
			УмножитьНаборы(Приемник, Источник);
		Иначе // Добавление
			ДобавитьНаборы(Приемник, Источник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обновление наборов значений доступа объекта, если они изменились.
//  Наборы обновляются в табличной части (если используется) и
// в регистре сведений НаборыЗначенийДоступа.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка, ДокументСсылка, ...
//
Процедура ОбновитьНаборыЗначенийДоступа(СсылкаНаОбъект) Экспорт
	
	УправлениеДоступомСлужебный.ОбновитьНаборыЗначенийДоступа(СсылкаНаОбъект);
	
КонецПроцедуры

// Обработчик подписок ЗаполнитьНаборыЗначенийДоступаТабличныхЧастей* на событие ПередЗаписью
// вызывает заполнение значений доступа табличной части объекта НаборыЗначенийДоступа,
// когда для ограничения доступа к самому объекту используется шаблон #ПоНаборамЗначений.
//  Возможен случай использования подсистемы Управление доступом, когда
// указанной подписки не существует, если для указанной цели наборы не применяются.
//
// Обработчик подписки на событие ПередЗаписью для типов:
//  СправочникОбъект
//  ДокументОбъект
//  ПланВидовХарактеристикОбъект
//  ПланСчетовОбъект
//  ПланВидовРасчетаОбъект
//  БизнесПроцессОбъект
//  ЗадачаОбъект
//  ПланОбменаОбъект
//
Процедура ЗаполнитьНаборыЗначенийДоступаТабличныхЧастей(Объект, Отказ = Неопределено, РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	
	Если Объект.ОбменДанными.Загрузка
	   И НЕ Объект.ДополнительныеСвойства.Свойство("ЗаписатьНаборыЗначенийДоступа") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если НЕ (  ПривилегированныйРежим()
	         И Объект.ДополнительныеСвойства.Свойство(
	               "НаборыЗначенийДоступаТабличнойЧастиЗаполнены")) Тогда
		
		Таблица = УправлениеДоступомСлужебный.ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект);
		УправлениеДоступомСлужебный.ПодготовитьНаборыЗначенийДоступаКЗаписи(Неопределено, Таблица, Ложь);
		Объект.НаборыЗначенийДоступа.Загрузить(Таблица);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в переопределяемом модуле

// Возвращает структуру для удобства описания поставляемых профилей.
//
//  Чтобы указать предустановленный вид доступа,
// нужно в представлении задать строку Предустановленный.
//
//  Чтобы добавить значение доступа нужно указать
// полное имя предопределенного элемента, например,
// "Справочник.ГруппыПользователей.ВсеПользователи".
//
// Идентификатор извлекается из реального элемента в справочнике.
// Не следует брать идентификаторы, полученные произвольным способом.
//
// Пример:
// 
//	// Профиль "Пользователь".
//	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
//	ОписаниеПрофиля.Имя           = "Пользователь";
//	ОписаниеПрофиля.Идентификатор = "09e56dbf-90a0-11de-862c-001d600d9ad2";
//	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Пользователь'");
//	ОписаниеПрофиля.Описание =
//		НСтр("ru = 'Общие разрешенные действия для большинства пользователей.
//		           |Как правило, это права на просмотр данных информационной системы.'");
//	// Использование 1С:Предприятия.
//	ОписаниеПрофиля.Роли.Добавить("ЗапускТонкогоКлиента");
//	ОписаниеПрофиля.Роли.Добавить("ВыводНаПринтерФайлБуферОбмена");
//	ОписаниеПрофиля.Роли.Добавить("СохранениеДанныхПользователя");
//	// ...
//	// Использование программы.
//	ОписаниеПрофиля.Роли.Добавить("БазовыеПрава");
//	ОписаниеПрофиля.Роли.Добавить("ПросмотрОписанияИзмененийПрограммы");
//	ОписаниеПрофиля.Роли.Добавить("ИзменениеТекущегоПользователя");
//	// ...
//	// Использование НСИ.
//	ОписаниеПрофиля.Роли.Добавить("ЧтениеБазовойНСИ");
//	// ...
//	// Типовые возможности.
//	ОписаниеПрофиля.Роли.Добавить("ИспользованиеВариантовОтчетов");
//	ОписаниеПрофиля.Роли.Добавить("ИспользованиеСтруктурыПодчиненности");
//	// ...
//	// Основные возможности профиля.
//	ОписаниеПрофиля.Роли.Добавить("ИспользованиеЗаметок");
//	ОписаниеПрофиля.Роли.Добавить("ИспользованиеНапоминаний");
//	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЗаданий");
//	ОписаниеПрофиля.Роли.Добавить("ИзменениеВыполнениеЗадач");
//	// ...
//	// Виды ограничения доступа профиля.
//	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
//	ОписаниеПрофиля.ВидыДоступа.Добавить("Пользователи", "Предустановленный");
//	ОписаниеПрофиля.ВидыДоступа.Добавить("ХозяйственныеОперации", "Предустановленный");
//	ОписаниеПрофиля.ЗначенияДоступа.Добавить("ХозяйственныеОперации",
//		"Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчет");
//	// ...
//	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
//
Функция НовоеОписаниеПрофиляГруппДоступа() Экспорт
	
	НовоеОписание = Новый Структура;
	НовоеОписание.Вставить("Имя",             ""); // ИмяПредопределенныхДанных используется для привязки
	                                               // поставляемых данных к предопределенному элементу.
	НовоеОписание.Вставить("Идентификатор",   ""); // ИдентификаторПоставляемыхДанных
	НовоеОписание.Вставить("Наименование",    "");
	НовоеОписание.Вставить("Описание",        "");
	НовоеОписание.Вставить("Роли",            Новый Массив);
	НовоеОписание.Вставить("ВидыДоступа",     Новый СписокЗначений);
	НовоеОписание.Вставить("ЗначенияДоступа", Новый СписокЗначений);
	
	Возврат НовоеОписание;
	
КонецФункции

// Добавляет дополнительные типы в процедуре ПриЗаполненииВидовДоступа.
//
// Параметры:
//  ВидДоступа             - СтрокаТаблицыЗначений, добавленная в параметр ВидыДоступа.
//  ТипЗначений            - Тип - дополнительный тип значений доступа.
//  ТипГруппЗначений       - Тип - дополнительный тип групп значений доступа,
//                           может совпадать с типом групп значений указанным ранее
//                           для этого же вида доступа.
//  НесколькоГруппЗначений - Булево - Истина, если у дополнительного типа значений доступа
//                           можно указать несколько групп значений (есть табличная часть ГруппыДоступа).
// 
Процедура ДобавитьДополнительныеТипыВидаДоступа(ВидДоступа, ТипЗначений,
		ТипГруппЗначений = Неопределено, НесколькоГруппЗначений = Ложь) Экспорт
	
	ДополнительныеТипы = ВидДоступа.ДополнительныеТипы;
	
	Если ДополнительныеТипы.Колонки.Количество() = 0 Тогда
		ДополнительныеТипы.Колонки.Добавить("ТипЗначений",            Новый ОписаниеТипов("Тип"));
		ДополнительныеТипы.Колонки.Добавить("ТипГруппЗначений",       Новый ОписаниеТипов("Тип"));
		ДополнительныеТипы.Колонки.Добавить("НесколькоГруппЗначений", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	НоваяСтрока = ДополнительныеТипы.Добавить();
	НоваяСтрока.ТипЗначений            = ТипЗначений;
	НоваяСтрока.ТипГруппЗначений       = ТипГруппЗначений;
	НоваяСтрока.НесколькоГруппЗначений = НесколькоГруппЗначений;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые при обновлении информационной базы

// Возвращает ссылку на поставляемый профиль по идентификатору.
//
// Параметры:
//  Идентификатор - Строка - имя или уникальный идентификатор поставляемого профиля.
//
Функция ПоставляемыйПрофильПоИдентификатору(Идентификатор) Экспорт
	
	Возврат Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
	
КонецФункции

// Возвращает пустую таблицу для заполнения и передачи
// в процедуру ЗаменитьПраваВНастройкахПравОбъектов.
//
Функция ТаблицаЗаменыПравВНастройкахПравОбъектов() Экспорт
	
	Измерения = Метаданные.РегистрыСведений.НастройкиПравОбъектов.Измерения;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТипВладельцев", Измерения.Объект.Тип);
	Таблица.Колонки.Добавить("СтароеИмя",     Измерения.Право.Тип);
	Таблица.Колонки.Добавить("НовоеИмя",      Измерения.Право.Тип);
	
	Возврат Таблица;
	
КонецФункции

// Заменяет права, используемые в настройках прав объектов.
// После выполнения замены будет выполнено обновление вспомогательных данных
// регистра сведений НастройкиПравОбъектов, поэтому следует вызвать
// процедуру однократно, чтобы не снижать производительность.
// 
// Параметры:
//  ТаблицаЗамены  - ТаблицаЗначений с колонками:
//       ТипВладельцев - Пустая ссылка типа владельца прав, например пустая ссылка справочника ПапкиФайлов.
//       СтароеИмя     - Строка, старое имя права, относящееся к указанному типу владельцев.
//       НовоеИмя      - Строка, новое  имя права, относящееся к указанному типу владельцев.
//                       Если указана пустая строка, настройка старого права будет удалена.
//                       Если старому имени поставлено в соответствие два новых имени,
//                       тогда настройка одна старая настройка будет размножена в две новых.
//  
Процедура ЗаменитьПраваВНастройкахПравОбъектов(ТаблицаПереименований) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ТаблицаПереименований", ТаблицаПереименований);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПереименований.ТипВладельцев,
	|	ТаблицаПереименований.СтароеИмя,
	|	ТаблицаПереименований.НовоеИмя
	|ПОМЕСТИТЬ ТаблицаПереименований
	|ИЗ
	|	&ТаблицаПереименований КАК ТаблицаПереименований
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПрав.Объект,
	|	НастройкиПрав.Пользователь,
	|	НастройкиПрав.Право,
	|	МАКСИМУМ(НастройкиПрав.ПравоЗапрещено) КАК ПравоЗапрещено,
	|	МАКСИМУМ(НастройкиПрав.НаследованиеРазрешено) КАК НаследованиеРазрешено,
	|	МАКСИМУМ(НастройкиПрав.ПорядокНастройки) КАК ПорядокНастройки
	|ПОМЕСТИТЬ СтарыеНастройкиПрав
	|ИЗ
	|	РегистрСведений.НастройкиПравОбъектов КАК НастройкиПрав
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиПрав.Объект,
	|	НастройкиПрав.Пользователь,
	|	НастройкиПрав.Право
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтарыеНастройкиПрав.Объект,
	|	СтарыеНастройкиПрав.Пользователь,
	|	ТаблицаПереименований.СтароеИмя,
	|	ТаблицаПереименований.НовоеИмя,
	|	СтарыеНастройкиПрав.ПравоЗапрещено,
	|	СтарыеНастройкиПрав.НаследованиеРазрешено,
	|	СтарыеНастройкиПрав.ПорядокНастройки
	|ПОМЕСТИТЬ НастройкиПрав
	|ИЗ
	|	СтарыеНастройкиПрав КАК СтарыеНастройкиПрав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПереименований КАК ТаблицаПереименований
	|		ПО (ТИПЗНАЧЕНИЯ(СтарыеНастройкиПрав.Объект) = ТИПЗНАЧЕНИЯ(ТаблицаПереименований.ТипВладельцев))
	|			И СтарыеНастройкиПрав.Право = ТаблицаПереименований.СтароеИмя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПрав.НовоеИмя
	|ИЗ
	|	НастройкиПрав КАК НастройкиПрав
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиПрав.Объект,
	|	НастройкиПрав.Пользователь,
	|	НастройкиПрав.НовоеИмя
	|
	|ИМЕЮЩИЕ
	|	НастройкиПрав.НовоеИмя <> """" И
	|	КОЛИЧЕСТВО(НастройкиПрав.НовоеИмя) > 1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НастройкиПрав.НовоеИмя
	|ИЗ
	|	НастройкиПрав КАК НастройкиПрав
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтарыеНастройкиПрав КАК СтарыеНастройкиПрав
	|		ПО НастройкиПрав.Объект = СтарыеНастройкиПрав.Объект
	|			И НастройкиПрав.Пользователь = СтарыеНастройкиПрав.Пользователь
	|			И НастройкиПрав.НовоеИмя = СтарыеНастройкиПрав.Право
	|ГДЕ
	|	НЕ СтарыеНастройкиПрав.Право ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПрав.Объект,
	|	НастройкиПрав.Пользователь,
	|	НастройкиПрав.СтароеИмя,
	|	НастройкиПрав.НовоеИмя,
	|	НастройкиПрав.ПравоЗапрещено,
	|	НастройкиПрав.НаследованиеРазрешено,
	|	НастройкиПрав.ПорядокНастройки
	|ИЗ
	|	НастройкиПрав КАК НастройкиПрав";
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиПравОбъектов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ПовторяющиесяНовыеИмена = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить();
		
		Если ПовторяющиесяНовыеИмена.Количество() > 0 Тогда
			ПовторяющиесяНовыеИменаПрав = "";
			Для каждого Строка Из ПовторяющиесяНовыеИмена Цикл
				ПовторяющиесяНовыеИменаПрав = ПовторяющиесяНовыеИменаПрав
					+ ?(ЗначениеЗаполнено(ПовторяющиесяНовыеИменаПрав), "," + Символы.ПС, "")
					+ Строка.НовоеИмя;
			КонецЦикла;
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка в параметрах процедуры ПереименоватьПравоВНастройкахПравОбъектов
				           |общего модуля УправлениеДоступом.
				           |
				           |После обновления будут повторяться настройки следующих новых имен прав:
				           |%1.'"),
				ПовторяющиесяНовыеИменаПрав);
		КонецЕсли;
		
		ТаблицаЗамены = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
		
		НаборЗаписей = РегистрыСведений.НастройкиПравОбъектов.СоздатьНаборЗаписей();
		
		Для каждого Строка Из ТаблицаЗамены Цикл
			НаборЗаписей.Отбор.Объект.Установить(Строка.Объект);
			НаборЗаписей.Отбор.Пользователь.Установить(Строка.Пользователь);
			НаборЗаписей.Отбор.Право.Установить(Строка.СтароеИмя);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЦикла;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		Для каждого Строка Из ТаблицаЗамены Цикл
			Если Строка.НовоеИмя = "" Тогда
				Продолжить;
			КонецЕсли;
			НаборЗаписей.Отбор.Объект.Установить(Строка.Объект);
			НаборЗаписей.Отбор.Пользователь.Установить(Строка.Пользователь);
			НаборЗаписей.Отбор.Право.Установить(Строка.НовоеИмя);
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			НоваяЗапись.Право = Строка.НовоеИмя;
			НаборЗаписей.Записать();
		КонецЦикла;
		
		РегистрыСведений.НастройкиПравОбъектов.ОбновитьВспомогательныеДанныеРегистра();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые для обновления вспомогательных данных

// Обновляет список ролей пользователей информационной базы
// по их текущим принадлежностям к группам доступа.
//  Пользователи с ролью "ПолныеПрава" игнорируется.
// 
// Параметры:
//  МассивПользователей - Массив, Неопределено, Тип - массив из 
//     элементов СправочникСсылка.Пользователи или СправочникСсылка.ВнешниеПользователи.
//     Если Неопределено, то обновить роли всех пользователей.
//     Если Тип = Справочник.ВнешниеПользователи, то будут обновлены роли всех внешних пользователей,
//     иначе будут обновлены роли всех пользователей.
//
//  ПарольПользователяСервиса - Строка - Пароль для авторизации в менеджере сервиса.
//
Процедура ОбновитьРолиПользователей(Знач МассивПользователей = Неопределено, Знач ПарольПользователяСервиса = Неопределено) Экспорт
	
	УправлениеДоступомСлужебный.ОбновитьРолиПользователей(МассивПользователей, ПарольПользователяСервиса);
	
КонецПроцедуры

// Выполняет последовательное заполнение и обновление данных, необходимых для работы
// подсистемы УправленияДоступом в режиме ограничения доступа на уровне записей.
// 
//  При включенном режиме ограничения доступа на уровне записей заполняет наборы
// значений доступа. Заполнение выполняется частями при каждом запуске, пока все
// наборы значений доступа не будут заполнены.
//  При отключении режима ограничения доступа на уровне записей наборы значений доступа
// (заполненные ранее) удаляются при перезаписи объектов, а не все сразу.
//  Независимо от режима ограничения доступа на уровне записей обновляет вторичные
// данные: группы значений доступа и дополнительные поля в существующих наборах значений доступа.
//  После завершения всех обновлений и заполнений отключает использование регламентного
// задания.
//
//  Сведения о состоянии работы записываются в журнал регистрации.
//
//  Возможно вызывать программно, например, при обновлении информационной базы.
// Также для целей обновления есть форма Справочник.ГруппыДоступа.ОбновлениеДанныхОграниченияДоступа,
// с помощью которой можно сделать интерактивное обновление данных ограничения доступа
// при обновлении информационной базы.
//
Процедура ЗаполнениеДанныхДляОграниченияДоступа(КоличествоДанных = 0) Экспорт
	
	УправлениеДоступомСлужебный.ЗаполнениеДанныхДляОграниченияДоступа(КоличествоДанных);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Дополнение к процедуре ЗаполнитьНаборыЗначенийДоступа

// Приводит таблицу наборов значений к формату табличной части или набора записей.
//  Выполняется перед записью в регистр НаборыЗначенийДоступа или
// перед записью объекта с табличной частью НаборыЗначенийДоступа.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка.*, ДокументСсылка.*, ...
//  Таблица        - РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа
//
Процедура УточнитьНаборыЗначенийДоступа(СсылкаНаОбъект, Таблица)
	
	ИменаВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.Параметры().СвойстваВидовДоступа.ПоИменам;
	
	ТипыВладельцевНастроекПрав = УправлениеДоступомСлужебныйПовтИсп.Параметры(
		).ВозможныеПраваДляНастройкиПравОбъектов.ПоТипамСсылок;
	
	Для каждого Строка Из Таблица Цикл
		
		Если ТипыВладельцевНастроекПрав.Получить(ТипЗнч(Строка.ЗначениеДоступа)) <> Неопределено
		   И НЕ ЗначениеЗаполнено(Строка.Уточнение) Тогда
			
			Строка.Уточнение = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СсылкаНаОбъект));
		КонецЕсли;
		
		Если Строка.ВидДоступа = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ВидДоступа = "ПравоЧтения"
		 ИЛИ Строка.ВидДоступа = "ПравоИзменения" Тогда
			
			Если ТипЗнч(Строка.ЗначениеДоступа) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
				Строка.ЗначениеДоступа =
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Строка.ЗначениеДоступа));
			КонецЕсли;
			
			Если Строка.ВидДоступа = "ПравоЧтения" Тогда
				Строка.Уточнение = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
			Иначе
				Строка.Уточнение = Строка.ЗначениеДоступа;
			КонецЕсли;
		
		ИначеЕсли ИменаВидовДоступа.Получить(Строка.ВидДоступа) <> Неопределено
		      ИЛИ Строка.ВидДоступа = "НастройкиПрав" Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Объект ""%1"" сформировал набор значений доступа,
				           |содержащий известный вид доступа ""%2"", который не требуется указывать.
				           |
				           |Указывать требуется только специальные виды доступа
				           |""ПравоЧтения"", ""ПравоИзменения"", если они используются.'"),
				ТипЗнч(СсылкаНаОбъект),
				Строка.ВидДоступа);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Объект ""%1"" сформировал набор значений доступа,
				           |содержащий неизвестный вид доступа ""%2"".'"),
				ТипЗнч(СсылкаНаОбъект),
				Строка.ВидДоступа);
		КонецЕсли;
		
		Строка.ВидДоступа = "";
	КонецЦикла;
	
КонецПроцедуры

// Дополнение к процедуре ДобавитьНаборыЗначенийДоступа

Функция НаборыТаблицы(Таблица, НормализацияПрав = Ложь)
	
	НаборыТаблицы = Новый Соответствие;
	
	Для каждого Строка Из Таблица Цикл
		Набор = НаборыТаблицы.Получить(Строка.НомерНабора);
		Если Набор = Неопределено Тогда
			Набор = Новый Структура;
			Набор.Вставить("Чтение", Ложь);
			Набор.Вставить("Изменение", Ложь);
			Набор.Вставить("Строки", Новый Массив);
			НаборыТаблицы.Вставить(Строка.НомерНабора, Набор);
		КонецЕсли;
		Если Строка.Чтение Тогда
			Набор.Чтение = Истина;
		КонецЕсли;
		Если Строка.Изменение Тогда
			Набор.Изменение = Истина;
		КонецЕсли;
		Набор.Строки.Добавить(Строка);
	КонецЦикла;
	
	Если НормализацияПрав Тогда
		Для каждого ОписаниеНабора Из НаборыТаблицы Цикл
			Набор = ОписаниеНабора.Значение;
			
			Если НЕ Набор.Чтение И НЕ Набор.Изменение Тогда
				Набор.Чтение    = Истина;
				Набор.Изменение = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НаборыТаблицы;
	
КонецФункции

Процедура ДобавитьНаборы(Приемник, Источник)
	
	НаборыПриемника = НаборыТаблицы(Приемник);
	НаборыИсточника = НаборыТаблицы(Источник);
	
	МаксимальныйНомерНабора = -1;
	
	Для каждого ОписаниеНабораПриемника Из НаборыПриемника Цикл
		НаборПриемника = ОписаниеНабораПриемника.Значение;
		
		Если НЕ НаборПриемника.Чтение И НЕ НаборПриемника.Изменение Тогда
			НаборПриемника.Чтение    = Истина;
			НаборПриемника.Изменение = Истина;
		КонецЕсли;
		
		Для каждого Строка Из НаборПриемника.Строки Цикл
			Строка.Чтение    = НаборПриемника.Чтение;
			Строка.Изменение = НаборПриемника.Изменение;
		КонецЦикла;
		
		Если ОписаниеНабораПриемника.Ключ > МаксимальныйНомерНабора Тогда
			МаксимальныйНомерНабора = ОписаниеНабораПриемника.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	НомерНовогоНабора = МаксимальныйНомерНабора + 1;
	
	Для каждого ОписаниеНабораИсточника Из НаборыИсточника Цикл
		НаборИсточника = ОписаниеНабораИсточника.Значение;
		
		Если НЕ НаборИсточника.Чтение И НЕ НаборИсточника.Изменение Тогда
			НаборИсточника.Чтение    = Истина;
			НаборИсточника.Изменение = Истина;
		КонецЕсли;
		
		Для каждого СтрокаИсточника Из НаборИсточника.Строки Цикл
			НоваяСтрока = Приемник.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
			НоваяСтрока.НомерНабора = НомерНовогоНабора;
			НоваяСтрока.Чтение      = НаборИсточника.Чтение;
			НоваяСтрока.Изменение   = НаборИсточника.Изменение;
		КонецЦикла;
		
		НомерНовогоНабора = НомерНовогоНабора + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура УмножитьНаборы(Приемник, Источник)
	
	НаборыПриемника = НаборыТаблицы(Приемник);
	НаборыИсточника = НаборыТаблицы(Источник, Истина);
	Таблица = ТаблицаНаборыЗначенийДоступа();
	
	ТекущийНомерНабора = 1;
	Для каждого ОписаниеНабораПриемника Из НаборыПриемника Цикл
			НаборПриемника = ОписаниеНабораПриемника.Значение;
		
		Если НЕ НаборПриемника.Чтение И НЕ НаборПриемника.Изменение Тогда
			НаборПриемника.Чтение    = Истина;
			НаборПриемника.Изменение = Истина;
		КонецЕсли;
		
		Для каждого ОписаниеНабораИсточника Из НаборыИсточника Цикл
			НаборИсточника = ОписаниеНабораИсточника.Значение;
			
			УмножениеЧтения    = НаборПриемника.Чтение    И НаборИсточника.Чтение;
			УмножениеИзменения = НаборПриемника.Изменение И НаборИсточника.Изменение;
			Если НЕ УмножениеЧтения И НЕ УмножениеИзменения Тогда
				Продолжить;
			КонецЕсли;
			Для каждого СтрокаПриемника Из НаборПриемника.Строки Цикл
				Строка = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, СтрокаПриемника);
				Строка.НомерНабора = ТекущийНомерНабора;
				Строка.Чтение      = УмножениеЧтения;
				Строка.Изменение   = УмножениеИзменения;
			КонецЦикла;
			Для каждого СтрокаИсточника Из НаборИсточника.Строки Цикл
				Строка = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, СтрокаИсточника);
				Строка.НомерНабора = ТекущийНомерНабора;
				Строка.Чтение      = УмножениеЧтения;
				Строка.Изменение   = УмножениеИзменения;
			КонецЦикла;
			ТекущийНомерНабора = ТекущийНомерНабора + 1;
		КонецЦикла;
	КонецЦикла;
	
	Приемник = Таблица;
	
КонецПроцедуры

Процедура ДобавитьНаборыИУпростить(Приемник, Источник)
	
	НаборыПриемника = НаборыТаблицы(Приемник);
	НаборыИсточника = НаборыТаблицы(Источник);
	
	НаборыРезультата   = Новый Соответствие;
	КодыТипов          = Новый Соответствие;
	КодыПеречислений   = Новый Соответствие;
	ТаблицаСтрокНабора = Новый ТаблицаЗначений;
	
	ЗаполнитьКодыТиповИТаблицуСтрокНабора(КодыТипов, КодыПеречислений, ТаблицаСтрокНабора);
	
	ТекущийНомерНабора = 1;
	
	ДобавитьНаборыКРезультатуСУпрощением(
		НаборыРезультата, НаборыПриемника, ТекущийНомерНабора, КодыТипов, КодыПеречислений, ТаблицаСтрокНабора);
	
	ДобавитьНаборыКРезультатуСУпрощением(
		НаборыРезультата, НаборыИсточника, ТекущийНомерНабора, КодыТипов, КодыПеречислений, ТаблицаСтрокНабора);
	
	ЗаполнитьПриемникПоНаборамРезультата(Приемник, НаборыРезультата);
	
КонецПроцедуры

Процедура УмножитьНаборыИУпростить(Приемник, Источник)
	
	НаборыПриемника = НаборыТаблицы(Приемник);
	НаборыИсточника = НаборыТаблицы(Источник, Истина);
	
	НаборыРезультата   = Новый Соответствие;
	КодыТипов          = Новый Соответствие;
	КодыПеречислений   = Новый Соответствие;
	ТаблицаСтрокНабора = Новый ТаблицаЗначений;
	
	ЗаполнитьКодыТиповИТаблицуСтрокНабора(КодыТипов, КодыПеречислений, ТаблицаСтрокНабора);
	
	ТекущийНомерНабора = 1;
	
	Для каждого ОписаниеНабораПриемника Из НаборыПриемника Цикл
		НаборПриемника = ОписаниеНабораПриемника.Значение;
		
		Если НЕ НаборПриемника.Чтение И НЕ НаборПриемника.Изменение Тогда
			НаборПриемника.Чтение    = Истина;
			НаборПриемника.Изменение = Истина;
		КонецЕсли;
		
		Для каждого ОписаниеНабораИсточника Из НаборыИсточника Цикл
			НаборИсточника = ОписаниеНабораИсточника.Значение;
			
			УмножениеЧтения    = НаборПриемника.Чтение    И НаборИсточника.Чтение;
			УмножениеИзменения = НаборПриемника.Изменение И НаборИсточника.Изменение;
			Если НЕ УмножениеЧтения И НЕ УмножениеИзменения Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиНабора = ТаблицаСтрокНабора.Скопировать();
			
			Для каждого СтрокаПриемника Из НаборПриемника.Строки Цикл
				Строка = СтрокиНабора.Добавить();
				Строка.ВидДоступа      = СтрокаПриемника.ВидДоступа;
				Строка.ЗначениеДоступа = СтрокаПриемника.ЗначениеДоступа;
				Строка.Уточнение       = СтрокаПриемника.Уточнение;
				ЗаполнитьИдентификаторСтроки(Строка, КодыТипов, КодыПеречислений);
			КонецЦикла;
			Для каждого СтрокаИсточника Из НаборИсточника.Строки Цикл
				Строка = СтрокиНабора.Добавить();
				Строка.ВидДоступа      = СтрокаИсточника.ВидДоступа;
				Строка.ЗначениеДоступа = СтрокаИсточника.ЗначениеДоступа;
				Строка.Уточнение       = СтрокаИсточника.Уточнение;
				ЗаполнитьИдентификаторСтроки(Строка, КодыТипов, КодыПеречислений);
			КонецЦикла;
			
			СтрокиНабора.Свернуть("ИдентификаторСтроки, ВидДоступа, ЗначениеДоступа, Уточнение");
			СтрокиНабора.Сортировать("ИдентификаторСтроки");
			
			ИдентификаторНабора = "";
			Для каждого Строка Из СтрокиНабора Цикл
				ИдентификаторНабора = ИдентификаторНабора + Строка.ИдентификаторСтроки + Символы.ПС;
			КонецЦикла;
			
			СуществующийНабор = НаборыРезультата.Получить(ИдентификаторНабора);
			Если СуществующийНабор = Неопределено Тогда
				
				СвойстваНабора = Новый Структура;
				СвойстваНабора.Вставить("Чтение",      УмножениеЧтения);
				СвойстваНабора.Вставить("Изменение",   УмножениеИзменения);
				СвойстваНабора.Вставить("Строки",      СтрокиНабора);
				СвойстваНабора.Вставить("НомерНабора", ТекущийНомерНабора);
				НаборыРезультата.Вставить(ИдентификаторНабора, СвойстваНабора);
				ТекущийНомерНабора = ТекущийНомерНабора + 1;
			Иначе
				Если УмножениеЧтения Тогда
					СуществующийНабор.Чтение = Истина;
				КонецЕсли;
				Если УмножениеИзменения Тогда
					СуществующийНабор.Изменение = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьПриемникПоНаборамРезультата(Приемник, НаборыРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьКодыТиповИТаблицуСтрокНабора(КодыТипов, КодыПеречислений, ТаблицаСтрокНабора)
	
	КодыПеречислений = УправлениеДоступомСлужебныйПовтИсп.КодыПеречислений();
	
	КодыТипов = УправлениеДоступомСлужебныйПовтИсп.КодыТиповСсылок("ОпределяемыйТип.ЗначениеДоступа");
	
	ДлинаКодаТипа = 0;
	Для каждого КлючИЗначение Из КодыТипов Цикл
		ДлинаКодаТипа = СтрДлина(КлючИЗначение.Значение);
		Прервать;
	КонецЦикла;
	
	ДлинаИдентификатораСтроки =
		20 // Строка имени вида доступа
		+ ДлинаКодаТипа
		+ 36 // Длина строкового представления уникального идентификатора (значения доступа)
		+ 36 // Длина строкового представления уникального идентификатора (уточнения)
		+ 6; // Место для разделителей
	
	ТаблицаСтрокНабора = Новый ТаблицаЗначений;
	ТаблицаСтрокНабора.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(ДлинаИдентификатораСтроки)));
	ТаблицаСтрокНабора.Колонки.Добавить("ВидДоступа",          Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
	ТаблицаСтрокНабора.Колонки.Добавить("ЗначениеДоступа",     Метаданные.ОпределяемыеТипы.ЗначениеДоступа.Тип);
	ТаблицаСтрокНабора.Колонки.Добавить("Уточнение",           Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторСтроки(Строка, КодыТипов, КодыПеречислений)
	
	Если Строка.ЗначениеДоступа = Неопределено Тогда
		ИдентификаторЗначенияДоступа = "";
	Иначе
		ИдентификаторЗначенияДоступа = КодыПеречислений.Получить(Строка.ЗначениеДоступа);
		Если ИдентификаторЗначенияДоступа = Неопределено Тогда
			ИдентификаторЗначенияДоступа = Строка(Строка.ЗначениеДоступа.УникальныйИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
	Строка.ИдентификаторСтроки = Строка.ВидДоступа + ";"
		+ КодыТипов.Получить(ТипЗнч(Строка.ЗначениеДоступа)) + ";"
		+ ИдентификаторЗначенияДоступа + ";"
		+ Строка.Уточнение.УникальныйИдентификатор() + ";";
	
КонецПроцедуры

Процедура ДобавитьНаборыКРезультатуСУпрощением(НаборыРезультата, ДобавляемыеНаборы, ТекущийНомерНабора, КодыТипов, КодыПеречислений, ТаблицаСтрокНабора)
	
	Для каждого ОписаниеДобавляемогоНабора Из ДобавляемыеНаборы Цикл
		ДобавляемыйНабор = ОписаниеДобавляемогоНабора.Значение;
		
		Если НЕ ДобавляемыйНабор.Чтение И НЕ ДобавляемыйНабор.Изменение Тогда
			ДобавляемыйНабор.Чтение    = Истина;
			ДобавляемыйНабор.Изменение = Истина;
		КонецЕсли;
		
		СтрокиНабора = ТаблицаСтрокНабора.Скопировать();
		
		Для каждого СтрокаДобавляемогоНабора Из ДобавляемыйНабор.Строки Цикл
			Строка = СтрокиНабора.Добавить();
			Строка.ВидДоступа      = СтрокаДобавляемогоНабора.ВидДоступа;
			Строка.ЗначениеДоступа = СтрокаДобавляемогоНабора.ЗначениеДоступа;
			Строка.Уточнение       = СтрокаДобавляемогоНабора.Уточнение;
			ЗаполнитьИдентификаторСтроки(Строка, КодыТипов, КодыПеречислений);
		КонецЦикла;
		
		СтрокиНабора.Свернуть("ИдентификаторСтроки, ВидДоступа, ЗначениеДоступа, Уточнение");
		СтрокиНабора.Сортировать("ИдентификаторСтроки");
		
		ИдентификаторНабора = "";
		Для каждого Строка Из СтрокиНабора Цикл
			ИдентификаторНабора = ИдентификаторНабора + Строка.ИдентификаторСтроки + Символы.ПС;
		КонецЦикла;
		
		СуществующийНабор = НаборыРезультата.Получить(ИдентификаторНабора);
		Если СуществующийНабор = Неопределено Тогда
			
			СвойстваНабора = Новый Структура;
			СвойстваНабора.Вставить("Чтение",      ДобавляемыйНабор.Чтение);
			СвойстваНабора.Вставить("Изменение",   ДобавляемыйНабор.Изменение);
			СвойстваНабора.Вставить("Строки",      СтрокиНабора);
			СвойстваНабора.Вставить("НомерНабора", ТекущийНомерНабора);
			НаборыРезультата.Вставить(ИдентификаторНабора, СвойстваНабора);
			
			ТекущийНомерНабора = ТекущийНомерНабора + 1;
		Иначе
			Если ДобавляемыйНабор.Чтение Тогда
				СуществующийНабор.Чтение = Истина;
			КонецЕсли;
			Если ДобавляемыйНабор.Изменение Тогда
				СуществующийНабор.Изменение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьПриемникПоНаборамРезультата(Приемник, НаборыРезультата)
	
	Приемник = ТаблицаНаборыЗначенийДоступа();
	
	Для каждого ОписаниеНабора Из НаборыРезультата Цикл
		СвойстваНабора = ОписаниеНабора.Значение;
		Для каждого Строка Из СвойстваНабора.Строки Цикл
			НоваяСтрока = Приемник.Добавить();
			НоваяСтрока.НомерНабора     = СвойстваНабора.НомерНабора;
			НоваяСтрока.ВидДоступа      = Строка.ВидДоступа;
			НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
			НоваяСтрока.Уточнение       = Строка.Уточнение;
			НоваяСтрока.Чтение          = СвойстваНабора.Чтение;
			НоваяСтрока.Изменение       = СвойстваНабора.Изменение;
		КонецЦикла;
	КонецЦикла;
	
КонецФункции

// Дополнение к процедурам:
// - ПриСозданииФормыЗначенияДоступа
// - ГруппыЗначенийДоступаРазрешающиеИзменениеЗначенийДоступа

Функция СвойстваГруппЗначенияДоступа(ТипЗначенияДоступа, ЗаголовокОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвойстваГрупп = Новый Структура;
	
	СвойстваВидаДоступа = УправлениеДоступомСлужебныйПовтИсп.Параметры(
		).СвойстваВидовДоступа.ЗначенияДоступаСГруппами.ПоТипам.Получить(ТипЗначенияДоступа);
	
	Если СвойстваВидаДоступа = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокОшибки + Символы.ПС + Символы.ПС +
			НСтр("ru = 'Для значений доступа типа ""%1""
			           |не используются группы значений доступа.'"),
			Строка(ТипЗначенияДоступа));
	КонецЕсли;
	
	СвойстваГрупп.Вставить("ВидДоступа", СвойстваВидаДоступа.Имя);
	СвойстваГрупп.Вставить("Тип",        СвойстваВидаДоступа.ТипГруппЗначений);
	
	СвойстваГрупп.Вставить("Таблица",    Метаданные.НайтиПоТипу(
		СвойстваВидаДоступа.ТипГруппЗначений).ПолноеИмя());
	
	СвойстваГрупп.Вставить("ПустаяСсылкаТипаЗначений",
		УправлениеДоступомСлужебный.ПустаяСсылкаОбъектаМетаданных(ТипЗначенияДоступа));
	
	Возврат СвойстваГрупп;
	
КонецФункции
