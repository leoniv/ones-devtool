&НаКлиенте
Перем ПараметрыОбработчика;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		ТекстОшибки = НСтр("ru = 'Недостаточно прав для выполнения операции.'");
		Возврат; // Отказ устанавливается в ПриОткрытии.
	КонецЕсли;
	
	РежимУдаления = "Полный";
	ПриСозданииНаСервереУстановитьТекстПоясненияКОбработке();
	ВидимостьДоступность(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ВидимостьДоступность(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация Тогда
		Отказ = Истина;
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
		Обработчик = Новый ОписаниеОповещения("ПередЗакрытиемОтветНаВопрос", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Удаление помеченных еще выполняется.
		|Прервать?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Прервать);
		Кнопки.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Не прерывать'"));
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Пропустить);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемОтветНаВопрос(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ = КодВозвратаДиалога.Прервать Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборРежимаУдаления; // Чтобы пропустить вопрос.
		Закрыть(); // Отмена фонового задания выполняется в обработчике ПриЗакрытии().
	Иначе
		ФоновоеЗаданиеПроверитьНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура РежимУдаленияПриИзменении(Элемент)
	ВидимостьДоступность(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеКОбработкеОбработкаНавигационнойСсылки(Элемент, Ссылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ОтборИмяПриложения", "1CV8,1CV8C,WebClient");
	СтандартныеПодсистемыКлиент.ОткрытьСписокАктивныхПользователей(ПараметрыФормы);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоПомеченныхНаУдаление

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеПометкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПомеченныхНаУдаление.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(ТекущиеДанные, ТекущиеДанные.Пометка, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НеУдаленные

&НаКлиенте
Процедура НеУдаленныеПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ПоказатьСвязиНеУдаленныхНаКлиенте", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьВыделенныеОбъектыТаблицыНаУдаление(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СвязиНеУдаленных

&НаКлиенте
Процедура СвязиНеУдаленныхПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СвязиНеУдаленныхПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ПометитьВыделенныеОбъектыТаблицыНаУдаление(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СвязиНеУдаленныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьОбъектТаблицы(Элемент);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаВыборРежимаУдаления Тогда
		Если РежимУдаления = "Полный" Тогда
			ЗапуститьУдалениеПомеченныхНаКлиенте(Ложь);
		Иначе
			ЗаполнитьДеревоПомеченныхНаУдалениеНаКлиенте();
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПомеченныеНаУдаление Тогда
		ЗапуститьУдалениеПомеченныхНаКлиенте(Ложь);
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПричиныНевозможностиУдаления Тогда
		ЗапуститьУдалениеПомеченныхНаКлиенте(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборРежимаУдаления;
	ВидимостьДоступность(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеУстановитьВсе(Команда)
	
	ЭлементыСписка = ДеревоПомеченныхНаУдаление.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыСписка Цикл
		ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(Элемент, Истина, Истина);
		Родитель = Элемент.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ДеревоПомеченныхНаУдалениеПроверитьРодителя(Элемент)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеСнятьВсе(Команда)
	
	ЭлементыСписка = ДеревоПомеченныхНаУдаление.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыСписка Цикл
		ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(Элемент, Ложь, Истина);
		Родитель = Элемент.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ДеревоПомеченныхНаУдалениеПроверитьРодителя(Элемент)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеИзменить(Команда)
	ПоказатьОбъектТаблицы(Элементы.ДеревоПомеченныхНаУдаление);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеОбновить(Команда)
	ЗаполнитьДеревоПомеченныхНаУдалениеНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеЗаменитьНа(Команда)
	МассивИдентификаторов = Элементы.НеУдаленные.ВыделенныеСтроки;
	Если МассивИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		СтрокаТаблицы = НеУдаленные.НайтиПоИдентификатору(Идентификатор);
		Если ТипЗнч(СтрокаТаблицы.УдаляемыйСсылка) = Тип("Строка") Тогда
			Продолжить; // Пропуск групп.
		КонецЕсли;
		МассивСсылок.Добавить(СтрокаТаблицы.УдаляемыйСсылка);
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите объекты'"));
		Возврат;
	КонецЕсли;
	
	СтандартныеПодсистемыКлиент.ЗаменитьВыделенные(МассивСсылок);
КонецПроцедуры

&НаКлиенте
Процедура НеУдаленныеУдалить(Команда)
	ПометитьВыделенныеОбъектыТаблицыНаУдаление(Элементы.НеУдаленные);
КонецПроцедуры

&НаКлиенте
Процедура СвязиНеУдаленныхУдалить(Команда)
	ПометитьВыделенныеОбъектыТаблицыНаУдаление(Элементы.СвязиНеУдаленных);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики асинхронных диалогов

&НаКлиенте
Процедура ПометитьВыделенныеОбъектыТаблицыНаУдалениеЗавершение(Ответ, ПараметрыВыполнения) Экспорт
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПометкаУдаления = Не ПараметрыВыполнения.ЕстьПомеченныеНаУдаление;
	РезультатРаботыСервера = ИзменитьПометкуУдаленияОбъектов(ПараметрыВыполнения.МассивСсылок, ПометкаУдаления);
	Для Каждого СтрокаТаблицы Из ПараметрыВыполнения.МассивСтрокТаблицы Цикл
		Если СтрокаТаблицы.ПометкаУдаления = ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.ПометкаУдаления = ПометкаУдаления;
		СтрокаТаблицы.НомерКартинки   = СтрокаТаблицы.НомерКартинки + ?(ПометкаУдаления, 1, -1);
	КонецЦикла;
	СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, РезультатРаботыСервера);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Результат = ФоновоеЗаданиеПолучитьРезультат();
	Если Результат.ФоновоеЗаданиеВыполнено Тогда
		СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, Результат);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоПомеченныхНаУдалениеНаКлиенте()
	Состояние(НСтр("ru = 'Выполняется поиск помеченных на удаление объектов'"));
	РезультатЗаполнения = ЗаполнитьДеревоПомеченныхНаУдаление();
	Если РезультатЗаполнения.КоличествоТипов = 1 Тогда
		Идентификатор = ДеревоПомеченныхНаУдаление.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		Элементы.ДеревоПомеченныхНаУдаление.Развернуть(Идентификатор, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьУдалениеПомеченныхНаКлиенте(ПовторныйЗапуск)
	Если РежимУдаления = "Полный" Тогда
		Состояние(НСтр("ru = 'Выполняется поиск и удаление помеченных объектов'"));
	Иначе
		Состояние(НСтр("ru = 'Выполняется удаление выбранных объектов'"));
	КонецЕсли;
	
	Результат = ФоновоеЗаданиеЗапустить(ПовторныйЗапуск);
	Если Результат.ФоновоеЗаданиеЗапущено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
		ПараметрыОбработчика.МаксимальныйИнтервал = 5;
	КонецЕсли;
	СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(ЭтотОбъект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСвязиНеУдаленныхНаКлиенте()
	СтрокаДерева = Элементы.НеУдаленные.ТекущиеДанные;
	Если СтрокаДерева = Неопределено Или СтрокаДерева.НомерКартинки < 1 Тогда
		// Ничего не выбрано или выбрана группа.
		Элементы.СтраницыВариантовОтображенияПричин.ТекущаяСтраница = Элементы.СтраницаВыберитеНеУдаленныйОбъект;
		ТекстОшибки = НСтр("ru = 'Выберите объект, чтобы узнать причину,
		|по которой его не удалось удалить.'");
		Возврат;
	КонецЕсли;
	
	// Выбрана ссылка не удаленного объекта.
	Скрываемые = СвязиНеУдаленных.НайтиСтроки(Новый Структура("Видимость", Истина));
	Для Каждого СтрокаТаблицы Из Скрываемые Цикл
		СтрокаТаблицы.Видимость = Ложь;
	КонецЦикла;
	
	ТекстОшибки = "";
	ПоказыватьТекстОшибки = Истина;
	Показываемые = СвязиНеУдаленных.НайтиСтроки(Новый Структура("УдаляемыйСсылка", СтрокаДерева.УдаляемыйСсылка));
	Для Каждого СтрокаТаблицы Из Показываемые Цикл
		СтрокаТаблицы.Видимость = Истина;
		Если СтрокаТаблицы.ЭтоОшибка Тогда
			ТекстОшибки = СтрокаТаблицы.ОбнаруженныйСсылка;
		Иначе
			Если ПоказыватьТекстОшибки Тогда
				Элементы.СвязиНеУдаленных.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
				ПоказыватьТекстОшибки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоказыватьТекстОшибки Тогда
		Элементы.СтраницыВариантовОтображенияПричин.ТекущаяСтраница = Элементы.СтраницаТекстОшибки;
	Иначе
		Элементы.СтраницыВариантовОтображенияПричин.ТекущаяСтраница = Элементы.СтраницаПричиныНеУдаления;
		
		Шаблон = НСтр("ru = 'Места использования объекта ""%1"" (%2):'");
		КраткоеПредставлениеОбъекта = СтрокаДерева.Представление;
		Если СтрДлина(КраткоеПредставлениеОбъекта) > 50 Тогда
			КраткоеПредставлениеОбъекта = СокрП(Лев(КраткоеПредставлениеОбъекта, 50)) + "...";
		КонецЕсли;
		Элементы.НадписьСвязиНеУдаленных.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			КраткоеПредставлениеОбъекта,
			Формат(СтрокаДерева.КоличествоСвязей, "ЧН=0; ЧГ=")
		);
		Элементы.НадписьСвязиНеУдаленных.Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Шаблон,
			СтрокаДерева.Представление,
			Формат(СтрокаДерева.КоличествоСвязей, "ЧН=0; ЧГ=")
		);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбъектТаблицы(ТаблицаЭлемент)
	СтрокаТаблицы = ТаблицаЭлемент.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Неопределено;
	Если Не СтрокаТаблицы.Свойство("Значение", Значение)
		И Не СтрокаТаблицы.Свойство("ОбнаруженныйСсылка", Значение)
		И Не СтрокаТаблицы.Свойство("УдаляемыйСсылка", Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Если СтрокаТаблицы.Свойство("ЭтоКонстанта") И СтрокаТаблицы.ЭтоКонстанта Тогда
			ПутьКФорме = Значение + ".ФормаКонстант";
		Иначе
			ПутьКФорме = Значение + ".ФормаСписка";
		КонецЕсли;
		ОткрытьФорму(ПутьКФорме);
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		ОписаниеЗначения = Значение.Получить(0);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ОписаниеЗначения.Значение);
		ОткрытьФорму(ОписаниеЗначения.Представление + ".ФормаЗаписи", ПараметрыФормы, ЭтотОбъект);
	Иначе
		ПоказатьЗначение(, Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПометитьВыделенныеОбъектыТаблицыНаУдаление(ТаблицаЭлемент)
	МассивИдентификаторов = ТаблицаЭлемент.ВыделенныеСтроки;
	КоличествоВыделено = МассивИдентификаторов.Количество();
	Если КоличествоВыделено = 0 Тогда
		Возврат;
	КонецЕсли;
	ТаблицаРеквизит = ЭтаФорма[ТаблицаЭлемент.Имя];
	МассивСтрокТаблицы = Новый Массив;
	МассивСсылокПомеченныхНаУдаление = Новый Массив;
	МассивСсылокНеПомеченныхНаУдаление = Новый Массив;
	ЕстьПомеченныеНаУдаление = Ложь;
	ИмяРеквизитаЗначение = "";
	Значение = Неопределено;
	СсылочногоТипа = Неопределено;
	ЕстьСвойствоСсылочногоТипа = Ложь;
	Для Каждого Идентификатор Из МассивИдентификаторов Цикл
		СтрокаТаблицы = ТаблицаРеквизит.НайтиПоИдентификатору(Идентификатор);
		Если ИмяРеквизитаЗначение = "" Тогда
			Если СтрокаТаблицы.Свойство("Значение") Тогда
				ИмяРеквизитаЗначение = "Значение";
			ИначеЕсли СтрокаТаблицы.Свойство("ОбнаруженныйСсылка") Тогда
				ИмяРеквизитаЗначение = "ОбнаруженныйСсылка";
			ИначеЕсли СтрокаТаблицы.Свойство("УдаляемыйСсылка") Тогда
				ИмяРеквизитаЗначение = "УдаляемыйСсылка";
			Иначе
				Возврат;
			КонецЕсли;
			ЕстьСвойствоСсылочногоТипа = СтрокаТаблицы.Свойство("СсылочногоТипа");
		КонецЕсли;
		СтрокаТаблицы.Свойство(ИмяРеквизитаЗначение, Значение);
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Продолжить; // Пропуск групп.
		ИначеЕсли ЕстьСвойствоСсылочногоТипа И Не СтрокаТаблицы["СсылочногоТипа"] Тогда
			Если КоличествоВыделено = 1 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Удаление записи регистра выполняется из ее карточки'"));
				Возврат;
			Иначе
				Продолжить; // Пропуск записей регистров.
			КонецЕсли;
		КонецЕсли;
		Если СтрокаТаблицы.ПометкаУдаления Тогда
			ЕстьПомеченныеНаУдаление = Истина;
			МассивСсылокПомеченныхНаУдаление.Добавить(Значение);
		Иначе
			МассивСсылокНеПомеченныхНаУдаление.Добавить(Значение);
		КонецЕсли;
		МассивСтрокТаблицы.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	КоличествоМожноУдалить = МассивСтрокТаблицы.Количество();
	Если КоличествоМожноУдалить = 0 Тогда
		Если КоличествоВыделено = 1 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите объект'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Выберите объекты'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("МассивСтрокТаблицы", МассивСтрокТаблицы);
	ПараметрыОбработчика.Вставить("МассивСсылок", ?(ЕстьПомеченныеНаУдаление, МассивСсылокПомеченныхНаУдаление, МассивСсылокНеПомеченныхНаУдаление));
	ПараметрыОбработчика.Вставить("ИмяРеквизитаЗначение", ИмяРеквизитаЗначение);
	ПараметрыОбработчика.Вставить("ЕстьПомеченныеНаУдаление", ЕстьПомеченныеНаУдаление);
	
	Обработчик = Новый ОписаниеОповещения("ПометитьВыделенныеОбъектыТаблицыНаУдалениеЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	Если КоличествоМожноУдалить = 1 Тогда
		Если ЕстьПомеченныеНаУдаление Тогда
			ТекстВопроса = НСтр("ru = 'Снять с ""%1"" пометку на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить ""%1"" на удаление?'");
		КонецЕсли;
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", МассивСтрокТаблицы[0].Представление);
	Иначе
		Если ЕстьПомеченныеНаУдаление Тогда
			ТекстВопроса = НСтр("ru = 'Снять с выделенных объектов (%1) пометку на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить выделенные объекты (%1) на удаление?'");
		КонецЕсли;
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", Формат(КоличествоМожноУдалить, "ЧН=0; ЧГ="));
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да);
	Кнопки.Добавить(КодВозвратаДиалога.Нет);
	
	ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(Данные, Пометка, ПроверятьРодителя)
	
	// Устанавливаем подчиненным
	ЭлементыСтроки = Данные.ПолучитьЭлементы();
	
	Для Каждого Элемент Из ЭлементыСтроки Цикл
		Элемент.Пометка = Пометка;
		ДеревоПомеченныхНаУдалениеУстановитьПометкуВСписке(Элемент, Пометка, Ложь);
	КонецЦикла;
	
	// Проверяем родителя
	Родитель = Данные.ПолучитьРодителя();
	
	Если ПроверятьРодителя И Родитель <> Неопределено Тогда 
		ДеревоПомеченныхНаУдалениеПроверитьРодителя(Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПомеченныхНаУдалениеПроверитьРодителя(Родитель)
	
	ПометкаРодителя = Истина;
	ЭлементыСтроки = Родитель.ПолучитьЭлементы();
	Для Каждого Элемент Из ЭлементыСтроки Цикл
		Если Не Элемент.Пометка Тогда
			ПометкаРодителя = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Родитель.Пометка = ПометкаРодителя;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент, Сервер

&НаКлиентеНаСервереБезКонтекста
Процедура ВидимостьДоступность(Форма)
	Элементы = Форма.Элементы;
	ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;
	
	Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Удалить'");
	Элементы.КнопкаЗакрыть.Заголовок = НСтр("ru = 'Закрыть'");
	Элементы.КнопкаНазад.Заголовок = НСтр("ru = '< В начало'");
	
	Если ТекущаяСтраница = Элементы.СтраницаВыборРежимаУдаления Тогда
		Элементы.КнопкаНазад.Видимость = Ложь;
		Элементы.КнопкаДалее.Видимость = Истина;
		Если Форма.РежимУдаления <> "Полный" Тогда
			Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Далее >'");
		КонецЕсли;
		Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
		Элементы.КнопкаЗакрыть.Заголовок = НСтр("ru = 'Отмена'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПомеченныеНаУдаление Тогда
		Элементы.КнопкаНазад.Видимость = Истина;
		Элементы.КнопкаНазад.Заголовок = НСтр("ru = '< Назад'");
		Элементы.КнопкаДалее.Видимость = Истина;
		Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Удалить'");
		Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация Тогда
		Элементы.КнопкаНазад.Видимость = Ложь;
		Элементы.КнопкаДалее.Видимость = Ложь;
		Элементы.КнопкаЗакрыть.Заголовок = НСтр("ru = 'Прервать и закрыть'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПричиныНевозможностиУдаления Тогда
		Элементы.КнопкаНазад.Видимость = Истина;
		Элементы.КнопкаДалее.Видимость = Истина;
		Элементы.КнопкаДалее.Заголовок = НСтр("ru = 'Повторить удаление'");
		Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУдалениеНеТребуется Тогда
		Элементы.КнопкаНазад.Видимость = Истина;
		Элементы.КнопкаДалее.Видимость = Ложь;
		Элементы.КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУспешноЗавершено Тогда
		Элементы.КнопкаНазад.Видимость = Истина;
		Элементы.КнопкаДалее.Видимость = Ложь;
		Элементы.КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		Если ТекущаяСтраница = Элементы.СтраницаПричиныНевозможностиУдаления Тогда
			Элементы.СтраницаПричиныНевозможностиУдаления.Видимость = Истина;
		Иначе
			Элементы.СтраницаПричиныНевозможностиУдаления.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НомерКартинки(СсылкаИлиДанные, СсылочногоТипа, Вид, ПометкаУдаления)
	Если СсылочногоТипа Тогда
		Если Вид = "СПРАВОЧНИК"
			Или Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
			НомерКартинки = 3;
		ИначеЕсли Вид = "ДОКУМЕНТ" Тогда
			НомерКартинки = 12;
		ИначеЕсли Вид = "ПЛАНСЧЕТОВ" Тогда
			НомерКартинки = 15;
		ИначеЕсли Вид = "ПЛАНВИДОВРАСЧЕТА" Тогда
			НомерКартинки = 17;
		ИначеЕсли Вид = "БИЗНЕСПРОЦЕСС" Тогда
			НомерКартинки = 19;
		ИначеЕсли Вид = "ЗАДАЧА" Тогда
			НомерКартинки = 21;
		ИначеЕсли Вид = "ПЛАНОБМЕНА" Тогда
			НомерКартинки = 23;
		Иначе
			НомерКартинки = -2;
		КонецЕсли;
		Если ПометкаУдаления Тогда
			НомерКартинки = НомерКартинки + 1;
		КонецЕсли;
	Иначе
		Если Вид = "КОНСТАНТА" Тогда
			НомерКартинки = 25;
		ИначеЕсли Вид = "РЕГИСТРСВЕДЕНИЙ" Тогда
			НомерКартинки = 26;
		ИначеЕсли Вид = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
			НомерКартинки = 28;
		ИначеЕсли Вид = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
			НомерКартинки = 34;
		ИначеЕсли Вид = "РЕГИСТРРАСЧЕТА" Тогда
			НомерКартинки = 38;
		ИначеЕсли СсылкаИлиДанные = Неопределено Тогда
			НомерКартинки = 11;
		Иначе
			НомерКартинки = 8;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерКартинки;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера, Сервер

&НаСервере
Функция ЗаполнитьДеревоПомеченныхНаУдаление()
	Результат = Новый Структура;
	Результат.Вставить("КоличествоТипов", 0);
	
	ОбработкаМенеджер = Обработки.УдалениеПомеченныхОбъектов;
	
	ПараметрыВыполнения = Новый Структура;
	
	// Заполнение дерева помеченных на удаление
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоПомеченныхНаУдаление");
	ДеревоЗначений.Строки.Очистить();
	ДеревоЗначений.Колонки.Добавить("Количество");
	
	ПомеченныеНаУдаление = ПомеченныеНаУдалениеСоСтраницыРезультатов();
	ПометкиУстанавливаютсяВыборочно = (ПомеченныеНаУдаление.Количество() > 0);
	
	УзлыПервогоУровня = Новый Соответствие;
	
	ОбработкаМенеджер.ИнициализироватьПараметры(ПараметрыВыполнения);
	ОбработкаМенеджер.ПолучитьПомеченныеНаУдаление(ПараметрыВыполнения);
	
	Для Каждого УдаляемыйСсылка Из ПараметрыВыполнения.ПомеченныеНаУдаление Цикл
		ТипУдаляемого = ТипЗнч(УдаляемыйСсылка);
		УдаляемыйИнформация = ОбработкаМенеджер.СформироватьИнформациюОТипах(ПараметрыВыполнения, ТипУдаляемого);
		
		УзелТипа = УзлыПервогоУровня.Получить(ТипУдаляемого);
		Если УзелТипа = Неопределено Тогда
			УдаляемыйМетаданные = УдаляемыйСсылка.Метаданные();
			УзелТипа = ДеревоЗначений.Строки.Добавить();
			УзелТипа.Значение      = УдаляемыйИнформация.ПолноеИмя;
			УзелТипа.Представление = УдаляемыйИнформация.ПредставлениеСписка;
			УзелТипа.Пометка       = Истина;
			УзелТипа.Количество    = 0;
			УзелТипа.НомерКартинки = -1;
			УзлыПервогоУровня.Вставить(ТипУдаляемого, УзелТипа);
		КонецЕсли;
		УзелТипа.Количество = УзелТипа.Количество + 1;
		
		УзелУдаляемого = УзелТипа.Строки.Добавить();
		УзелУдаляемого.Значение      = УдаляемыйСсылка;
		УзелУдаляемого.Представление = Строка(УдаляемыйСсылка);
		УзелУдаляемого.Пометка       = Истина;
		УзелУдаляемого.НомерКартинки = НомерКартинки(УдаляемыйСсылка, Истина, УдаляемыйИнформация.Вид, Истина);
		
		Если ПометкиУстанавливаютсяВыборочно И ПомеченныеНаУдаление.Найти(УдаляемыйСсылка) = Неопределено Тогда
			УзелУдаляемого.Пометка = Ложь;
			УзелТипа.Пометка       = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УзелТипа Из ДеревоЗначений.Строки Цикл
		УзелТипа.Представление = УзелТипа.Представление + " (" + УзелТипа.Количество + ")";
	КонецЦикла;
	
	ДеревоЗначений.Колонки.Удалить(ДеревоЗначений.Колонки.Количество);
	ДеревоЗначений.Строки.Сортировать("Представление", Истина);
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоПомеченныхНаУдаление");
	
	Результат.КоличествоТипов = УзлыПервогоУровня.Количество();
	
	Если Результат.КоличествоТипов = 0 Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаУдалениеНеТребуется;
	Иначе
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПомеченныеНаУдаление;
	КонецЕсли;
	ВидимостьДоступность(ЭтотОбъект);
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПомеченныеНаУдалениеСоСтраницыРезультатов()
	ПомеченныеНаУдаление = Новый Массив;
	
	ДеревоЗначений = РеквизитФормыВЗначение("НеУдаленные");
	Найденные = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("ПометкаУдаления", Истина), Истина);
	Для Каждого СтрокаДерева Из Найденные Цикл
		Если ТипЗнч(СтрокаДерева.УдаляемыйСсылка) <> Тип("Строка")
			И ПомеченныеНаУдаление.Найти(СтрокаДерева.УдаляемыйСсылка) = Неопределено Тогда
			ПомеченныеНаУдаление.Добавить(СтрокаДерева.УдаляемыйСсылка);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗначений = РеквизитФормыВЗначение("СвязиНеУдаленных");
	Найденные = ТаблицаЗначений.НайтиСтроки(Новый Структура("ПометкаУдаления", Истина));
	Для Каждого СтрокаДерева Из Найденные Цикл
		Если ТипЗнч(СтрокаДерева.ОбнаруженныйСсылка) <> Тип("Строка")
			И ПомеченныеНаУдаление.Найти(СтрокаДерева.УдаляемыйСсылка) = Неопределено Тогда
			ПомеченныеНаУдаление.Добавить(СтрокаДерева.ОбнаруженныйСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПомеченныеНаУдаление;
КонецФункции

&НаСервере
Функция ПомеченныеНаУдалениеСоСтраницыУстановкиФлажков()
	ПомеченныеНаУдаление = Новый Массив;
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоПомеченныхНаУдаление");
	Найденные = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Пометка", Истина), Истина);
	Для Каждого СтрокаДерева Из Найденные Цикл
		Если ТипЗнч(СтрокаДерева.Значение) <> Тип("Строка") Тогда
			ПомеченныеНаУдаление.Добавить(СтрокаДерева.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПомеченныеНаУдаление;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеПолучитьРезультат()
	Результат = Новый Структура;
	Результат.Вставить("ФоновоеЗаданиеВыполнено", Ложь);
	Результат.ФоновоеЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Если Результат.ФоновоеЗаданиеВыполнено Тогда
		СтандартныеПодсистемыКлиентСервер.НовыйРезультатВыполнения(Результат);
		ФоновоеЗаданиеЗагрузитьРезультат(Результат);
	Иначе
		ФоновоеЗаданиеПрочитатьПромежуточныйРезультат(Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеЗапустить(ПовторныйЗапуск)
	Результат = СтандартныеПодсистемыКлиентСервер.НовыйРезультатВыполнения();
	Результат.Вставить("ФоновоеЗаданиеЗапущено", Ложь);
	
	// Запуск фонового задания
	ПараметрыУдаления = Новый Структура;
	
	Если РежимУдаления = "Выборочный" Тогда
		Если ПовторныйЗапуск Тогда
			ПомеченныеНаУдаление = ПомеченныеНаУдалениеСоСтраницыРезультатов();
		Иначе
			ПомеченныеНаУдаление = ПомеченныеНаУдалениеСоСтраницыУстановкиФлажков();
		КонецЕсли;
		Если ПомеченныеНаУдаление.Количество() = 0 Тогда
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаУдалениеНеТребуется;
			ВидимостьДоступность(ЭтотОбъект);
			Возврат Результат;
		КонецЕсли;
		ПараметрыУдаления.Вставить("ПомеченныеНаУдаление", ПомеченныеНаУдаление);
	КонецЕсли;
	
	ПараметрыУдаления.Вставить("ПериодЗаписи", 1); // Секунд
	
	РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.УдалениеПомеченныхОбъектов.УдалитьПомеченныеОбъектыИнтерактивно",
		ПараметрыУдаления,
		НСтр("ru = 'Удаление помеченных объектов (интерактивное)'"));
	
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат(Результат);
		Результат.ФоновоеЗаданиеЗапущено = Ложь;
	Иначе
		ФоновоеЗаданиеПрочитатьПромежуточныйРезультат(Результат);
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
		Результат.ФоновоеЗаданиеЗапущено = Истина;
	КонецЕсли;
	ВидимостьДоступность(ЭтотОбъект);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьПометкуУдаленияОбъектов(МассивСсылок, ПометкаУдаления)
	Результат = СтандартныеПодсистемыКлиентСервер.НовыйРезультатВыполнения();
	Для Каждого Ссылка Из МассивСсылок Цикл
		ИзменяемыйОбъект = Ссылка.ПолучитьОбъект();
		ИзменяемыйОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	КонецЦикла;
	СтандартныеПодсистемыКлиентСервер.ПодготовитьОповещениеДинамическихСписков(МассивСсылок, Результат);
	Результат.ВыводОповещения.Использование = Истина;
	Если ПометкаУдаления Тогда
		Результат.ВыводОповещения.Заголовок = НСтр("ru = 'Пометка удаления установлена'");
	Иначе
		Результат.ВыводОповещения.Заголовок = НСтр("ru = 'Пометка удаления снята'");
	КонецЕсли;
	КоличествоОбъектов = МассивСсылок.Количество();
	Если КоличествоОбъектов =1 Тогда
		Результат.ВыводОповещения.Ссылка = МассивСсылок[0];
		Результат.ВыводОповещения.Текст = Строка(Результат.ВыводОповещения.Ссылка);
	Иначе
		Результат.ВыводОповещения.Заголовок = Результат.ВыводОповещения.Заголовок + " (" + Формат(КоличествоОбъектов, "ЧН=0; ЧГ=") + ")";
	КонецЕсли;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура ПриСозданииНаСервереУстановитьТекстПоясненияКОбработке()
	КоличествоСоединений = 0;
	НомерЭтогоСеанса = НомерСеансаИнформационнойБазы();
	Для Каждого СеансИнформационнойБазы Из ПолучитьСеансыИнформационнойБазы() Цикл
		Если СеансИнформационнойБазы.НомерСеанса = НомерЭтогоСеанса Тогда
			Продолжить;
		КонецЕсли;
		Если СеансИнформационнойБазы.ИмяПриложения = "1CV8" // Толстый клиент.
			Или СеансИнформационнойБазы.ИмяПриложения = "1CV8C" // Тонкий клиент.
			Или СеансИнформационнойБазы.ИмяПриложения = "WebClient" // Веб-клиент.
			Тогда
			КоличествоСоединений = КоличествоСоединений + 1;
		КонецЕсли;
	КонецЦикла;
	
	ШаблонЗаголовка = Элементы.ПояснениеКОбработке.Заголовок;
	Если КоличествоСоединений = 0 Тогда
		Элементы.ПояснениеКОбработке.Заголовок = Лев(ШаблонЗаголовка, Найти(ШаблонЗаголовка, "<1/>") - 1);
		КлючСохраненияПоложенияОкна = "1";
	Иначе
		Остаток = СтрЗаменить(ШаблонЗаголовка, "<1/>", "");
		МассивСтрок = Новый Массив;
		
		Позиция = Найти(Остаток, "<a");
		МассивСтрок.Добавить(Лев(Остаток, Позиция - 1));
		Остаток = Сред(Остаток, Позиция);
		
		Позиция = Найти(Остаток, "</a>");
		ОпределениеСсылки = Лев(Остаток, Позиция -1);
		Остаток = Сред(Остаток, Позиция + 4);
		
		Позиция = Найти(ОпределениеСсылки, """");
		ОпределениеСсылки = Сред(ОпределениеСсылки, Позиция + 1);
		
		Позиция = Найти(ОпределениеСсылки, """");
		АдресСсылки = Лев(ОпределениеСсылки, Позиция - 1);
		ТекстСсылки = Сред(ОпределениеСсылки, Позиция + 2);
		ТекстСсылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСсылки, Формат(КоличествоСоединений, "ЧГ="));
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстСсылки, , , , АдресСсылки));
		МассивСтрок.Добавить(Остаток);
		
		Элементы.ПояснениеКОбработке.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		КлючСохраненияПоложенияОкна = "2";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеПрочитатьПромежуточныйРезультат(Результат)
	Прогресс = ДлительныеОперации.ПрочитатьПрогресс(ФоновоеЗаданиеИдентификатор);
	Если Прогресс <> Неопределено Тогда
		ФоновоеЗаданиеПроцент   = Прогресс.Процент;
		ФоновоеЗаданиеСостояние = Прогресс.Текст;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат(Результат)
	// Получение результата.
	РезультатВыполненияВФоне = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполненияВФоне = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка оповещения для динамических списков.
	СтандартныеПодсистемыКлиентСервер.ПодготовитьОповещениеДинамическихСписков(РезультатВыполненияВФоне.Удаленные, Результат);
	
	УдаленныеКоличество = РезультатВыполненияВФоне.Удаленные.Количество();
	НеУдаленныеКоличество = РезультатВыполненияВФоне.НеУдаленные.Количество();
	
	ОповещениеТекст = Неопределено;
	ОповещениеКартинка = Неопределено;
	
	Если УдаленныеКоличество = 0 И НеУдаленныеКоличество = 0 Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаУдалениеНеТребуется;
	ИначеЕсли НеУдаленныеКоличество = 0 Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаУспешноЗавершено;
		ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удаление помеченных объектов успешно завершено.
			|Удалено объектов: %1.'"),
			Формат(УдаленныеКоличество, "ЧН=0; ЧГ=")
		);
		Элементы.НадписьУспешноЗавершено.Заголовок = ОповещениеТекст;
	Иначе
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПричиныНевозможностиУдаления;
		ОповещениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удаление помеченных объектов завершено.
			|Удалено объектов: %1,
			|Не удалено: %2.'"),
			Формат(УдаленныеКоличество, "ЧН=0; ЧГ="),
			Формат(НеУдаленныеКоличество, "ЧН=0; ЧГ=")
		);
		ОповещениеКартинка = БиблиотекаКартинок.Предупреждение32;
		
		Если УдаленныеКоличество = 0 Тогда
			Элементы.НадписьИтогиЧастичногоУдаления.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не получилось удалить объекты, помеченные на удаление (%1):'"),
				Формат(НеУдаленныеКоличество, "ЧН=0; ЧГ=")
			);
		Иначе
			Элементы.НадписьИтогиЧастичногоУдаления.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Успешно удалено: %1 из %2, остальные объекты не удалены (%3):'"),
				Формат(УдаленныеКоличество, "ЧН=0; ЧГ="),
				Формат(УдаленныеКоличество+НеУдаленныеКоличество, "ЧН=0; ЧГ="),
				Формат(НеУдаленныеКоличество, "ЧН=0; ЧГ=")
			);
		КонецЕсли;
		
		Шаблон = Элементы.ГруппаНеУдаленные.Заголовок;
		Шаблон = Лев(Шаблон, Найти(Шаблон, "("));
		Элементы.ГруппаНеУдаленные.Заголовок = Шаблон + Формат(НеУдаленныеКоличество, "ЧН=0; ЧГ=") + ")";
		
		ЗаполнитьКоллекцииОставшихсяОбъектов(РезультатВыполненияВФоне);
		
		ГруппыНеУдаленных = НеУдаленные.ПолучитьЭлементы();
		Если ГруппыНеУдаленных.Количество() > 0 Тогда
			ЭлементыПервойГруппы = ГруппыНеУдаленных[0].ПолучитьЭлементы();
			Если ЭлементыПервойГруппы.Количество() > 0 Тогда
				Элементы.НеУдаленные.ТекущаяСтрока = ЭлементыПервойГруппы[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеТекст <> Неопределено Тогда
		Результат.ВыводОповещения.Использование = Истина;
		Результат.ВыводОповещения.Заголовок = НСтр("ru = 'Удаление помеченных'");
		Результат.ВыводОповещения.Текст = ОповещениеТекст;
		Результат.ВыводОповещения.Ссылка = НавигационнаяСсылка;
		Результат.ВыводОповещения.Картинка = ОповещениеКартинка;
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор  = Неопределено;
	ВидимостьДоступность(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоллекцииОставшихсяОбъектов(РезультатВыполненияВФоне)
	
	ПрепятствующиеУдалению = РезультатВыполненияВФоне.ПрепятствующиеУдалению;
	ИнформацияОТипах = РезультатВыполненияВФоне.ИнформацияОТипах;
	
	ДеревоНеУдаленные = РеквизитФормыВЗначение("НеУдаленные");
	ДеревоНеУдаленные.Строки.Очистить();
	ТаблицаСвязиНеУдаленных = РеквизитФормыВЗначение("СвязиНеУдаленных");
	ТаблицаСвязиНеУдаленных.Очистить();
	
	ГруппыНеУдаленных = Новый Соответствие;
	СтрокиНеУдаленных = Новый Соответствие;
	
	Для Каждого Причина Из ПрепятствующиеУдалению Цикл
		СтрокаНеУдаленного = СтрокиНеУдаленных.Получить(Причина.УдаляемыйСсылка);
		Если СтрокаНеУдаленного = Неопределено Тогда
			УдаляемыйИнформация = ИнформацияОТипах.Получить(Причина.УдаляемыйТип);
			Если УдаляемыйИнформация.Технический Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппаНеУдаленного = ГруппыНеУдаленных.Получить(Причина.УдаляемыйТип);
			Если ГруппаНеУдаленного = Неопределено Тогда
				ГруппаНеУдаленного = ДеревоНеУдаленные.Строки.Добавить();
				ГруппаНеУдаленного.НомерКартинки   = -1;
				ГруппаНеУдаленного.УдаляемыйСсылка = УдаляемыйИнформация.ПолноеИмя;
				ГруппаНеУдаленного.Представление   = УдаляемыйИнформация.ПредставлениеСписка;
				
				ГруппыНеУдаленных.Вставить(Причина.УдаляемыйТип, ГруппаНеУдаленного);
			КонецЕсли;
			
			ГруппаНеУдаленного.КоличествоСвязей = ГруппаНеУдаленного.КоличествоСвязей + 1;
			
			СтрокаНеУдаленного = ГруппаНеУдаленного.Строки.Добавить();
			СтрокаНеУдаленного.УдаляемыйСсылка = Причина.УдаляемыйСсылка;
			СтрокаНеУдаленного.Представление   = Строка(Причина.УдаляемыйСсылка);
			СтрокаНеУдаленного.ПометкаУдаления = Истина;
			
			СтрокаНеУдаленного.НомерКартинки = НомерКартинки(
				СтрокаНеУдаленного.УдаляемыйСсылка,
				Истина,
				УдаляемыйИнформация.Вид,
				СтрокаНеУдаленного.ПометкаУдаления);
			
			СтрокиНеУдаленных.Вставить(Причина.УдаляемыйСсылка, СтрокаНеУдаленного);
		КонецЕсли;
		
		СтрокаНеУдаленного.КоличествоСвязей = СтрокаНеУдаленного.КоличествоСвязей + 1;
		
		СтрокаПрепятствующегоУдалению = ТаблицаСвязиНеУдаленных.Добавить();
		СтрокаПрепятствующегоУдалению.УдаляемыйСсылка    = Причина.УдаляемыйСсылка;
		СтрокаПрепятствующегоУдалению.ОбнаруженныйСсылка = Причина.ОбнаруженныйСсылка;
		СтрокаПрепятствующегоУдалению.ПометкаУдаления    = Причина.ОбнаруженныйПометкаУдаления;
		СтрокаПрепятствующегоУдалению.ЭтоОшибка          = (Причина.ОбнаруженныйТип = Тип("Строка"));
		
		Если Не СтрокаПрепятствующегоУдалению.ЭтоОшибка Тогда
			ОбнаруженныйИнформация = ИнформацияОТипах.Получить(Причина.ОбнаруженныйТип);
			
			СтрокаПрепятствующегоУдалению.СсылочногоТипа = ОбнаруженныйИнформация.Ссылочный;
			
			Если Причина.ОбнаруженныйСсылка = Неопределено Тогда // Константа
				СтрокаПрепятствующегоУдалению.ОбнаруженныйСсылка = ОбнаруженныйИнформация.ПолноеИмя;
				СтрокаПрепятствующегоУдалению.ЭтоКонстанта = Истина;
				СтрокаПрепятствующегоУдалению.Представление = ОбнаруженныйИнформация.ПредставлениеЭлемента + " (" + НСтр("ru = 'Константа'") + ")";
			Иначе
				СтрокаПрепятствующегоУдалению.Представление = Строка(Причина.ОбнаруженныйСсылка) + " (" + ОбнаруженныйИнформация.ПредставлениеЭлемента + ")";
			КонецЕсли;
			
			СтрокаПрепятствующегоУдалению.НомерКартинки = НомерКартинки(
				СтрокаПрепятствующегоУдалению.ОбнаруженныйСсылка,
				СтрокаПрепятствующегоУдалению.СсылочногоТипа,
				ОбнаруженныйИнформация.Вид,
				СтрокаПрепятствующегоУдалению.ПометкаУдаления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ГруппаНеУдаленного Из ДеревоНеУдаленные.Строки Цикл
		ГруппаНеУдаленного.Представление = ГруппаНеУдаленного.Представление + " (" + Формат(ГруппаНеУдаленного.КоличествоСвязей, "ЧН=0; ЧГ=") + ")";
	КонецЦикла;
	
	ДеревоНеУдаленные.Строки.Сортировать("Представление", Истина);
	ТаблицаСвязиНеУдаленных.Сортировать("УдаляемыйСсылка, Представление");
	
	ЗначениеВРеквизитФормы(ДеревоНеУдаленные,       "НеУдаленные");
	ЗначениеВРеквизитФормы(ТаблицаСвязиНеУдаленных, "СвязиНеУдаленных");
КонецПроцедуры

