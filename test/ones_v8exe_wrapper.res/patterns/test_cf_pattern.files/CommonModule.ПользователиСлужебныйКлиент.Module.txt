////////////////////////////////////////////////////////////////////////////////
// Подсистема "Пользователи".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей в управляемой форме

// Только для внутреннего использования
//
Процедура РазвернутьПодсистемыРолей(Форма, Безусловно = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если НЕ Безусловно
	   И НЕ Элементы.РолиПоказатьТолькоВыбранныеРоли.Пометка Тогда
		
		Возврат;
	КонецЕсли;
	
	// Развернуть все.
	Для каждого Строка Из Форма.Роли.ПолучитьЭлементы() Цикл
		Элементы.Роли.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет попытку авторизации пользователя и проверку результата.
Процедура ПроверитьАвторизациюПользователя(Параметры, ПроверитьЗапускСПустымСпискомПользователей = Ложь) Экспорт
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если ПроверитьЗапускСПустымСпискомПользователей Тогда
		Если НЕ ПараметрыКлиента.Свойство("ОшибкаЗапускаСПустымСпискомПользователей") Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если НЕ ПараметрыКлиента.Свойство("ОшибкаАвторизации") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Отказ = Истина;
	Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения(
		"ИнтерактивнаяОбработкаПриПроверкеАвторизацииПользователя", ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики оповещений.

// Предупреждает об ошибке авторизации или предлагает создать первого администратора.
Процедура ИнтерактивнаяОбработкаПриПроверкеАвторизацииПользователя(Параметры, Неопределен) Экспорт
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	
	Если НЕ ПараметрыКлиента.Свойство("ОшибкаЗапускаСПустымСпискомПользователей") Тогда
		ОшибкаАвторизации = ПараметрыКлиента.ОшибкаАвторизации;
		
		Если ТипЗнч(ОшибкаАвторизации) = Тип("ФиксированнаяСтруктура") Тогда
			Параметры.Перезапустить = Истина;
			Если ЗначениеЗаполнено(ОшибкаАвторизации.ДополнительныеПараметрыКоманднойСтроки) Тогда
				Параметры.ДополнительныеПараметрыКоманднойСтроки =
					ОшибкаАвторизации.ДополнительныеПараметрыКоманднойСтроки;
			КонецЕсли;
			ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
			Возврат;
		Иначе
			СтандартныеПодсистемыКлиент.ПоказатьПредупреждениеИПродолжить(Параметры, ОшибкаАвторизации);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Создание администратора или завершение работы.
	ТекстВопроса =
		НСтр("ru = 'Запуск с пустым списком пользователей информационной базы невозможен.
		           |Добавить пользователя Администратор и перезапустить программу?
		           |
		           |Пояснение: также можно завершить работу и вручную добавить в список
		           |пользователей информационной базы учетную запись администратора с двумя ролями
		           |""Администратор системы"", ""Полные права"" и повторить запуск программы от его имени.
		           |
		           |Для перехода к списку пользователей информационной базы необходимо открыть
		           |Конфигуратор и воспользоваться пунктом меню ""Администрирование - Пользователи"".'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("СоздатьИПерезапустить", НСтр("ru = 'Добавить и перезапустить'"));
	Кнопки.Добавить("ЗавершитьРаботу",       НСтр("ru = 'Завершить работу'"));
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ПослеОтветаНаВопросСоздатьАдминистратораИлиЗавершитьРаботу",
		ЭтотОбъект, Параметры);
	
	ПоказатьВопрос(
		ОбработкаОтвета,
		ТекстВопроса,
		Кнопки,
		,
		"СоздатьИПерезапустить",
		НСтр("ru = 'Авторизация пользователя'") );
		
КонецПроцедуры

// Продолжение предыдущей процедуры.
Процедура ПослеОтветаНаВопросСоздатьАдминистратораИлиЗавершитьРаботу(Ответ, Параметры) Экспорт
	
	Если Ответ = "СоздатьИПерезапустить" Тогда
		ПользователиСлужебныйВызовСервера.СоздатьПервогоАдминистратораСистемы();
		
		НовыйПараметрЗапуска = " /N""" + НСтр("ru = 'Администратор'")+ """";
		
		Если ЗначениеЗаполнено(ПараметрЗапуска) Тогда
			НовыйПараметрЗапуска = НовыйПараметрЗапуска
				+ " /C """ + СтрЗаменить(ПараметрЗапуска, """", """""") + """";
		КонецЕсли;
		
		Параметры.Перезапустить = Истина;
		Параметры.ДополнительныеПараметрыКоманднойСтроки = НовыйПараметрЗапуска;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры
