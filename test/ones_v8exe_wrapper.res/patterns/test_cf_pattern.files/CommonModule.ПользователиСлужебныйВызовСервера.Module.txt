////////////////////////////////////////////////////////////////////////////////
// Подсистема "Пользователи".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Только для внутреннего использования.
Функция ПроверитьВозможностьЗапускаСПустымСпискомПользователейИБ(ВернутьТекстОшибки = Ложь) Экспорт
	
	Возврат ПользователиСлужебный.ПроверитьВозможностьЗапускаСПустымСпискомПользователейИБ(
		ВернутьТекстОшибки);
	
КонецФункции

// Только для внутреннего использования.
Процедура СоздатьПервогоАдминистратораСистемы() Экспорт
	
	ТекстОшибки = ПользователиСлужебный.ПроверитьВозможностьЗапускаСПустымСпискомПользователейИБ(Истина);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		Администратор = ПользователиИнформационнойБазы.СоздатьПользователя();
		Администратор.Имя = НСтр("ru = 'Администратор'");
		Администратор.ПолноеИмя = Администратор.Имя;
		Администратор.АутентификацияСтандартная = Истина;
		Администратор.ПоказыватьВСпискеВыбора   = Истина;
		Администратор.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
		Администратор.Роли.Добавить(Пользователи.РольАдминистратораСистемы());
		Администратор.Записать();
		
		ПользователиСлужебный.УстановитьНачальныеНастройки(Администратор.Имя);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Проверяет, что объект информационной базы используется в качестве объекта авторизации
// какого-нибудь внешнего пользователя, кроме заданного внешнего пользователя (если задан).
//
Функция ОбъектАвторизацииИспользуется(Знач СсылкаНаОбъектАвторизации,
                                      Знач СсылкаНаТекущегоВнешнегоПользователя = Неопределено,
                                      НайденныйВнешнийПользователь = Неопределено,
                                      ЕстьПравоДобавленияВнешнегоПользователя = Ложь,
                                      ТекстОшибки = "") Экспорт
	
	Возврат ПользователиСлужебный.ОбъектАвторизацииИспользуется(
				СсылкаНаОбъектАвторизации,
				СсылкаНаТекущегоВнешнегоПользователя,
				НайденныйВнешнийПользователь,
				ЕстьПравоДобавленияВнешнегоПользователя,
				ТекстОшибки);
	
КонецФункции