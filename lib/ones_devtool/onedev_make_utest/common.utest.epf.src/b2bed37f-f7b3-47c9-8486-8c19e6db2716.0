{2
,
{36
,0
,0
,0
,0
,1
,0
,0
,00000000-0000-0000-0000-000000000000
,1
,
{1
,0}
,0
,0
,1
,1
,1
,0
,1
,0
,
{1
,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b
,"ПриСозданииНаСервере"}
,
{0}
,1
,
{19
,
{-1
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,9
,"ФормаКоманднаяПанель"
,
{1
,0}
,
{1
,0}
,0
,1
,0
,0
,0
,2
,2
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{0
,0
,1}
,0
,1
,0
,0}
,6
,a9f3b1ac-f51b-431e-b102-55a69acdecad
,
{22
,
{2
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,1
,"Кнопка2"
,
{1
,1
,
{"ru"
,"Запуск теста из текущего файла обработки (Код теста актуален на момент открытия обработки. Доступна оладка)"}
}
,1
,
{3
,409b9a53-7f7e-4178-86c1-33176c7c7a7a}
,
{0}
,3
,0
,0
,0
,2
,2
,0
,0
,0
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,0
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,1
,
{"Pattern"}
,""
,2
,0
,1
,
{8
,
{3
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,0
,"Кнопка2ExtendedTooltip"
,
{1
,0}
,
{1
,0}
,1
,0
,0
,2
,2
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{5
,0
,0
,3
,0
,
{0}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,0
,
{0}
,0
,1
,0
,48312c09-257f-4b29-b280-284dd89efc1e}
}
,0
,1
,2
,
{1
,
{1
,0}
,0}
,0
,0}
,
{"U"}
}
,a9f3b1ac-f51b-431e-b102-55a69acdecad
,
{22
,
{1
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,1
,"Кнопка1"
,
{1
,1
,
{"ru"
,"Запуск теста с передачей файла обработки на сервер (Код теста актуален на момент нажатия кнопки. НЕ доступна оладка)"}
}
,1
,
{1
,409b9a53-7f7e-4178-86c1-33176c7c7a7a}
,
{0}
,3
,0
,0
,0
,2
,2
,0
,0
,0
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,0
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,1
,
{"Pattern"}
,""
,2
,0
,1
,
{8
,
{4
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,0
,"Кнопка1ExtendedTooltip"
,
{1
,0}
,
{1
,0}
,1
,0
,0
,2
,2
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{5
,0
,0
,3
,0
,
{0}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,0
,
{0}
,0
,1
,0
,48312c09-257f-4b29-b280-284dd89efc1e}
}
,0
,1
,2
,
{1
,
{1
,0}
,0}
,0
,0}
,
{"U"}
}
,77ffcc29-7f2d-4223-b22f-19666e7250ba
,
{32
,
{5
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,3
,"UITest"
,1
,0
,
{1
,0}
,
{1
,0}
,
{1
,
{2}
}
,
{0}
,1
,0
,2
,0
,2
,
{1
,0}
,
{1
,0}
,1
,1
,0
,3
,0
,3
,1
,3
,0
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{10
,0
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,0
,
{1
,0}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,0
,0
,0
,2}
,
{0}
,1
,
{19
,
{6
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,8
,"UITestКонтекстноеМеню"
,
{1
,0}
,
{1
,0}
,0
,1
,0
,0
,0
,2
,2
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{1
,1}
,0
,1
,0
,0}
,1
,
{"Pattern"}
,
{"Pattern"}
,""
,""
,
{0}
,0
,0
,1
,
{8
,
{7
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,0
,"UITestРасширеннаяПодсказка"
,
{1
,0}
,
{1
,0}
,1
,0
,0
,2
,2
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{5
,0
,0
,3
,0
,
{0}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,0
,
{0}
,0
,1
,0
,48312c09-257f-4b29-b280-284dd89efc1e}
}
,0
,1
,2
,
{1
,
{1
,0}
,0}
,0
,0}
}
,77ffcc29-7f2d-4223-b22f-19666e7250ba
,
{32
,
{8
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,2
,"UITest_Host"
,1
,0
,
{1
,0}
,
{1
,0}
,
{1
,
{3}
}
,
{0}
,1
,0
,2
,0
,2
,
{1
,0}
,
{1
,0}
,1
,1
,0
,3
,0
,3
,1
,3
,0
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{30
,
{1
,0}
,0
,0
,2
,2
,1
,2
,2
,2
,2
,2
,2
,2
,2
,2
,
{"U"}
,
{"U"}
,""
,0
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,0
,0
,2
,3
,00000000-0000-0000-0000-000000000000
,
{5004
,0}
,
{0
,0}
,2
,
{1
,0}
,
{1
,0}
,2
,1
,0
,
{"Pattern"}
,1
,
{0}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,1
,
{3
,0
,0}
,0
,
{1
,0}
,2
,0
,2
,0}
,
{0}
,1
,
{19
,
{9
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,8
,"UITest_HostКонтекстноеМеню"
,
{1
,0}
,
{1
,0}
,0
,1
,0
,0
,0
,2
,2
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{1
,1}
,0
,1
,0
,0}
,1
,
{"Pattern"}
,
{"Pattern"}
,""
,""
,
{0}
,0
,0
,1
,
{8
,
{10
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,0
,"UITest_HostРасширеннаяПодсказка"
,
{1
,0}
,
{1
,0}
,1
,0
,0
,2
,2
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{5
,0
,0
,3
,0
,
{0}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,0
,
{0}
,0
,1
,0
,48312c09-257f-4b29-b280-284dd89efc1e}
}
,0
,1
,2
,
{1
,
{1
,0}
,0}
,0
,0}
}
,77ffcc29-7f2d-4223-b22f-19666e7250ba
,
{32
,
{11
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,2
,"UITest_port"
,1
,0
,
{1
,0}
,
{1
,0}
,
{1
,
{4}
}
,
{0}
,1
,0
,2
,0
,2
,
{1
,0}
,
{1
,0}
,1
,1
,0
,3
,0
,3
,1
,3
,0
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{30
,
{1
,0}
,0
,0
,2
,2
,1
,2
,2
,2
,2
,2
,2
,2
,2
,2
,
{"U"}
,
{"U"}
,""
,0
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,0
,0
,2
,3
,00000000-0000-0000-0000-000000000000
,
{5004
,0}
,
{0
,0}
,2
,
{1
,0}
,
{1
,0}
,2
,1
,0
,
{"Pattern"}
,1
,
{0}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,1
,
{3
,0
,0}
,0
,
{1
,0}
,2
,0
,2
,0}
,
{0}
,1
,
{19
,
{12
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,8
,"UITest_portКонтекстноеМеню"
,
{1
,0}
,
{1
,0}
,0
,1
,0
,0
,0
,2
,2
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{1
,1}
,0
,1
,0
,0}
,1
,
{"Pattern"}
,
{"Pattern"}
,""
,""
,
{0}
,0
,0
,1
,
{8
,
{13
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,0
,"UITest_portРасширеннаяПодсказка"
,
{1
,0}
,
{1
,0}
,1
,0
,0
,2
,2
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{5
,0
,0
,3
,0
,
{0}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,0
,
{0}
,0
,1
,0
,48312c09-257f-4b29-b280-284dd89efc1e}
}
,0
,1
,2
,
{1
,
{1
,0}
,0}
,0
,0}
}
,77ffcc29-7f2d-4223-b22f-19666e7250ba
,
{32
,
{14
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,2
,"UITest_TestClientID"
,1
,0
,
{1
,0}
,
{1
,0}
,
{1
,
{5}
}
,
{0}
,1
,0
,2
,0
,2
,
{1
,0}
,
{1
,0}
,1
,1
,0
,3
,0
,3
,1
,3
,0
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{30
,
{1
,0}
,0
,0
,2
,2
,1
,2
,2
,2
,2
,2
,2
,2
,2
,2
,
{"U"}
,
{"U"}
,""
,0
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,0
,0
,2
,3
,00000000-0000-0000-0000-000000000000
,
{5004
,0}
,
{0
,0}
,2
,
{1
,0}
,
{1
,0}
,2
,1
,0
,
{"Pattern"}
,1
,
{0}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,1
,
{3
,0
,0}
,0
,
{1
,0}
,2
,0
,2
,0}
,
{0}
,1
,
{19
,
{15
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,8
,"UITest_TestClientIDКонтекстноеМеню"
,
{1
,0}
,
{1
,0}
,0
,1
,0
,0
,0
,2
,2
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{1
,1}
,0
,1
,0
,0}
,1
,
{"Pattern"}
,
{"Pattern"}
,""
,""
,
{0}
,0
,0
,1
,
{8
,
{16
,02023637-7868-4a5f-8576-835a76e0c9ba}
,0
,0
,1
,
{0
,
{0
,
{"B"
,1}
,0}
}
,0
,"UITest_TestClientIDРасширеннаяПодсказка"
,
{1
,0}
,
{1
,0}
,1
,0
,0
,2
,2
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{5
,0
,0
,3
,0
,
{0}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,0
,
{0}
,0
,1
,0
,48312c09-257f-4b29-b280-284dd89efc1e}
}
,0
,1
,2
,
{1
,
{1
,0}
,0}
,0
,0}
}
,""
,""
,1
,
{19
,
{0}
,0
,0
,0
,7
,"Navigator"
,
{1
,0}
,
{1
,0}
,0
,1
,0
,0
,0
,2
,2
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,0
,0
,1
,0
,1
,
{8
,
{0}
,0
,0
,0
,0
,"NavigatorExtendedTooltip"
,
{1
,0}
,
{1
,0}
,1
,0
,0
,2
,2
,
{3
,4
,
{0}
}
,
{7
,3
,0
,1
,100}
,
{0
,0
,0}
,1
,
{5
,0
,0
,3
,0
,
{0}
,
{3
,4
,
{0}
}
,
{3
,4
,
{0}
}
,
{3
,0
,
{0}
,0
,1
,0
,48312c09-257f-4b29-b280-284dd89efc1e}
}
,0
,1
,2
,
{1
,
{1
,0}
,0}
,0
,0}
}
,1
,""
,2
,0}
,"//**********************************************************************************
//  Unit-тест объекта МД
//  
//	http://rm.asscode.ru/projects/ru-asscode-ones-devtool/wiki/Unit-тестирование_объектов_МД
//
//  Respect: авторам проекта V8Unpack https://www.assembla.com/wiki/show/V8Unpack/. 
//
//  Copyright © 2013 Leonid Vlasov (leo@asscode.ru)
//
//	Данная лицензия разрешает лицам
, получившим копию данного программного 
//	обеспечения и сопутствующей документации (в дальнейшем именуемыми «Программное 
//	Обеспечение»)
, безвозмездно использовать Программное Обеспечение без ограничений
, 
//	включая неограниченное право на использование
, копирование
, изменение
, 
//	добавление
, публикацию
, распространение
, сублицензирование и/или продажу копий 
//	Программного Обеспечения
, также как и лицам
, которым предоставляется данное 
//	Программное Обеспечение
, при соблюдении следующих условий:
//
//	Указанное выше уведомление об авторском праве и данные условия должны быть 
//	включены во все копии или значимые части данного Программного Обеспечения.
//
//	ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ «КАК ЕСТЬ»
, БЕЗ КАКИХ-ЛИБО 
//	ГАРАНТИЙ
, ЯВНО ВЫРАЖЕННЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ
, ВКЛЮЧАЯ
, НО НЕ ОГРАНИЧИВАЯСЬ 
//	ГАРАНТИЯМИ ТОВАРНОЙ ПРИГОДНОСТИ
, СООТВЕТСТВИЯ ПО ЕГО КОНКРЕТНОМУ НАЗНАЧЕНИЮ И 
//	ОТСУТСТВИЯ НАРУШЕНИЙ ПРАВ. НИ В КАКОМ СЛУЧАЕ АВТОРЫ ИЛИ ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ 
//	ОТВЕТСТВЕННОСТИ ПО ИСКАМ О ВОЗМЕЩЕНИИ УЩЕРБА
, УБЫТКОВ ИЛИ ДРУГИХ ТРЕБОВАНИЙ ПО 
//	ДЕЙСТВУЮЩИМ КОНТРАКТАМ
, ДЕЛИКТАМ ИЛИ ИНОМУ
, ВОЗНИКШИМ ИЗ
, ИМЕЮЩИМ ПРИЧИНОЙ ИЛИ 
//	СВЯЗАННЫМ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ ИЛИ ИСПОЛЬЗОВАНИЕМ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ 
//	ИЛИ ИНЫМИ ДЕЙСТВИЯМИ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ.
//
//************************************************************************************

////////////////////////////////////////////////////////
// TestEngine -> 

#Область TestEngine_СЛУЖЕБНЫЕ_ПЕРЕМЕННЫЕ
&НаКлиенте
Перем CallStack;
&НаКлиенте
Перем TestProtocol;
&НаКлиенте
Перем RefArray;
#КонецОбласти

// <- TestEngine 
////////////////////////////////////////////////////////


////////////////////////////////////////////////////////
// ПИШЕМ ТЕСТЫ КЛИЕНТА ЗДЕСЬ ->

#Область ТЕСТЫ_КЛИЕНТ
//Точка входа
&НаКлиенте
функция ТестыКлиента(arg)
	StartProtocol(""utest"");
//ВЫЗЫВАЕМ ТЕСТОВЫЕ МЕТОДЫ ->	
	
	ДемострационныйТестКлиент(arg);
	
//TODO написать тесты примерно так:
	
	//ПревыйКлиентскийТест();
	//....
	//ПоследнийКлиентскийТест();
	
//<- ВЫЗЫВАЕМ ТЕСТОВЫЕ МЕТОДЫ	
	Возврат TestProtocol(true);	
конецфункции	

#КонецОбласти

// <-ПИШЕМ ТЕСТЫ КЛИЕНТА ЗДЕСЬ
////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
// ПИШЕМ АВТОТЕСТЫ ИНТЕРФЕЙСА ЗДЕСЬ ->

#Область ТЕСТЫ_UI
//Точка входа
&НаКлиенте
функция ТестUI(arg) export
	StartProtocol(""uitest"");
	UITestParameters = Неопределено;
	if ТипЗнч(arg) = Тип(""Структура"") И arg.Свойство(""UITestParameters""
,UITestParameters) Тогда
	AssertTrue(""Параметр [Host] соединения с клиентом тестирования UI установлен.""
,""ТестUI()#10""
,UITestParameters.Свойство(""Host""));
	AssertTrue(""Параметр [Port] соединения с клиентом тестирования UI установлен.""
,""ТестUI()#11""
,UITestParameters.Свойство(""Port""));
	AssertTrue(""Параметр [TestClientID] соединения с клиентом тестирования UI установлен.""
,""ТестUI()#12""
,UITestParameters.Свойство(""TestClientID""));
	ТестируемоеПриложение = Новый ТестируемоеПриложение(UITestParameters.Host
,UITestParameters.Port
,UITestParameters.TestClientID);
	Попытка
		ТестируемоеПриложение.УстановитьСоединение();
	Исключение
		AssertTrue(""Соединение с клиентом тестирования UI установлено.""
,""ТестUI()#10""
,Ложь);
	КонецПопытки;	
//ВЫЗЫВАЕМ ТЕСТОВЫЕ МЕТОДЫ ->	
	ДемострационныйТестUI(ТестируемоеПриложение);
//TODO написать тесты примерно так:

	//ПревыйТестUI();
	//....
	//ПоследнийТестUI();
	
//<- ВЫЗЫВАЕМ ТЕСТОВЫЕ МЕТОДЫ
    ТестируемоеПриложение.РазорватьСоединение();
	endif;	
	Возврат TestProtocol(true);	
КонецФункции	

#КонецОбласти

//<- ПИШЕМ АВТОТЕСТЫ ИНТЕРФЕЙСА ЗДЕСЬ
////////////////////////////////////////////////////////



////////////////////////////////////////////////////////
// TestEngine -> 

#Область TestEngine_ПРИМЕРЫ

&НаКлиенте
Процедура ДемострационныйТестКлиент(arg)
//ПРИМЕРЫ
// CallTrace - строка содержащая идентификатор места вызова функции Assert*. По этому идентификатору ищем строку в котрой тест провален.
//             При сравнении значений коллекций - CallTrace - покажет элемент коллекции который вызвал провал теста
//1) Проверка значений специальных типов
	CallTracePef=""ДемострационныйТестКлиент()"";
	MessPref=""Демострационный тест. "";
	AssertTrue(MessPref+""Значение Истина""
,CallTracePef+""#10""
,Истина);
	AssertFalse(MessPref+""Значение Ложь""
,CallTracePef+""#15""
,Ложь);
	AssertNull(MessPref+""Значение Null""
,CallTracePef+""#16""
,Null);
	AssertNotNull(MessPref+""Значение НЕ Null""
,CallTracePef+""#16""
,Неопределено);
	AssertUndefined(MessPref+""Значение Неопределено""
,CallTracePef+""#17""
,Неопределено);
//2) Тест значений примитивных типов
    Число1 = 10;
    Число2 = 10;
	AssertEquals(MessPref+""Значения равны""
,CallTracePef+""#20""
,Число1
,Число2);
	
	Дата1 = '00010101';
	Дата2 = '00010101';
	AssertEquals(MessPref+""Значения равны""
,CallTracePef+""#21""
,Дата1
,Дата2);
	
	Строка1 = ""Сравнивается без учета регистра"";
	Строка2 = ""Сравнивается без учета регистра"";
	AssertEquals(MessPref+""Значения равны""
,CallTracePef+""#22""
,ВРег(Строка1)
,НРег(Строка2));
	
//3) Тест значений системных перечислений

	СП1 = ПоложениеЗаголовка.ЗаголовокСлева;
	СП2 = ПоложениеЗаголовка.ЗаголовокСлева;
	AssertEquals(MessPref+""Значения равны""
,CallTracePef+""#22""
,СП1
,СП2);
	
	
	
//4) Тест значений универсальных коллекций
////a) КлючИЗначение
    C1=Новый Структура(""Ключ1""
,100);
	Для Каждого с из C1 Цикл
		КЗ1 = с;
	КонецЦикла;	
    C2=Новый Структура(""Ключ1""
,100);
	Для Каждого с из C2 Цикл
		КЗ2 = с;
	КонецЦикла;	
	AssertEquals(MessPref+""Значения равны""
,CallTracePef+""#22""
,КЗ1
,КЗ2);
////б) Структура
    C1=Новый Структура(""Ключ1
,Ключ2
,Ключ3""
,100
,200
,300);
	Для Каждого с из C1 Цикл
		КЗ1 = с;
	КонецЦикла;	
    C2=Новый Структура(""Ключ1
,Ключ2
,Ключ3""
,100
,200
,300);
	Для Каждого с из C2 Цикл
		КЗ2 = с;
	КонецЦикла;	
	AssertEquals(MessPref+""Значения равны""
,CallTracePef+""#23""
,C1
,C2);
////в) Соответствие
    CO1=Новый Соответствие;
	CO1.Вставить(""Ключ 1""
,100);
	CO1.Вставить(""Структура 1""
,Новый Структура(""Ключ1
,Ключ2
,Ключ3""
,100
,200
,300));
    CO2=Новый Соответствие;
	CO2.Вставить(""Ключ 1""
,100);
	CO2.Вставить(""Структура 1""
,Новый Структура(""Ключ1
,Ключ2
,Ключ3""
,100
,200
,300));
	AssertEquals(MessPref+""Значения равны""
,CallTracePef+""#24""
,CO1
,CO2);
////г) Таблица значений - сравниваются только значения в ячейках с учетом порядка следования строк и столбцов. (возможно только на сервере
, TODO перенести в демонстрацию в модуле обработки)
	
////д) Массив - сравнивается с учетом порядка следования элементов.
	А1 = Новый Массив;
	А2 = Новый Массив;
	Для К=0 по 10 Цикл
		А1.Добавить(К);
		А2.Добавить(К);
	КонецЦикла;	
	AssertEquals(MessPref+""Значения равны""
,CallTracePef+""#25""
,А1
,А2);
//5) Тест исключения. Выполняется в два этапа.
//// Этап первый. Ожидание исключения определённого типа. 
////              Тип исключения определяется по вхождению строки ExpectedExeption в строку ActualExeption.Description 
	ЗначениеДоИсключения=неопределено;
	Попытка 
		raise ""Exseption"";
		ЗначениеДоИсключения=100 ;
	Исключение	
		AssertRaise(""Демострационный тест""
,CallTracePef+""#30""
,""Exseption""
,ИнформацияОбОшибке());
	КонецПопытки;	
//// Этап втрой. Контроль того
, что исключение было вызвано. Для этого контролируем значение
///              контрольной переменной которой будет присвоено значение если исключение не было вызвано 
	AssertUndefined(""Демострационный тест""
,CallTracePef+""#40""
,ЗначениеДоИсключения);
	
//6) Сравнение значений типа ОписаниеТипов
    МТ = Новый Массив;
	МТ.Добавить(Тип(""Строка""));
	МТ.Добавить(Тип(""Null""));
	МТ.Добавить(Тип(""ГенераторСлучайныхЧисел""));
	ОТ1 = Новый ОписаниеТипов(МТ
,
,
,Новый КвалификаторыЧисла(10
,2
,ДопустимыйЗнак.Любой)
								  
,Новый КвалификаторыСтроки(1000
,ДопустимаяДлина.Переменная)
								  
,Новый КвалификаторыДаты(ЧастиДаты.Дата)
								  );
								  
	ОТ2 = Новый ОписаниеТипов(МТ
,
,
,Новый КвалификаторыЧисла(10
,2
,ДопустимыйЗнак.Любой)
								  
,Новый КвалификаторыСтроки(1000
,ДопустимаяДлина.Переменная)
								  
,Новый КвалификаторыДаты(ЧастиДаты.Дата)
							  );
	AssertEquals(""Демострационный тест""
,CallTracePef+""#50""
,ОТ1
,ОТ2);
	
//7) Тест с созданием объектов в БД								  
////a) Поготовка к тесту создание объектов в БД
	МассивСсылок = ДемострационныйТестКлиент_ПодготовитьОбъекты(RefArray());
////б) Выполнение тестов в защищенном блоке
	Попытка
		AssertEquals(""Демострационный тест""
,CallTracePef+""#51""
,МассивСсылок[1]
,МассивСсылок[1]);
	Исключение
////в) Тест провален
//////в.1) Удаление созданных объектов
		ClearOjects(МассивСсылок);
//////в.2) Прерываем тест
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;	
////г) Тест пройден
//////г.1) Удаление созданных объектов
		ClearOjects(МассивСсылок);
		
//8) Получение формы. Используем вызов GetFormTest()
//	 GetFormTest() добавляет параметр TetsName=TestName() в параметры формы
//   при этом в обработчиках и методах формы по наличию и значению парамета TetsName
//   можно выплнять некотрые действия и т.п. Для доступа к параметру TetsName на клиенте
//   необходимо создать реквизит формы  TetsName и заполнять его из параметра в обработчике
//   ""При создании на сервере""
	Форма = GetFormTest(""Обработка.Тесты.Форма.Форма"");
конецПроцедуры

&НаСервере
функция ДемострационныйТестКлиент_ПодготовитьОбъекты(RefArray)
	Спр2_1 = Справочники.Справочник2.СоздатьЭлемент();
	Спр2_1.Наименование = ""Спр2_1"";
// Для записи объекта используем вызов WriteObject()
// WriteObject() добавляет параметр TetsName=TestName() 
// в структуру ДополнительныеСвойства объекта. При этом
// в обработчиках (на пример ""При записи"") объекта 
// по наличию и значению свойства ДополнительныеСвойства.TetsName
// можно выплнять некотрые действия.
// WriteObject() помещает ссылку на записаный объект на голову(index=0)
// массива RefArray. Массив RefArray используется для удаления созданных
,
// во время теста
, объектов - вызов ClearOjects().
	WriteObject(Спр2_1
,RefArray);
	Спр2_2 = Справочники.Справочник2.СоздатьЭлемент();
	Спр2_2.Наименование = ""Спр2_2"";
	WriteObject(Спр2_2
,RefArray);
	Возврат RefArray;
КонецФункции

&НаКлиенте
Процедура ДемострационныйТестUI(ТестируемоеПриложение)
	АктивноеОкно = ТестируемоеПриложение.ПолучитьАктивноеОкно();
	AssertTrue(""Окно клиента тестирования получено""
,""ДемострационныйТестUI #1""
,ТипЗнч(АктивноеОкно)=Тип(""ТестируемоеОкноКлиентскогоПриложения""));
//TODO	
конецПроцедуры	

#КонецОбласти

#Область TestEngine_ОБЩИЕ_МЕТОДЫ
////////////////////////////////////////////////////////
//	ОБЩИЕ МЕТОДЫ ИСПОЛЬЗУЕМЫЕ В ТЕСТАХ
////////////////////////////////////////////////////////

//TODO ЗДЕСЬ РЕАЛИЗУЕМ СВОИ ОБЩИЕ МЕТОДЫ

////////////////////////////////////////////////////////
//  МЕТОДЫ ИЗ ШАБЛОНА


// Только Клиент
&НаКлиенте
function GetFormTest(ИмяФормы
,Праметры=Неопределено
,Владелец=Неопределено
,Уникальность=Неопределено
,Окно=Неопределено
,НавигационнаяСсылка=Неопределено)
	Если ТипЗнч(Параметры)<>Тип(""Структура"") Тогда
		Праметры=Новый Структура;
	КонецЕсли;
	Праметры.Вставить(""TestName""
,TestName());
	result = ПолучитьФорму(ИмяФормы
,Праметры
,Владелец
,Уникальность
,Окно
,НавигационнаяСсылка);
	Возврат result;
endfunction	
&НаКлиенте
function sleep(sec)
	count = 0;
	dateExit = ТекущаяДата()+sec;
	while ТекущаяДата()<dateExit do
		count=count+1;
	enddo;
	return count;
endfunction	
&НаКлиенте
function SysDelim()
	СИ = new СистемнаяИнформация;
	return ?(СИ.ТипПлатформы=ТипПлатформы.Windows_x86 ИЛИ СИ.ТипПлатформы=ТипПлатформы.Windows_x86_64
,""\""
,""/"");
endfunction	
// Только Сервер
&Насервере
функция ИспользуемоеИмяФайла()
    Возврат РеквизитФормыВЗначение(""Объект"").ИспользуемоеИмяФайла;
конецФункции
&Насервере
//Запись объектов созданных в ходе теста
procedure WriteObject(Object
,RefArray) export
	РеквизитФормыВЗначение(""Объект"").WriteObject(Object
,RefArray);	
endprocedure	
&Насервере
//Очитстка объектов созданных в ходе теста
procedure ClearOjects(RefArray) export
	РеквизитФормыВЗначение(""Объект"").ClearOjects(RefArray);	
endprocedure	




#КонецОбласти

#Область TestEngine_МЕТОДЫ_УТВЕРЖДЕНИЯ
///////////////////////////////////////////////////////
//	МЕТОДЫ-УТВЕРЖДЕНИЯ
//Для трассировки используеися массив возвращаемый функцией CallStack() 
//и параметр CallTrace типа строка в котром передаётся идетификатор места вызова Assert*.
//По этому идентификатору ищем строку. 
//При рекурсивном вызове (сравнение коллекций) AssertEquals() - CallStack() покажет элемент коллекции в котором значения не равны.
//Для протоколирования используется строка возвращаемая функцией TestProtocol()
//Все функции Assert* добавлябт строку в протокол  TestProtocol() - для AssertEquals() запись в протокол зависит от параметра record_protocol
//Все функции Assert* возращают строку - сообщение записанное в протокол 
////////////////////////////////////////////////////////


//TODO ЗДЕСЬ РЕАЛИЗУЕМ СВОИ МЕТОДЫ-УТВЕРЖДЕНИЯ 

////////////////////////////////////////////////////////
//  МЕТОДЫ ИЗ ШАБЛОНА

&НаКлиенте 
function AssertTrue(знач message=""""
,знач CallTrace
,знач condition) export
	pushCallTrace(CallTrace);
	if Not condition then
		failNotEquals(message
,true
,condition);
	endif;
	popCallTrace();
	return AddProtocol(format_(message
,true
,condition));
endfunction
&НаКлиенте 
function AssertFalse(знач message=""""
,знач CallTrace
,знач condition) export
	pushCallTrace(CallTrace);
	if condition then
		failNotEquals(message
,false
,condition);
	endif;
	popCallTrace();
	return AddProtocol(format_(message
,false
,condition));
endfunction
&НаКлиенте
//record_protocol - булево - признак записи сообщения в протокол. При рекурсивных вызовах позволяет не захломлять протокол теста.
function AssertEquals(знач message=""""
,знач CallTrace
,знач expected
,знач actual
,record_protocol=true) export
	pushCallTrace(CallTrace);
	//Сравниваем строки без учета регистра
	expected=?(ТипЗнч(expected)=Тип(""Строка"")
,НРег(expected)
,expected); 
	actual=?(ТипЗнч(actual)=Тип(""Строка"")
,НРег(actual)
,actual);
    if ТипЗнч(expected)<>ТипЗнч(actual) then
//1) Сравниваем типы
		failNotEquals(message
,expected
,actual);
	elsif ТипЗнч(expected)=Тип(""КлючИЗначение"") тогда
//3) Сравниваем значения типа КлючИЗначение		
		AssertEquals(message+"" КлючИЗначение.key""
,CallTrace+"" КлючИЗначение.key""
,expected.key
,actual.key
,false);
		AssertEquals(message+"" КлючИЗначение.value""
,CallTrace+"" КлючИЗначение.value""
,expected.value
,actual.value
,false)
	elsif ТипЗнч(expected) = Тип(""Соответствие"") тогда
//4) Сравниваем элементы соответсвия
////a) Количество элементов
		if expected.count() <> actual.count() then
			failNotEquals(message+"" Количество элементов коллекции. ""
,expected.count()
,actual.count());
		endif;	
////б) Элементы коллекции
		for each item in expected do
	        actual_value = actual.Получить(item.key);
			AssertEquals(message+"" Соответствие[""+item.key+""].value""
,CallTrace+""Соответствие[""+item.key+""]""
,item.value
,actual_value
,false);
		enddo;	
	elsif ТипЗнч(expected) = Тип(""Структура"") тогда
//5) Сравниваем элементы стркутуры
////a) Количество элементов
		if expected.count() <> actual.count() then
			failNotEquals(message+"" Количество элементов коллекции. ""
,expected.count()
,actual.count());
		endif;	
////б) Элементы коллекции
		for each item in expected do
	        actual_value = Неопределено;
	        actual.Свойство(item.key
,actual_value);
			AssertEquals(message+"" Структура[""+item.key+""].value""
,CallTrace+""Структура[""+item.key+""]""
,item.value
,actual_value
,false);
		enddo;	
	elsif ТипЗнч(expected) = Тип(""СтрокаТаблицыЗначений"") тогда
//5.0) Сравниваем сторку таблицы значений
		i=0;
		for each item in expected do
			AssertEquals(message+"" [""+Строка(i)+""]""
,CallTrace+"" [""+Строка(i)+""]""
,item
,actual[i]
,false);
			i=i+1;
		enddo;	
	elsif ТипЗнч(expected) = Тип(""КолонкаТаблицыЗначений"") тогда
//5.1) Сравниваем клонки таблицы значений
			AssertEquals(message+"" Имя""
,CallTrace+"" Имя""
,expected.Name
,actual.Name
,false);
			AssertEquals(message+"" ТипЗначения""
,CallTrace+"" ТипЗначения""
,expected.ТипЗначения
,actual.ТипЗначения
,false);
////////////	elsif ТипЗнч(expected) = Тип(""ТаблицаЗначений"") тогда
///// Т ///////5.2) Сравниваем таблицы значений
///// И ////////a) Количество элементов
///// П //////		if expected.count() <> actual.count() then
/////   //////			failNotEquals(message+"" Количество элементов коллекции. ""
,expected.count()
,actual.count());
///// Н //////		endif;	
///// Е ////////б) Колонки
/////   //////			AssertEquals(message+"" КолонкиТЗ""
,CallTrace+"" КолонкиТЗ""
,expected.Колонки
,actual.Колонки
,false);
///// О ////////в) Строки
///// П //////		i=0;
///// Р //////		for each item in expected do
///// Е //////			if Indexed(actual) then
///// Д //////				AssertEquals(message+"" ТаблицаЗначений[""+Строка(i)+""]""
,CallTrace+""ТаблицаЗначений[""+Строка(i)+""]""
,item
,actual[i]
,false);
///// Е //////			else
///// Л //////				raise ""Сравнение типа [""+ТипЗнч(actual)+""] не поддерживается"";
///// Е //////			endif;	
///// Н //////			i=i+1;
////////////		enddo;	
	elsif Iterable(expected) тогда
//6) Сравниваем коллекции
////a) Количество элементов
		if Countable(expected) then
			if expected.count() <> actual.count() then
				failNotEquals(message+"" Количество элементов коллекции. ""
,expected.count()
,actual.count());
			endif;
		else
				raise ""Сравнение типа [""+ТипЗнч(actual)+""] не поддерживается"";
		endif;	
////б) Элементы коллекции
		i=0;
		for each item in expected do
			if Indexed(actual) then
				AssertEquals(message+"" Коллекция[""+Строка(i)+""]""
,CallTrace+""Коллекция[""+Строка(i)+""]""
,item
,actual[i]
,false);
			else
				raise ""Сравнение типа [""+ТипЗнч(actual)+""] не поддерживается"";
			endif;	
			i=i+1;
		enddo;	
	elsif expected<>actual then
//7) Сравниваем остальные типы		
		failNotEquals(message
,expected
,actual);
	endif;	
	popCallTrace();
	if record_protocol then
		return AddProtocol(format_(message
,expected
,actual));
	else
		return format_(message
,expected
,actual);
	endif;	
endfunction	
&НаКлиенте 
function AssertNotNull(знач message=""""
,знач CallTrace
,знач actual) export
	pushCallTrace(CallTrace);
	if (actual=Null) then
		fail(message+"" NotNullError""+"" expected:[Not Null] bat was: [Null]"");
	endif;	
	popCallTrace();
	return AddProtocol(message+"" expected:[Not Null] actual: [""+"" (""+ТипЗнч(actual)+"") ""+Строка(actual)+""]"");
endfunction		
&НаКлиенте  
function AssertNull(знач message=""""
,знач CallTrace
,знач actual) export
	pushCallTrace(CallTrace);
	if Not (actual=Null) then
		fail(message+"" NullError""+"" expected:[Null] bat was: [""+"" (""+ТипЗнч(actual)+"") ""+Строка(actual)+""]"");
	endif;	
	popCallTrace();
	return AddProtocol(message+"" expected:[Null] actual: [Null]"");
endfunction	
&НаКлиенте  
function AssertUndefined(знач message=""""
,знач CallTrace
,знач actual ) export
	pushCallTrace(CallTrace);
	if Not (actual=Undefined) then
		fail(message+"" UndefinedError""+"" expected:[Undefined] bat was: [""+"" (""+ТипЗнч(actual)+"") ""+Строка(actual)+""]"");
	endif;	
	popCallTrace();
	return AddProtocol(message+"" expected:[Undefined] actual: [Undefined]"");
endfunction		
&НаКлиенте 
//Тест исключения. Выполняется в два этапа.
// Этап первый. Ожидание исключения определённого типа. 
//              Тип исключения определяется по вхождению строки ExpectedExeption в строку ActualExeption.Description 
	//ЗначениеДоИсключения=неопределено;
	//Попытка 
	//	raise ""Exseption"";
	//	ЗначениеДоИсключения=100 ;
	//Исключение	
	//	AssertRaise(""Демострационный тест""
,CallTracePef+""#30""
,""Exseption""
,ИнформацияОбОшибке());
	//КонецПопытки;	
// Этап втрой. Контроль того
, что исключение было вызвано. Для этого контролируем значение
//              контрольной переменной которой будет присвоено значение если исключение не было вызвано 
	//AssertUndefined(""Демострационный тест""
,CallTracePef+""#40""
,ЗначениеДоИсключения);
function AssertRaise(знач message=""""
,знач CallTrace
,знач ExpectedExeption
,знач ActualExeption) export
    if Найти(ActualExeption.Description
,ExpectedExeption)=0 then
        fail(message+"" RaiseError""+"" expected:""+ExpectedExeption+"" bat was: [""+ActualExeption.Description+"")]
                     |-- Original exception:
                     | ""+ПодробноеПредставлениеОшибки(ActualExeption)+""
                     |----------------------"");
    endif;
	return AddProtocol(message+"" Exception expected:[""+ExpectedExeption+""] actual: [""+ActualExeption.Description+""]"");			 
endfunction 
#КонецОбласти

#Область TestEngine_СЛУЖЕБНЫЕ_ЗАПУСК_ТЕСТОВ
////////////////////////////////////////////////////////
//  МЕТОДЫ ИЗ ШАБЛОНА

//Точка входа
&НаКлиенте
function Test(arg=undefined) export
	result = ""<testcase testname='""+TestName()+""' time='""+ProtocolDateFormat()+""'>"";
	result =  result +""
	|""+TestMDObject(arg);
	result = result +""
	|""+ТестыКлиента(arg);
	result = result +""
	|""+TestServer(arg);
	result = result +""
	|""+ТестUI(arg);
	return result+""
	|</testcase>"";
endfunction	
//Обработчики событий формы
&НаКлиенте
//Запуск теста из текущего файла обработки 
//(Код теста актуален на момент открытия обработки. Доступна оладка)
Процедура test_local_click(Команда)
    args = UITestParameters();	
	result  = Test(args);
	Сообщить(result);
КонецПроцедуры
&НаКлиенте
Функция UITestParameters()
	Если Не UITest Тогда
		Возврат Неопределено;
	КонецЕсли;	
	res = Новый Структура;
	UITestParameters = Новый Структура;
	UITestParameters.Вставить(""Host""
,?(ПустаяСтрока(UITest_Host)
,Неопределено
,UITest_Host));
	UITestParameters.Вставить(""Port""
,?(UITest_port=0
,Неопределено
,UITest_port));
	UITestParameters.Вставить(""TestClientID""
,?(ПустаяСтрока(UITest_TestClientID)
,Неопределено
,UITest_TestClientID));
	res.Вставить(""UITestParameters""
,UITestParameters);
	Возврат res
КонецФункции	
&НаКлиенте
//Запуск теста с передачей файла обработки на сервер 
//(Код теста актуален на момент нажатия кнопки. НЕ доступна оладка)
Процедура test_remote_click(Команда)
    args = UITestParameters();	
	TestsFile =новый файл(ИспользуемоеИмяФайла());
	ИмяТеста  = ПодключитьОбработкуТест(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(TestsFile.ПолноеИмя)));
	MainForm = ПолучитьФорму(""ВнешняяОбработка.""+ИмяТеста+"".Форма.Main""
,
,ЭтаФорма);
	Сообщить(MainForm.Test(args));
КонецПроцедуры
&Насервере
функция ПодключитьОбработкуТест(ОбработкаТест)
	GUID = Строка(Новый УникальныйИдентификатор);
	ВнешниеОбработки.Подключить(ОбработкаТест
,GUID
,false);
	return GUID;
конецФункции	
&Насервере
function TestMDObject(arg)
	return РеквизитФормыВЗначение(""Объект"").ТестОбъектаМД(arg);	
endfunction	
&Насервере
function TestServer(arg)
	return РеквизитФормыВЗначение(""Объект"").ТестыСервера(arg);	
endfunction	
#КонецОбласти

#Область TestEngine_СЛУЖЕБНЫЕ_МЕТОДЫ
//Privat dec
&НаСервере
function HaseUITest()
	return РеквизитФормыВЗначение(""Объект"").HaseUITest();	
endfunction	
&НаКлиенте
function RefArray()
	if ТипЗнч(RefArray)<>Тип(""Массив"") then
		RefArray = новый Массив;
	endif;
	return RefArray;
endfunction	
&НаКлиенте
function Iterable(Value)
	Попытка
		Для Каждого item из Value цикл
			Прервать;
		КонецЦикла;	
		return true;
	Исключение
		return false;
	КонецПопытки;	
endfunction	
&НаКлиенте
function Indexed(Value)
	Попытка
		if Value.Count()>0 then
			item = Value[0];
			return true;
		else
			return false
		endif	
	Исключение
		return false;
	КонецПопытки;	
endfunction	
&НаКлиенте
function Countable(Value)
	Попытка
		Count = Value.Count();
		return true;
	Исключение
		return false;
	КонецПопытки;	
endfunction	
&НаСервере
function TestName()
	 Возврат РеквизитФормыВЗначение(""Объект"").TestName();	
endfunction	
&НаКлиенте
function format_(знач message
,знач expected
,знач actual
,result="""")
	return message + "" expected:[""+"" (""+ТипЗнч(expected)+"") ""+Строка(expected)+""] ""+?(result=""fail""
,"" but was:""
,"" actual:"")+""[""+"" (""+ТипЗнч(actual)+"") ""+Строка(actual)+""]"";	
endfunction	
&НаКлиенте
procedure failNotEquals(знач message
,знач expected
,знач actual)
	fail(format_(message
,expected
,actual
,""fail""));	
endprocedure	
&НаКлиенте
procedure fail(знач message)
	Mess = AssertationError(message)+""
	|""+Context()+""
	|""+CallStackAsString();
	CallStack().Clear();
	ClearProtocol();
	raise Mess;
endprocedure
&НаКлиенте
function AssertationError(знач message)
	return ""AssertationError: """"""+message+"""""""";
endfunction	
&НаКлиенте
function pushCallTrace(CallTrace)
	CallStack().Insert(0
,CallTrace);
endfunction
&НаКлиенте
function CallStack() export
	if CallStack=Неопределено then
		CallStack = New Array;
	endif;
	return CallStack;
endfunction	
&НаКлиенте
function popCallTrace()
	CallStack().Delete(0);
endfunction	
&НаКлиенте
function CallStackAsString();
	 result = 		""CallStack:
	 |"";
	 for i=0 to CallStack().UBound() do
		result=result+CallStack()[i]+""
		|"";
	enddo;
	return	result+""============================
	|"";	
endfunction	
&НаКлиенте  
function Context()
	systemInfo=new СистемнаяИнформация;
	return ""Context: 
	|  ConnStr:.......""+СтрокаСоединенияИнформационнойБазы()+""
	|  OsVersion:.....""+systemInfo.ВерсияОС+""
	|  1CVersion:.....""+systemInfo.ВерсияПриложения+""
	|  Host:..........""+ИмяКомпьютера()+""
	|  Side:..........""+ClientServer()+""
	|"";
endfunction	
&НаКлиенте  
function ClientServer()
	#Если Клиент тогда
		return ""Клиент"";
	#ИначеЕсли Сервер тогда
		return ""Сервер"";
	#ИначеЕсли ВнешнееСоединение тогда
		return ""ВнешнееСоединение"";
	#Иначе
		return ""Неопределено"";
	#КонецЕсли	
endfunction	
&НаКлиенте  
function AddProtocol(result)
//Добавляет строку в протокол тестирования	
	TestProtocol = TestProtocol();
	TestProtocol = TestProtocol+""
		|<item time='""+ProtocolDateFormat()+""'><![CDATA[""+result+""]]></item>"";
	return result;	
endfunction	
&НаКлиенте  
function TestProtocol(StopProtocol=false
,testtype=undefined)
//Возвращает протокол тестирования	
	if ПустаяСтрока(TestProtocol) тогда
		StartProtocol(testtype);
	endif;
	if StopProtocol then
		TestProtocol=TestProtocol+""
		|</items>
		|<testend type='""+testtype+""' testname='""+TestName()+""' time='""+ProtocolDateFormat()+""'/>
		|</test>""
	endif;
	result = TestProtocol;
	ClearProtocol();
	return result;
endfunction	
&НаКлиенте  
procedure StartProtocol(testtype)
	if ПустаяСтрока(testtype) then
		raise ""Начало протокола требует указать тип теста"";
	endif;	
	systemInfo=new СистемнаяИнформация;
	TestProtocol=""<test type='""+testtype+""' testname='""+TestName()+""' side='""+ClientServer()+""'>
		   	     |<teststart type='""+testtype+""'
				 |           testname=""""""+TestName()+""""""
				 |           time='""+ProtocolDateFormat()+""'
				 |           host='""+ИмяКомпьютера()+""'
			     |           OSVersion='""+systemInfo.ВерсияОС+""'
	             |           PVersion='""+systemInfo.ВерсияПриложения+""'
	             |           ConnStr='""+СтрокаСоединенияИнформационнойБазы()+""'/>
   		 		 |<items>"";
endprocedure	
&НаКлиенте  
procedure ClearProtocol()
	TestProtocol="""";
endprocedure	

function ProtocolDateFormat()
	return format(ТекущаяДатаСеанса()
,""ДФ='yyyy-MM-ddThh:mm:ss'"") 
endfunction	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ
, СтандартнаяОбработка)
	Заголовок = Заголовок+""(""+TestName()+"")"";
	UITest=HaseUITest();
КонецПроцедуры

#КонецОбласти

// <- TestEngine 
////////////////////////////////////////////////////////
"
,
{4
,5
,
{9
,
{1}
,0
,"Объект"
,
{1
,0}
,
{"Pattern"
,
{"#"
,3e2d4a40-bf22-40d9-b10d-216b94a53776}
}
,
{0
,
{0
,
{"B"
,1}
,0}
}
,
{0
,
{0
,
{"B"
,1}
,0}
}
,
{0
,0}
,
{0
,0}
,1
,0
,0
,0
,
{0
,0}
,
{0
,0}
}
,
{9
,
{2}
,0
,"UITest"
,
{1
,1
,
{"ru"
,"Запускать UITest"}
}
,
{"Pattern"
,
{"B"}
}
,
{0
,
{0
,
{"B"
,1}
,0}
}
,
{0
,
{0
,
{"B"
,1}
,0}
}
,
{0
,0}
,
{0
,0}
,0
,0
,0
,0
,
{0
,0}
,
{0
,0}
}
,
{9
,
{3}
,0
,"UITest_Host"
,
{1
,1
,
{"ru"
,"UITest host"}
}
,
{"Pattern"
,
{"S"}
}
,
{0
,
{0
,
{"B"
,1}
,0}
}
,
{0
,
{0
,
{"B"
,1}
,0}
}
,
{0
,0}
,
{0
,0}
,0
,0
,0
,0
,
{0
,0}
,
{0
,0}
}
,
{9
,
{4}
,0
,"UITest_port"
,
{1
,1
,
{"ru"
,"UITest port"}
}
,
{"Pattern"
,
{"N"
,10
,0
,1}
}
,
{0
,
{0
,
{"B"
,1}
,0}
}
,
{0
,
{0
,
{"B"
,1}
,0}
}
,
{0
,0}
,
{0
,0}
,0
,0
,0
,0
,
{0
,0}
,
{0
,0}
}
,
{9
,
{5}
,0
,"UITest_TestClientID"
,
{1
,1
,
{"ru"
,"UITest test client ID"}
}
,
{"Pattern"
,
{"S"}
}
,
{0
,
{0
,
{"B"
,1}
,0}
}
,
{0
,
{0
,
{"B"
,1}
,0}
}
,
{0
,0}
,
{0
,0}
,0
,0
,0
,0
,
{0
,0}
,
{0
,0}
}
,0
,0
,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
}
,
{0
,0}
,
{0
,3
,
{6
,
{1
,409b9a53-7f7e-4178-86c1-33176c7c7a7a}
,"test_remote"
,
{1
,1
,
{"ru"
,"Test remote"}
}
,
{1
,1
,
{"ru"
,"Test remote"}
}
,
{0
,
{0
,
{"B"
,1}
,0}
}
,
{0
,0
,0}
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,"test_remote_click"
,3
,0
,0
,
{0
,0}
}
,
{6
,
{2
,409b9a53-7f7e-4178-86c1-33176c7c7a7a}
,"reload"
,
{1
,1
,
{"ru"
,"Reload"}
}
,
{1
,1
,
{"ru"
,"Reload"}
}
,
{0
,
{0
,
{"B"
,1}
,0}
}
,
{0
,0
,0}
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,"reload"
,3
,0
,0
,
{0
,0}
}
,
{6
,
{3
,409b9a53-7f7e-4178-86c1-33176c7c7a7a}
,"test_local"
,
{1
,1
,
{"ru"
,"Test local"}
}
,
{1
,1
,
{"ru"
,"Test local"}
}
,
{0
,
{0
,
{"B"
,1}
,0}
}
,
{0
,0
,0}
,
{3
,0
,
{0}
,""
,-1
,-1
,1
,0}
,"test_local_click"
,3
,0
,0
,
{0
,0}
}
}
,
{0
,0}
,
{0
,0}
}