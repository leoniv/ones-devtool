//**********************************************************************************
//  Подключаемая библиотека 1С 
//	Что это такое - http://rm.asscode.ru/projects/asscode_oneapp_libs
//
//  Respect: авторам проекта V8Unpack https://www.assembla.com/wiki/show/V8Unpack/. 
//
//  Copyright © 2013 Leonid Vlasov (leo@asscode.ru)
//  $Copyright  
//
//  Описание:  $Description
//
//  Поддержка: $Support
//
//	Данная лицензия разрешает лицам, получившим копию данного программного 
//	обеспечения и сопутствующей документации (в дальнейшем именуемыми «Программное 
//	Обеспечение»), безвозмездно использовать Программное Обеспечение без ограничений, 
//	включая неограниченное право на использование, копирование, изменение, 
//	добавление, публикацию, распространение, сублицензирование и/или продажу копий 
//	Программного Обеспечения, также как и лицам, которым предоставляется данное 
//	Программное Обеспечение, при соблюдении следующих условий:
//
//	Указанное выше уведомление об авторском праве и данные условия должны быть 
//	включены во все копии или значимые части данного Программного Обеспечения.
//
//	ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ «КАК ЕСТЬ», БЕЗ КАКИХ-ЛИБО 
//	ГАРАНТИЙ, ЯВНО ВЫРАЖЕННЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ 
//	ГАРАНТИЯМИ ТОВАРНОЙ ПРИГОДНОСТИ, СООТВЕТСТВИЯ ПО ЕГО КОНКРЕТНОМУ НАЗНАЧЕНИЮ И 
//	ОТСУТСТВИЯ НАРУШЕНИЙ ПРАВ. НИ В КАКОМ СЛУЧАЕ АВТОРЫ ИЛИ ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ 
//	ОТВЕТСТВЕННОСТИ ПО ИСКАМ О ВОЗМЕЩЕНИИ УЩЕРБА, УБЫТКОВ ИЛИ ДРУГИХ ТРЕБОВАНИЙ ПО 
//	ДЕЙСТВУЮЩИМ КОНТРАКТАМ, ДЕЛИКТАМ ИЛИ ИНОМУ, ВОЗНИКШИМ ИЗ, ИМЕЮЩИМ ПРИЧИНОЙ ИЛИ 
//	СВЯЗАННЫМ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ ИЛИ ИСПОЛЬЗОВАНИЕМ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ 
//	ИЛИ ИНЫМИ ДЕЙСТВИЯМИ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ.
//
//***************************************************************************************
// ШАБЛОННЫЕ ПЕРЕМЕННЫЕ
Перем libs export;
//!!!ДЛЯ СОХРАНЕНИЯ ВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ КОДА МОДУЛЯ В ОБЩЕМ МОДУЛЕ
//			КОНФИГУРАЦИИ НЕ ИСПОЛЬЗУЙТЕ ПЕРЕМЕННЫЕ МОДУЛЯ
//!!! НЕ ИСПОЛЬЗУЙТЕ В ПОЛЕЗНОМ КОДЕ ШАБЛОННЫЕ ПЕРЕМЕННЫЕ КРОМЕ:
//		libs	

/////////////////////////////////
//ШАБЛОН НАЧАЛО

//Идентификация объекта ***********************
function Name() Export
	return ЭтотОбъект.Метаданные().Имя;
endfunction	
//Номер версии - заполнять при ответвлении новой
//Номер имеет формат "0.0"
function Version() Export
	version="0.1";
	return version;
endfunction
//Номер релиза - заполнять перед выпуском
//Монотонно возрастающее целое число
function Rel() export
	rel="6";
	return rel;
endfunction
//Имя пакета к которому пренадлежит объект
//имя пакета не должно содержать символов 
//запрещённых в именах фалов
//см. пакеты Java
function Package() export
	package="org.example.libs";
	Return package;	
endfunction	
//Реализует правила именовния файлов релизов объектов
//name.v1.v2.rel.epf (erf|cf)
function ObjFname(objname,objversion,objrel,ext) export
	return objname+"."+objversion+"."+objrel+"."+ext
endfunction	
//Подключение библиотек ***********************
//Возвращает текущий системный разделитель пути
function SysDelim()
	СИ = new СистемнаяИнформация;
	return ?(СИ.ТипПлатформы=ТипПлатформы.Windows_x86 ИЛИ СИ.ТипПлатформы=ТипПлатформы.Windows_x86_64,"\","/");
endfunction	
function SearchPath(Package)
	СИ=Новый СистемнаяИнформация;
	Если Найти(НРег(Строка(СИ.ТипПлатформы)),"windows") тогда
		SysDelim = "\";
		WSH=Новый COMobject("wscript.shell"); 
		SearchPath = WSH.ExpandEnvironmentStrings("%ASPCHome%");
		SearchPath=?(СтрЧислоВхождений(SearchPath,"%ASPCHome%")>0,"",SearchPath);
		if ПустаяСтрока(SearchPath) then
			raise "Не установлена переменная окружения %ASPCHome%"
		endif	
	Иначе 
		//возвращаем /opt/aspc/	- можно прмонтровать сетевую шару
		SearchPath="/opt/aspc";
		SysDelim = "/";
	конецесли;
	возврат SearchPath+"onesbin"+SysDelim+СтрЗаменить(Package,".",SysDelim)+SysDelim;
endfunction	
//Возвращает полный путь файла максимального релаза объекта
function GetMaxRel(package,libname,version)
	НайденныеФайлы=НайтиФайлы(SearchPath(Package),ObjFname(libname,version,"*","epf"),Ложь); 
	Если НайденныеФайлы.Количество()=0 Тогда
		result = "";	
	КонецЕсли;
	MaxRel=0; 
	Для К=0 По НайденныеФайлы.Количество()-1 Цикл
		Rel=Число(СтрПолучитьСтроку(СтрЗаменить(НайденныеФайлы[К].Имя,".",Символы.ПС),4));
		MaxRel=Макс(Rel,MaxRel);
	КонецЦикла;
	RelFile = New File(SearchPath(Package)+ObjFname(libname,version,Строка(MaxRel),"epf"));
	if RelFile.Существует() и RelFile.ЭтоФайл() тогда
		return RelFile.ПолноеИмя;
	else
		return "";
	endif;	
endfunction	
//Подключает библиотеки 
//package - имя пакета в который входит библиотека
//libname - имя библиотеки
//version - только версия как её возвращает функция Vrersion
//			будет загружен максимальный найденный релиз
//alias   - под этим именем будет зарегестритрованна внешняя обработка
//safemode- безопасный режим см. ВнешниеОбработкиМенеджер.Подключить
//PlatformVersion - для совместимости
procedure Include(package,libname,version,alias,safemode=false) export
	if libs=Неопределено then
		libs = Новый Структура;
	else
		if libs.Свойство(alias) then
			 raise _ExceptionConflictAliase(alias);
		endif	
    endif;
	ObjPath = GetMaxRel(package,libname,version);
	if ПустаяСтрока(ObjPath) then
	 	mess="
			  |Package    = "+Package+"
			  |Name       = "+libname+"
			  |Version    = "+version+"
			  |SearchPath = "+SearchPath(Package)+"
			  |ObjFname   = "+ObjFname(libname,version,"*","epf")+"
			  |";
		raise _ExceptionLostDependens(mess);
	else						
		libs.Вставить(alias,ВнешниеОбработки.Создать(ObjPath,safemode));
	endif	
endprocedure
//Документация по API
function Usage() export
return "TODO Это пример. Надо заполнять. Потом очень помогает.
|function ExecQuery()
|Descr:   
|Выполняет запрос на строне удаленной ИБ.
|
|ReturnType:  
|<ComOject>
|
|ReturnValue: 
|Результат запроса на стороне удалённой ИБ.
|
|Params:
|      QueryText      - <Строка> Обязательный. Текст запроса.
|      OnesConnection - <ComOject> Обязательный. Объект типа ""Внешнее Соединение"" или ""Automation сервер"" - соединение с удалённой ИБ.
|      QueryParam     - <Структура> Необязательный. Параметры запроса. QueryParam.Ключ - Имя параметра  QueryParam.Значение - значение параметра. Значения автоматически будут приведены к значениям удалённой ИБ. См. ToExternalValue()
|      
|Raise:
|      _ExceptionLocRefTypeNotExist
|      _ExceptionLocObjectNotExist
|Example:
|     qr =  ExecQuery(QueryText,Connector);
|     ТаблицаЗначений = UnloadQueryResult(qr,Connector);
|     Для Каждого Строка из ТаблицаЗначений Цикл
|     	//ДЧН
|     КонецЦикла
|
|Prototype:
|		 function ExecQuery(QueryText,OnesConnection,QueryParam)
|";
endfunction
//Отладка
function Debug() export
	//Если файл находится в SearchPath(Package)
	//значит это релиз и Debug = false
	F=Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
	if НРег(F.Путь)=НРег(SearchPath(Package())) then
		 return false;                                              
	else
		 return true;
	endif 
EndFunction
procedure Trace(mess) export
//Выводит сообщения если Debug=true
if Debug() then 
	Сообщить("trace: "+mess);
endif	
endprocedure	


//Стандартные исключения
function _ExceptionConflictAliase(mess="") export
	return "<ExceptionConflictAliase>"+mess;
endfunction	
function _ExceptionLostDependens(mess="") export
	return "<ExceptionLostDependens>"+mess;
endfunction	
function _ExceptionNotImpliment(mess="") export
	return "<ExceptionNotImpliment>"+mess;
endfunction
function _ExceptionBadParamType(PName,mess="")export
	return "<ExceptionBadParamType PName="""+PName+""">"+mess;
endfunction
function _ExceptionBadParamValue(PName,mess="")export
	return "<ExceptionBadParamValue PName="""+PName+""">"+mess;
endfunction
//
//ШАБЛОН КОНЕЦ
//////////////////////////////////
//$START_MODULE{ КОД МОДУЛЯ НАЧАЛО


//{TODO КОД МОДУЛЯ ПИШЕМ ЗДЕСЬ}


//$END_MODULE} КОД МОДУЛЯ КОНЕЦ
///////////////////////////////
//ПОДКЛЮЧАЕМ БИБЛИОТЕКИ
//Include("package","libname","v1.v2","alias",safemode);                                           

//{TODO ПОДКЛЮЧАЕМ БИБЛИОТЕКИ ЗДЕСЬ}


////////////////////////////////////////////////////////////////////////////////////
//	 	ОСНОВНАЯ ПРОГРАММА МОДУЛЯ ПИШЕМ НИЖЕ
//!!!ДЛЯ СОХРАНЕНИЯ ВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ КОДА МОДУЛЯ В ОБЩЕМ МОДУЛЕ
//	   КОНФИГУРАЦИИ НЕ ИСПОЛЬЗУЙТЕ КОД ОСНОВНОЙ ПРОГРАММЫ МОДУЛЯ 